<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>让处于事务中的特定代码在事务提交成功后再执行</title>
      <link href="2019/11/%E8%AE%A9%E5%A4%84%E4%BA%8E%E4%BA%8B%E5%8A%A1%E4%B8%AD%E7%9A%84%E7%89%B9%E5%AE%9A%E4%BB%A3%E7%A0%81%E5%9C%A8%E4%BA%8B%E5%8A%A1%E6%8F%90%E4%BA%A4%E6%88%90%E5%8A%9F%E5%90%8E%E5%86%8D%E6%89%A7%E8%A1%8C.html"/>
      <url>2019/11/%E8%AE%A9%E5%A4%84%E4%BA%8E%E4%BA%8B%E5%8A%A1%E4%B8%AD%E7%9A%84%E7%89%B9%E5%AE%9A%E4%BB%A3%E7%A0%81%E5%9C%A8%E4%BA%8B%E5%8A%A1%E6%8F%90%E4%BA%A4%E6%88%90%E5%8A%9F%E5%90%8E%E5%86%8D%E6%89%A7%E8%A1%8C.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>之前遇到过一个这样的问题：在服务A里的执行一个保存数据库方法，数据保存成功后会将主键ID通过MQ发送给服务B,服务B再根据主键ID去查询保存的数据，进行其他逻辑处理。后来发现，在服务B中根据MQ发送过来的ID通过数据库偶尔会查不到数据信息。</p><p>后来通过调试才发现，是因为在服务A里的保存方法加了事务注解，保存的数据结果只有在当前方法执行完成后才会对外生效，而MQ消息则是在保存方法执行前发送的，如果服务B在服务A中保存方法执行完成前就收到了MQ消息，就会导致上述问题发生。同样，如果在MQ发送成功后，保存方法发生了异常导致事务回滚，服务B也会查不到数据或者查询到错误的数据。</p><span id="more"></span><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>导致上述问题发生的根本原因还是因为发送MQ消息是在加了事务回滚的方法内部执行的，通过该方法保存或更新的数据只有在整个方法结束后才会对外生效，而MQ的消费者却有可能于改方法执行完成前收到消息。因此，最直接的解决办法是要将MQ消息放到事务方法结束后再执行。</p><p>但是，由于在项目中有很多处都是采用上述的这种逻辑，一个个改起来比较麻烦，最好能有一个通用的方式能够尽量少改动之前的业务逻辑代码就能解决问题。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>对于这种通用业务的问题第一个想到的解决方法就是利用AOP：拦截所有带有事务回滚注解(<code>@Transactional</code>)的方法，通过某种方式获取到该方法内部所有要执行的发送MQ的调用代码，让它们在事务方法执行成功后在执行。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p><code>TransactionMessageAspect</code>继承<code>TransactionSynchronizationAdapter</code>,实现对所有带有<code>@Transactional</code>注解方法的拦截：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionMessageAspect</span> <span class="keyword">extends</span> <span class="title">TransactionSynchronizationAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TransactionInterceptorHandler transactionInterceptorHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入口：拦截带有 <span class="doctag">@Transactional</span>的方法,标记当前方法已进入事务模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(org.springframework.transaction.annotation.Transactional)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerTransactionSyncrhonization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TransactionSynchronizationManager.registerSynchronization(<span class="keyword">this</span>);</span><br><span class="line">        transactionInterceptorHandler.signInTransaction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeCommit</span><span class="params">(<span class="keyword">boolean</span> readOnly)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before commit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在事务结束并且没被回滚时再依次执行Callable方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (status != STATUS_ROLLED_BACK &amp;&amp; !CollectionUtils.isEmpty(transactionInterceptorHandler.getActions())) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Callable action : transactionInterceptorHandler.getActions()) &#123;</span><br><span class="line">                    action.call();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            transactionInterceptorHandler.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCommit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">suspend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;suspend&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resume&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;flush&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeCompletion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;beforeCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TransactionInterceptorHandler</code>:使用<code>ThreadLocal</code>对当前线程中要执行的发送MQ方法进行缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionInterceptorHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Entity&gt; cache = ThreadLocal.withInitial(() -&gt; <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cache.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entity e = cache.get();</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e.getInTransaction() != <span class="keyword">null</span> &amp;&amp; e.getInTransaction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Callable&gt; <span class="title">getActions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entity e = cache.get();</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e.getActions();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signInTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entity e= cache.get();</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">            e = <span class="keyword">new</span> Entity();</span><br><span class="line">            e.setInTransaction(<span class="keyword">true</span>);</span><br><span class="line">            e.setActions(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        cache.set(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAction</span><span class="params">(Callable action)</span> </span>&#123;</span><br><span class="line">        Entity e = cache.get();</span><br><span class="line">        e.getActions().add(action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Entity</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Callable&gt; actions;</span><br><span class="line">        <span class="keyword">private</span> Boolean inTransaction;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MqMessage: 发送MQ消息的封装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqMessage</span> <span class="keyword">implements</span> <span class="title">BaseMessage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TransactionInterceptorHandler transactionInterceptorHandler;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span> + LocalDateTime.now() + <span class="string">&quot;] sendMsg :&quot;</span> + JSON.toJSONString(message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其更改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqMessage</span> <span class="keyword">implements</span> <span class="title">BaseMessage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TransactionInterceptorHandler transactionInterceptorHandler;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (transactionInterceptorHandler.hasTransaction()) &#123;</span><br><span class="line">            Callable&lt;Object&gt; callable = () -&gt; doSendMessage(message);</span><br><span class="line">            transactionInterceptorHandler.addAction(callable);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            doSendMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">doSendMessage</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span> + LocalDateTime.now() + <span class="string">&quot;] sendMsg :&quot;</span> + JSON.toJSONString(message));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><ol><li><code>TransactionMessageAspect</code>会拦截带有<code>@Transactional</code>注解的方法，使用<code>TransactionInterceptorHandler.signInTransaction()</code>标记当前方法已进入事务模式;</li><li>如果在执行事务方法的过程中，有调用<code>MqMessage.sendMessage()</code>方法进行传递，会先将要发送的消息逻辑封装到<code>Callable</code>中，并通过<code>TransactionInterceptorHandler.addAction</code>保存在本地线程中；</li><li>当事务提交成功并没有回滚后再通过<code>TransactionMessageAspect.afterCompletion()</code>方法执行保存在本地线程中要发送MQ的调用方法；</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://stackoverflow.com/questions/23651464/spring-hibernate-how-to-call-some-method-after-transaction-commit-or-transacti/23653651">Spring hibernate , how to call some method after transaction commit or transaction rollback</a></li><li><a href="https://stackoverflow.com/questions/15026142/creating-a-post-commit-when-using-transaction-in-spring">Creating a post commit when using transaction in Spring</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Aop </tag>
            
            <tag> ThreadLocal </tag>
            
            <tag> Transactional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wakatime手动同步本地离线数据至服务器</title>
      <link href="2019/10/wakatime%E6%89%8B%E5%8A%A8%E5%90%8C%E6%AD%A5%E6%9C%AC%E5%9C%B0%E7%A6%BB%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
      <url>2019/10/wakatime%E6%89%8B%E5%8A%A8%E5%90%8C%E6%AD%A5%E6%9C%AC%E5%9C%B0%E7%A6%BB%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<ol><li>控制台执行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install --upgrade wakatime</span><br></pre></td></tr></table></figure><span id="more"></span><ol start="2"><li>同步本地的9999条heartbeat数据至服务器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wakatime --sync-offline-activity 9999</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://github.com/wakatime/wakatime/issues/157">How can i force sync all my coding activity?</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WakaTime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh快捷登录并执行命令</title>
      <link href="2019/09/ssh%E5%BF%AB%E6%8D%B7%E7%99%BB%E5%BD%95%E5%B9%B6%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4.html"/>
      <url>2019/09/ssh%E5%BF%AB%E6%8D%B7%E7%99%BB%E5%BD%95%E5%B9%B6%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>公司有很多测试服务器，经常需要登录这些服务器测试来查看服务日志。由于这些测试服务器只能通过账号+密码的方式登录，Windows下可以通过Xshell实现自动登录，但在MacOS中并没有发现比较好的工具，<br>在终端通过SSH方式登录时每次都需要输入密码，十分麻烦，经过一番搜索，最终实现了使用<code>expect</code>在终端直接ssh自动登录,并在登录成功后执行指定脚本。</p></blockquote><span id="more"></span><h1 id="安装expect"><a href="#安装expect" class="headerlink" title="安装expect"></a>安装expect</h1><h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS:"></a>MacOS:</h2><p>直接通过<a href="https://brew.sh/index_zh-cn">Homebrew</a>来安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install expect</span><br></pre></td></tr></table></figure><h2 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h2><p>请自行搜索</p><h1 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h1><p>在<code>/usr/local/bin</code>目录下新建脚本<code>auth_ssh.sh</code>和<code>do_ssh.sh</code>：</p><h2 id="auto-ssh-sh"><a href="#auto-ssh-sh" class="headerlink" title="auto_ssh.sh"></a>auto_ssh.sh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">host=<span class="variable">$1</span></span><br><span class="line">port=<span class="variable">$2</span></span><br><span class="line">user=<span class="variable">$3</span></span><br><span class="line">pswd=<span class="variable">$4</span></span><br><span class="line">cmd=<span class="variable">$5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    cmd = <span class="string">&quot;cd ~/&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">do_ssh.sh <span class="variable">$host</span> <span class="variable">$port</span> <span class="variable">$user</span> <span class="variable">$pswd</span> <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="do-ssh-sh"><a href="#do-ssh-sh" class="headerlink" title="do_ssh.sh"></a>do_ssh.sh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> timeout 30</span><br><span class="line"><span class="built_in">set</span> host [lindex <span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> port [lindex <span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> user [lindex <span class="variable">$argv</span> 2]</span><br><span class="line"><span class="built_in">set</span> pswd [lindex <span class="variable">$argv</span> 3]</span><br><span class="line"><span class="built_in">set</span> cmd [lindex <span class="variable">$argv</span> 4]</span><br><span class="line"></span><br><span class="line">spawn ssh -p <span class="variable">$port</span> <span class="variable">$user</span>@<span class="variable">$host</span></span><br><span class="line">expect &#123;</span><br><span class="line">        <span class="string">&quot;(yes/no)?&quot;</span></span><br><span class="line">        &#123;send <span class="string">&quot;yes\n&quot;</span>;exp_continue&#125;</span><br><span class="line">        <span class="string">&quot;password:&quot;</span></span><br><span class="line">        &#123;send <span class="string">&quot;<span class="variable">$pswd</span>\n&quot;</span>&#125;</span><br><span class="line">        <span class="string">&quot;Password:&quot;</span></span><br><span class="line">        &#123;send <span class="string">&quot;<span class="variable">$pswd</span>\n&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">expect  &#123;</span><br><span class="line">    <span class="string">&quot;login&quot;</span></span><br><span class="line">    &#123;send <span class="string">&quot;<span class="variable">$cmd</span>\n&quot;</span>&#125;</span><br><span class="line">&#125; </span><br><span class="line">interact</span><br></pre></td></tr></table></figure><p>注意：第20行的<code>login</code>表示期待登录成功后的输出会包含字符串<code>login</code>，请根据实际情况做修改</p><p>之后在终端执行命令 <code>auto_ssh &lt;host&gt; &lt;port&gt; &lt;user&gt; &lt;pswd&gt; &quot;&lt;cmd&gt;&quot;</code>即可。</p><h1 id="为登录命令配置别名"><a href="#为登录命令配置别名" class="headerlink" title="为登录命令配置别名"></a>为登录命令配置别名</h1><p>在<code>~/.bash_profile</code>添加命令别名,例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ss76=<span class="string">&quot;auto_ssh.sh 192.168.12.76 22 root abcd \&quot;cd /home/tomcat/\&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>之后在终端<code>ss76</code>即可自动登录到<code>192.168.12.76</code>并切换到<code>/home/tomcat/</code>目录中</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://adolphor.com/blog/2017/06/26/iterm2-expect-auto-ssh-login.html">iterm2 配合 expect 实现 SSH 自动登陆</a></li><li><a href="http://zyy1217.com/2017/07/02/linux%20expect%E8%AF%A6%E8%A7%A3/">linux expect详解(ssh自动登录，部署)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac中在升级ruby版本后colorls命令报错的解决办法</title>
      <link href="2019/09/mac%E4%B8%AD%E5%9C%A8%E5%8D%87%E7%BA%A7ruby%E7%89%88%E6%9C%AC%E5%90%8Ecolorls%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html"/>
      <url>2019/09/mac%E4%B8%AD%E5%9C%A8%E5%8D%87%E7%BA%A7ruby%E7%89%88%E6%9C%AC%E5%90%8Ecolorls%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>为了在mac中使用tmuxinator，按照网上的教程使用rvm升级了系统的ruby版本，ruby升级完成后却发现执行colorls相关命令时，报了如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/dependency.rb:319:<span class="keyword">in</span> `to_specs<span class="string">&#x27;: Could not find &#x27;</span>clocale<span class="string">&#x27; (&gt;= 0) among 20 total gem(s) (Gem::LoadError)</span></span><br><span class="line"><span class="string">Checked in &#x27;</span>GEM_PATH=/Users/em/.gem/ruby/2.3.0:/Library/Ruby/Gems/2.3.0:/System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/gems/2.3.0<span class="string">&#x27;, execute `gem env` for more information</span></span><br><span class="line"><span class="string">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/specification.rb:1442:in `block in activate_dependencies&#x27;</span></span><br><span class="line">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/specification.rb:1431:<span class="keyword">in</span> `each<span class="string">&#x27;</span></span><br><span class="line"><span class="string">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/specification.rb:1431:in `activate_dependencies&#x27;</span></span><br><span class="line">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/specification.rb:1413:<span class="keyword">in</span> `activate<span class="string">&#x27;</span></span><br><span class="line"><span class="string">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems.rb:196:in `rescue in try_activate&#x27;</span></span><br><span class="line">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems.rb:193:<span class="keyword">in</span> `try_activate<span class="string">&#x27;</span></span><br><span class="line"><span class="string">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:125:in `rescue in require&#x27;</span></span><br><span class="line">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:39:<span class="keyword">in</span> `require<span class="string">&#x27;</span></span><br><span class="line"><span class="string">from /Library/Ruby/Gems/2.3.0/gems/colorls-1.1.1/exe/colorls:3:in `&lt;top (required)&gt;&#x27;</span></span><br><span class="line">from /usr/<span class="built_in">local</span>/bin/colorls:22:<span class="keyword">in</span> `load<span class="string">&#x27;</span></span><br><span class="line"><span class="string">from /usr/local/bin/colorls:22:in `&lt;main&gt;&#x27;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在终端执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br><span class="line">brew install rbenv</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;/usr/local/opt/openssl/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export LDFLAGS=&quot;-L/usr/local/opt/openssl/lib&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export CPPFLAGS=&quot;-I/usr/local/opt/openssl/include&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PKG_CONFIG_PATH=&quot;/usr/local/opt/openssl/lib/pkgconfig&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">sudo gem pristine --all <span class="comment">#that produced a permissions error, but i don&#x27;t care everything worked</span></span><br><span class="line">sudo gem install colorls</span><br></pre></td></tr></table></figure><p>如果执行<code>xcode-select --install</code>时提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select: error: <span class="built_in">command</span> line tools are already installed, use <span class="string">&quot;Software Update&quot;</span> to install updates</span><br></pre></td></tr></table></figure><p>可以忽略。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://github.com/avdv/clocale/issues/22">https://github.com/avdv/clocale/issues/22</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> colorls </tag>
            
            <tag> gem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底搞懂字符串比较问题和String.intern()方法的作用</title>
      <link href="2019/01/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E9%97%AE%E9%A2%98%E5%92%8Cstring-intern-%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%9C%E7%94%A8.html"/>
      <url>2019/01/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E9%97%AE%E9%A2%98%E5%92%8Cstring-intern-%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%9C%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>网上看面试题时经常看到各种字符串比较的问题，有时看着答案也不知道为什么。于是今天花了一点时间对此做了一下深入的学习，在此记录一下。</p></blockquote><span id="more"></span><h2 id="创建字符串时需要注意的规则"><a href="#创建字符串时需要注意的规则" class="headerlink" title="创建字符串时需要注意的规则"></a>创建字符串时需要注意的规则</h2><p>这里列的规则是我结合JDK里的文档和《<a href="https://www.cnblogs.com/Kidezyq/p/8040338.html">Java-String.intern的深入研究</a>》、《<a href="https://blog.csdn.net/soonfly/article/details/70147205">几张图轻松理解String.intern()</a>》这两篇文章，对于理解下面的实例中我认为比较关键的几点，可能有些理解不正确。</p><p>1、通过<code>new String(String original)</code>会有涉及到两个对象。<br>例如 <code>String str = new String(&quot;a&quot;)</code>语句,会先将构造函数里的参数<code>original</code>指向在字符串常量池(简称SCP),如果常量池中不存在，则会在常量池中生成字符串<strong>a</strong>，再在堆(HEAP)中生成变量<code>str</code>;</p><p>2、如果一个字符串<code>str</code>是由多个常量字符串通过**+**拼接的，则字符串<code>str</code>会直接生成或指向在字符串常量池中。</p><p>情况一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br></pre></td></tr></table></figure><p>情况二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">String str = <span class="string">&quot;a&quot;</span> + b;</span><br></pre></td></tr></table></figure><p>情况三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">String str = <span class="string">&quot;a&quot;</span> + b;</span><br></pre></td></tr></table></figure><p>在上面的三种情况中，第一种和第三种情况的<code>str</code>都是由常量字符串直接拼接的，所以<code>str</code>会直接指向字符串常量池；而情况二中由于存在局部变量<code>b</code>,编译器将会通过<code>StringBuilder.append()</code>方法拼接字符串<code>a</code>和变量<code>b</code>后，最终再通过<code>StringBuilder.toString()</code>方法得到<code>str</code>，<code>str</code>会在堆中生成。</p><p>3、JDK 1.7后，在执行 <code>String.intern()</code>方法时，虚拟机会去字符串常量池检查是否已存在该字符串，如果存在则会直接引用常量池中该字符串的地址作为返回结果的引用地址；如果不存在，则会在常量池中生成一个对在原字符串(位于堆中)的引用作为，而不是像 JDK 1.6之前仍将原字符串拷贝到常量池中。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP</span></span><br><span class="line">    String i = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>; <span class="comment">//SCP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP</span></span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>String c = &quot;ab&quot;</code>将直接在字符串常量池生成字符串<strong>ab</strong>；由于<code>i</code>是由两个字符串常量<strong>a</strong>和<strong>b</strong>直接拼接而成，所以<code>i</code>也会指向字符串常量池；由于<code>i.intern()</code>得到的字符串在常量池中已存在，所以<code>j</code>也指向常量池。因此<code>c</code>、<code>i</code>、<code>j</code>指向的同一个地址。因此输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP</span></span><br><span class="line">    String i = <span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;b&quot;</span>); <span class="comment">//HEAP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP</span></span><br><span class="line">    System.out.println(c == i);</span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>String i = new String(&quot;a&quot;) + new String(&quot;b&quot;);</code>语句会在字符串常量池中生成两个字符串<strong>a</strong>和<strong>b</strong>,在堆中生成3个对象：两个是由<code>new String()</code>生成的，另外一个是<code>i</code>。结合<a href="#%E5%AE%9E%E4%BE%8B1">实例1</a>的说明，可知：<code>c</code>和<code>j</code>指向字符串常量池中指向地址，而<code>i</code>指向堆中。因此输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP</span></span><br><span class="line">    String i = <span class="keyword">new</span> String(<span class="string">&quot;ab&quot;</span>); <span class="comment">//HEAP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP</span></span><br><span class="line">    System.out.println(c == i);</span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和<a href="#%E5%AE%9E%E4%BE%8B2">实例2</a>中类似，<code>String i = new String(&quot;ab&quot;);</code>语句中构造函数里的字符串<strong>ab</strong>会直接指向由<code>String c = &quot;ab&quot;;</code>语句在字符串常量池中生成的字符串的地址，在堆中生成一个字符串对象<code>i</code>。所以输出结果和<a href="#%E5%AE%9E%E4%BE%8B2">实例2</a>一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="实例4"><a href="#实例4" class="headerlink" title="实例4"></a>实例4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP</span></span><br><span class="line">    String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    String i = <span class="string">&quot;a&quot;</span> + b; <span class="comment">//HEAP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP</span></span><br><span class="line">    System.out.println(c == i);</span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据本文开头的第2点规则，可知<code>String i = &quot;a&quot; + b;</code>语句中生成的变量<code>i</code>是位于堆中的，而<code>c</code>和<code>j</code>都指向字符串常量池。因此输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="实例5"><a href="#实例5" class="headerlink" title="实例5"></a>实例5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    String i = <span class="string">&quot;a&quot;</span> + b; <span class="comment">//HEAP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP -&gt; HEAP</span></span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP -&gt; HEAP</span></span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与<a href="#%E5%AE%9E%E4%BE%8B4">实例4</a>中不同的是，虽然<code>i</code>是位于堆中，但是在执行<code>String j = i.intern()</code>时，由于字符串常量池中不存在字符串<strong>ab</strong>，根据本文开头的第3点规则，此时并不会直接把字符串<strong>ab</strong>复制在字符串常量池中，而是在常量池中为字符串<strong>ab</strong>生成指向堆中对象<strong>i</strong>的引用，包括之后的语句<code>String c = &quot;ab&quot;;</code>中<code>c</code>指向的也是常量池中指向堆中对象<strong>i</strong>的引用，所有<code>c</code>、<code>i</code>、<code>j</code>指向的实际是同一个地址。因此输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="实例6"><a href="#实例6" class="headerlink" title="实例6"></a>实例6</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String i = <span class="keyword">new</span> String(<span class="string">&quot;ab&quot;</span>); <span class="comment">//HEAP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP</span></span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP</span></span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不仔细思考，可能会认为输出结果应该和<a href="#%E5%AE%9E%E4%BE%8B5">实例5</a>一样，但实际的输出结果却是如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>参考<a href="#%E5%AE%9E%E4%BE%8B3">实例3</a>，想清楚<code>String i = new String(&quot;ab&quot;);</code>是会先在字符串常量池生成字符串<strong>ab</strong>这一点后，就很容易知道和<a href="#%E5%AE%9E%E4%BE%8B5">实例5</a>的区别了。</p><h3 id="实例7"><a href="#实例7" class="headerlink" title="实例7"></a>实例7</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    String i = <span class="string">&quot;a&quot;</span> + b; <span class="comment">//SCP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP</span></span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP</span></span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与<a href="#%E5%AE%9E%E4%BE%8B5">实例5</a>的区别在于对象<code>b</code>是用<code>final</code>修饰的，可以看做局部常量，字符串对象<code>i</code>是由两个字符串常量通过<code>+</code>直接拼接而成，<code>i</code>将指向字符串常量池。因此输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="实例8"><a href="#实例8" class="headerlink" title="实例8"></a>实例8</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">(<span class="keyword">final</span> String b)</span> </span>&#123;</span><br><span class="line">    String i = <span class="string">&quot;a&quot;</span> + b; <span class="comment">//HEAP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP -&gt; HEAP</span></span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP -&gt; HEAP</span></span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    test8(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个实例的结果和<a href="#%E5%AE%9E%E4%BE%8B7">实例7</a>一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>但是含义不同，虽然在方法<code>test8(final String b)</code>中，形参<code>b</code>是用<code>final</code>修饰的，但<code>b</code>的值仍然是外部传来的，所以不能看做字符串常量。因此<code>i</code>是执行堆中的对象，而<code>j</code>和<code>c</code>是因为执行<code>i.intern()</code>之后，间接通过常量池指向了和<code>i</code>同一个地址。<br>调换一下上述方法中语句的位置，也可以验证改实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test8_1</span><span class="params">(<span class="keyword">final</span> String b)</span> </span>&#123;</span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP</span></span><br><span class="line">    String i = <span class="string">&quot;a&quot;</span> + b; <span class="comment">//HEAP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP</span></span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    test8_1(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>String c = &quot;ab&quot;; </code>语句提至方法内第一行后，在执行<code>i.intern()</code>时，由于常量池中已存在字符串<strong>ab</strong>，因此<code>j</code>将直接指向常量池中字符串<strong>ab</strong>的地址，而<code>i</code>是位于堆中的对象，所以输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="实例9"><a href="#实例9" class="headerlink" title="实例9"></a>实例9</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    String i = <span class="string">&quot;a&quot;</span> + b; <span class="comment">//HEAP_1</span></span><br><span class="line">    String l = <span class="string">&quot;a&quot;</span> + b; <span class="comment">//HEAP_2</span></span><br><span class="line">    String j = l.intern();  <span class="comment">//SCP -&gt; HEAP_2</span></span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;     <span class="comment">//SCP -&gt; HEAP_2</span></span><br><span class="line">    System.out.println(i.equals(j));</span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(l == j);</span><br><span class="line">    System.out.println(l == c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合前面的例子可知，<code>i</code>和<code>j</code>是位于堆中两个独立的对象。由于有<code>l.intern()</code>操作，<code>j</code>、<code>c</code>和<code>l</code>最终都指向了同一个地址。因此输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.cnblogs.com/Kidezyq/p/8040338.html">https://www.cnblogs.com/Kidezyq/p/8040338.html</a></li><li><a href="https://blog.csdn.net/soonfly/article/details/70147205">https://blog.csdn.net/soonfly/article/details/70147205</a></li><li><a href="https://www.geeksforgeeks.org/interning-of-string/">https://www.geeksforgeeks.org/interning-of-string/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用正则表达式解析Nginx默认日志</title>
      <link href="2019/01/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90nginx%E9%BB%98%E8%AE%A4%E6%97%A5%E5%BF%97.html"/>
      <url>2019/01/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90nginx%E9%BB%98%E8%AE%A4%E6%97%A5%E5%BF%97.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>想通过 Nginx 的 access.log 分析网站的访问情况，但是直接通过日志文件看不太直观，于是想通过代码把日志文件解析并保存数据库中，这样分析起来更方便。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>参考 <a href="https://blog.csdn.net/thlzjfefe/article/details/83349548">nginx日志解析：java正则解析</a> 这篇文章，通过使用正则表达式把日志文件中的各个参数解析出来即可。</p><p>比如，我的服务器上 Nginx 记录的日志格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">203.208.60.89 - - [04/Jan/2019:16:06:38 +0800] <span class="string">&quot;GET /atom.xml HTTP/1.1&quot;</span> 200 273932 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot;</span></span><br></pre></td></tr></table></figure><p>对应的 Java 正则表达式就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;ip&gt;\d+\.\d+\.\d+\.\d+)( - - \[)(?&lt;datetime&gt;[\s\S]+)(?&lt;t1&gt;\][\s<span class="string">&quot;]+)(?&lt;request&gt;[A-Z]+) (?&lt;url&gt;[\S]*) (?&lt;protocol&gt;[\S]+)[&quot;</span>] (?&lt;code&gt;\d+) (?&lt;sendbytes&gt;\d+) [<span class="string">&quot;](?&lt;refferer&gt;[\S]*)[&quot;</span>] [<span class="string">&quot;](?&lt;useragent&gt;[\S\s]+)[&quot;</span>]</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><h3 id="LogEntity类用于保存解析后的日志信息"><a href="#LogEntity类用于保存解析后的日志信息" class="headerlink" title="LogEntity类用于保存解析后的日志信息"></a><code>LogEntity</code>类用于保存解析后的日志信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:wf2311@163.com&quot;&gt;wf2311&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-01-25 19:37.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table</span></span><br><span class="line"><span class="meta">@Entity(name = &quot;log&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端IP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime time;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求方式 GET/POST/PUT 等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String request;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问的url地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * http协议</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String protocol;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求结果响应码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求访问的字节数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sendByteSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问者访问渠道来源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String refferer;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问者的用户代理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String useAgent;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问者是不是爬虫或机器人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isBot;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问的是不是静态资源文件，例如：css、js、图片等文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isResource;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前项目名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String project;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NginxLogConverter类实现解析的具体逻辑"><a href="#NginxLogConverter类实现解析的具体逻辑" class="headerlink" title="NginxLogConverter类实现解析的具体逻辑"></a><code>NginxLogConverter</code>类实现解析的具体逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:wf2311@163.com&quot;&gt;wf2311&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-01-25 19:35.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NginxLogConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATTERN = <span class="string">&quot;(?&lt;ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+)( - - \\[)(?&lt;datetime&gt;[\\s\\S]+)(?&lt;t1&gt;\\][\\s\&quot;]+)(?&lt;request&gt;[A-Z]+) (?&lt;url&gt;[\\S]*) (?&lt;protocol&gt;[\\S]+)[\&quot;] (?&lt;code&gt;\\d+) (?&lt;sendbytes&gt;\\d+) [\&quot;](?&lt;refferer&gt;[\\S]*)[\&quot;] [\&quot;](?&lt;useragent&gt;[\\S\\s]+)[\&quot;]&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析转换逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text    单条的日志记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> project 项目名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解析成功则返回具体的对象，解析失败返回&lt;code&gt;null&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LogEntity <span class="title">parse</span><span class="params">(String text, String project)</span> </span>&#123;</span><br><span class="line">        Pattern r = Pattern.compile(PATTERN);</span><br><span class="line">        Matcher m = r.matcher(text);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            LogEntity log = <span class="keyword">new</span> LogEntity();</span><br><span class="line">            log.setIp(m.group(<span class="string">&quot;ip&quot;</span>));</span><br><span class="line">            log.setProject(project);</span><br><span class="line">            String datetime = m.group(<span class="string">&quot;datetime&quot;</span>);</span><br><span class="line">            log.setTime(convertTime(datetime));</span><br><span class="line">            log.setRequest(m.group(<span class="string">&quot;request&quot;</span>));</span><br><span class="line">            log.setUrl(m.group(<span class="string">&quot;url&quot;</span>));</span><br><span class="line">            log.setProtocol(m.group(<span class="string">&quot;protocol&quot;</span>));</span><br><span class="line">            log.setCode(Integer.valueOf(m.group(<span class="string">&quot;code&quot;</span>)));</span><br><span class="line">            log.setSendByteSize(Integer.valueOf(m.group(<span class="string">&quot;sendbytes&quot;</span>)));</span><br><span class="line">            log.setRefferer(m.group(<span class="string">&quot;refferer&quot;</span>));</span><br><span class="line">            log.setUseAgent(m.group(<span class="string">&quot;useragent&quot;</span>));</span><br><span class="line">            log.setBot(isBot(log.getUseAgent()));</span><br><span class="line">            log.setResource(isResource(log.getUrl()));</span><br><span class="line">            <span class="keyword">return</span> log;</span><br><span class="line">        &#125;</span><br><span class="line">        log.error(String.format(<span class="string">&quot;%s 格式化错误&quot;</span>, text));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提取转换时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 格式化的时间文本：26/Jan/2019:06:51:27 +0800]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> LocalDateTime 时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> LocalDateTime <span class="title">convertTime</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String t = s.substring(<span class="number">0</span>, s.indexOf(<span class="string">&quot; &quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.parse(t, DateTimeFormatter.ofPattern(<span class="string">&quot;dd/MMM/yyyy:HH:mm:ss&quot;</span>, Locale.ENGLISH));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 userAgent 字段判断是不是爬虫或机器人的访问记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userAgent 访问者的用户代理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否是爬虫或机器人的访问记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBot</span><span class="params">(String userAgent)</span> </span>&#123;</span><br><span class="line">        String t = userAgent.toLowerCase();</span><br><span class="line">        <span class="keyword">return</span> t.contains(<span class="string">&quot;bot&quot;</span>) || t.contains(<span class="string">&quot;spider&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 url 字段判断访问的是不是静态资源文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 访问的url路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 访问的是否是静态资源文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isResource</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        String t = url.toLowerCase();</span><br><span class="line">        <span class="keyword">return</span> t.contains(<span class="string">&quot;.js&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.css&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.png&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.ico&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.gif&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.woff&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.eot&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Path path = Paths.get(<span class="string">&quot;/xx/xxx/access.log&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;String&gt; logs = Files.readAllLines(path);</span><br><span class="line">        List&lt;LogEntity&gt; list = logs.stream().map(s -&gt; parse(s, <span class="string">&quot;$&#123;projectName&#125;&quot;</span>)).collect(Collectors.toList());</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://blog.csdn.net/thlzjfefe/article/details/83349548">nginx日志解析：java正则解析</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java虚拟机结构(二):内存结构概述</title>
      <link href="2019/01/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%93%E6%9E%84-%E4%BA%8C-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B0.html"/>
      <url>2019/01/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%93%E6%9E%84-%E4%BA%8C-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B0.html</url>
      
        <content type="html"><![CDATA[<h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><p>Java 虚拟机在会将它所管理的内存划分成若干个不同的区域，作用各不相同。</p><h3 id="线程私有区"><a href="#线程私有区" class="headerlink" title="线程私有区"></a>线程私有区</h3><h4 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h4><p>PC 寄存器是一块较小的内存区域，属于线程私有。PC 寄存器用于保存当前线程中正在执行的字节码指令的地址：对于非原生方法，指向的是字节码指令的地址;对于原生方法，保存的是 undefined。</p><h4 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h4><p>Java 虚拟机栈也是属于线程私有，随线程同时创建，用于存储栈帧(Frame)。其内存既可以设置成固定大小，也可以根据计算动态扩展和收缩；使用的内存不需要保证是连续的。</p><p>Java 虚拟机栈可能会抛出以下异常：</p><ul><li><code>StackOverflowError</code>:线程请求分配的栈容量超过栈允许的最大值;</li><li><code>OutOfMemoryError</code>: 栈尝试扩展但无法申请到足够的内存或者创建新的线程时没有足够的内存；</li></ul><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>本地方法栈与 Java 虚拟机栈的作用类似，主要用于支持 native 。如果虚拟机支持本地方法栈，在线程创建时按线程分配。</p><p>同 Java 虚拟机栈一样，本地方法栈有可能会抛出下异常：</p><ul><li><code>StackOverflowError</code>:线程请求分配的栈容量超过栈允许的最大值;</li><li><code>OutOfMemoryError</code>: 栈尝试扩展但无法申请到足够的内存或者创建新的线程时没有足够的内存；</li></ul><p><strong>HotSpot 虚拟机直接把本地方法栈和 Java 虚拟机栈合二为一。</strong></p><h4 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h4><p>栈帧是用来存储数据和部分过程结果的数据结构，<br>同时也用来处理动态链接、方法返回和异常分发。栈帧在线程内随着方法调用而创建、方法结束(包含抛出异常)而销毁。其存储空间由创建它的线程在虚拟机栈中分配。</p><p>每个栈帧都有自己的本地变量表、操作数栈和指向当前方法所属类的运行时常量池的引用，本地变量表和操作数栈的容量在编译期确定。</p><h4 id="本地变量表"><a href="#本地变量表" class="headerlink" title="本地变量表"></a>本地变量表</h4><p>本地变量表用于保存局部变量，位于栈帧中，长度由编译期决定。</p><p>在本地变量表中保存 boolean、byte、char、short、int、float、reference或returnAddress 类型的数据需一个局部变量；保存 long、double 类型的数据需两个连续的局部变量。在本地变量表中的变量使用索引来定位访问，第一个变量的索引为0；在实例方法中，本地变量表中索引为0的位置存储的是该实例方法所在对象的引用(this)。</p><h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><p>操作数栈是一个后进先出的栈，位于栈帧中，最大深度由编译期决定。</p><p>在任意时刻，操作数栈都有一个确定的深度，long、double类型会占用两个单位的深度，其他数据类型只占一个单位的深度。</p><h4 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h4><p>动态链接可以理解为栈帧内部指向当前方法所在类型的运行时常量池的引用。</p><h3 id="线程共享区"><a href="#线程共享区" class="headerlink" title="线程共享区"></a>线程共享区</h3><h4 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h4><p>Java 堆是供所有类实例和数组对象分配内存的共享区域。它在虚拟机启动时被创建，存储被自动内存管理系统(垃圾收集器)所管理的各种对象。Java 堆的容量既可以设置成固定大小，也可以根据计算动态扩展和收缩；使用的内存不需要保证是连续的。</p><p>当实际所需的堆超出了自动内存管理系统能提供的最大值，会抛出<code>OutOfMemoryError</code>异常。</p><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>方法区存储了每一个类的结构信息：运行时常量池、字段和方法数据、构造函数和普通方法的字节码内容；还包含一些在类、实例、接口初始化时用到的特殊方法。方法区是堆的逻辑组成部分，但虚拟机可以在这个区域不实现垃圾回收和压缩。方法区的容量既可以设置成固定大小，也可以根据计算动态扩展和收缩；使用的内存不需要保证是连续的。</p><p>当方法区的内存不能满足内存分配请求，会抛出<code>OutOfMemoryError</code>异常。</p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>运行时常量池是class文件中每一个类或接口的常量池表的运行时表现形式。在方法区中分配，在加载类或接口到虚拟机后会被创建。</p><p>当创建接口或类构造运行时常量池所需的内存超过了方法区所能提供的最大值时，会抛出<code>OutOfMemoryError</code>异常。</p><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存并不是虚拟机运行时数据区的一部分，也不是 Java 虚拟机规范字定义的内存区域。<br>在 JDK 1.4中新加入的 NIO 引入了一种基于通道(Channel)与缓冲区(Buffer)的 I/O 方式，它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在 Java 堆 和 Native 堆中来回复制数据。</p><p>当动态扩展直接内存的大小导致各个内存区域总和大于本机的物理内存限制时，会抛出<code>OutOfMemoryError</code>异常。</p><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><div class="post-svg-container">    <object type="image/svg+xml" data="https://file.wf2311.com/2019/01/23/Java虚拟机内存结构.svg"></object></div>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
          <category> 从零学习JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java虚拟机结构(一):数据类型</title>
      <link href="2019/01/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%93%E6%9E%84-%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"/>
      <url>2019/01/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%93%E6%9E%84-%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文的内容实际上是对《Java虚拟机规范(Java SE 8版)》第2.2章节的一个笔记概述。</p></blockquote><p>在学习 JVM 之前，我们首先对虚拟机中的数据类型做一个基本的认识。与 Java 程序语言中的数据结构类似，Java 虚拟机可以操作的数据类型可分为两类：<strong>原始类型</strong>和<strong>引用类型</strong>，与之对应也存在<strong>原始值</strong>和<strong>引用值</strong>两种类型的数值，他们可以用于变量赋值、参数传递、方法返回和运算操作。</p><span id="more"></span><h2 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h2><p>Java 虚拟机所支持的原始数据类型包括<strong>数值类型</strong>、boolean 类型和 returnAddress 类型三类。</p><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>数值类型又分为<strong>整数类型</strong>和<strong>浮点数类型</strong>，具体如下表所示：</p><table><tr><td colspan=2 >数值类型</td><td>位数</td><td>默认值</td><td>取值范围</td></tr><tr><td rowspan=5 >整数类型</td><td>byte</td><td>8位有符号</td><td>0</td><td>[-2^7,2^7-1]</td></tr><tr><td>short</td><td>16位有符号</td><td>0</td><td>[-2^15,2^15-1]</td></tr><tr><td>int</td><td>32位有符号</td><td>0</td><td>[-2^31,2^31-1]</td></tr><tr><td>long</td><td>64位有符号</td><td>0</td><td>[-2^63,2^63-1]</td></tr><tr><td>char</td><td>16位无符号</td><td>\u0000</td><td>[0,2^16-1]</td></tr><tr><td rowspan=2 >浮点数类型</td><td>float</td><td>32位单精度浮点数</td><td>正数0</td><td>-</td></tr><tr><td>double</td><td>64位双精度浮点数</td><td>正数0</td><td>-</td></tr></table><h3 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h3><p>Java 虚拟机没有提供 boolean 值专用的字节码指令，Java 语言表达式所操作的 boolean 值，在编译后都使用虚拟机中的 int 数据类型代替。另外，boolean 类型数组在虚拟机中会被编码成 byte 类型数值，每个 boolean 元素占8位。</p><h3 id="returnAddress类型"><a href="#returnAddress类型" class="headerlink" title="returnAddress类型"></a>returnAddress类型</h3><p>returnAddress 类型的值指向一条虚拟机指令的操作码。与数值类型相比，returnAddress 类型在 Java 语言中并不存在对应的类型，而且也无法再程序运行期间更改。</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>Java 虚拟机中有三种引用类型：类类型、数组类型、接口类型。这些引用类型的值分别指向动态创建的类实例、数组实例和实现了某个接口的类实例或数组实例。</p><p>除三种引用类型外，在引用类型的值中还有一个特殊的值—— <code>null</code>,它是所有引用类型的默认值。</p><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><p>一个多维数组类型可以看做是由两维的数据构成：在外维的称为组件类型，在里维的称为元素类型。</p><p>组件类型也可以是数组类型，例如 <code>int[][][]</code>的组件类型可以看做是<code>int[][]</code>；而元素类型必须是原生类型、类类型或接口类型之一。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>《Java虚拟机规范(Java SE 8版)》 第2.2章节</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
          <category> 从零学习JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅地在Hexo博客中嵌入SVG文件</title>
      <link href="2019/01/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%B5%8C%E5%85%A5svg%E6%96%87%E4%BB%B6.html"/>
      <url>2019/01/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%B5%8C%E5%85%A5svg%E6%96%87%E4%BB%B6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天遇到一个问题：想在自己的Hexo博客中展示SVG格式的思维导图，本文简单的记录一下如何解决这个问题。</p></blockquote><span id="more"></span><h2 id="在Markdown文件中嵌入SVG"><a href="#在Markdown文件中嵌入SVG" class="headerlink" title="在Markdown文件中嵌入SVG"></a>在Markdown文件中嵌入SVG</h2><p>我们知道在 MarkDown 文件中可以直接使用 HTML 元素，所以可以直接使用写 HTML 结构的形式应该就可以实现，下面说说我尝试过的三种方案：</p><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>最开始想到的是用 iframe 的形式，在正文中加入如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">src</span>=<span class="string">&quot;xxx.svg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://file.wf2311.com/images/20190116210140.png" alt="iframe展示SVG"><br>效果显然不行，放弃此种方案。</p><h3 id="img"><a href="#img" class="headerlink" title="img"></a>img</h3><p>接着尝试了使用 img 元素的方法，代码如下：</p><p>展示结果如下：<br><img src="https://file.wf2311.com/images/20190116215335.png" alt="img展示SVG"></p><p>这种方法的展示效果虽然比使用 iframe 要好，但是 svg 的内容还是收到了父元素宽度的限制，并且里面的文本无法被复制。此方案也不太理想。</p><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>最终在网上搜到了这篇文章 <a href="https://vecta.io/blog/best-way-to-embed-svg/">The Best Way to Embed SVG on HTML (2019)</a> ,里面介绍了多种在 HTML 页面中嵌入 SVG 的方式，我尝试了里面说到的第二种，可以达到按照原始大小显示 SVG 中内容的效果。<br>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">&quot;image/svg+xml&quot;</span> <span class="attr">data</span>=<span class="string">&quot;xxx.svg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面效果：<br><img src="https://file.wf2311.com/images/20190116215609.png" alt="object展示SVG"></p><p>可以看出 SVG 中的内容虽然是按照原始比例显示的，但是可能会超出父元素的宽度。<br>接下来就要解决第二个问题：在子元素宽度超出父元素后，如何让子元素在父元素内滑动，而不是溢出父元素。</p><h2 id="子元素比父元素宽的布局显示问题"><a href="#子元素比父元素宽的布局显示问题" class="headerlink" title="子元素比父元素宽的布局显示问题"></a>子元素比父元素宽的布局显示问题</h2><p>由于不是专业前端，此问题描述清楚后，通过搜索引擎就可以很轻松的找到答案，在此只是记录一下：<br>对上一节中的 <code>object</code>节点 外面定义一个父元素，样式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-svg-container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">overflow-x</span>: auto;</span><br><span class="line">  <span class="attribute">overflow-y</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>object</code>节点定义如下样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-svg-container</span> &gt; <span class="selector-tag">object</span>&#123;</span><br><span class="line">      <span class="attribute">justify-content</span>: center;</span><br><span class="line">      <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure><p>在 MarkDown 中这样引入 SVG 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-svg-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">&quot;image/svg+xml&quot;</span> <span class="attr">data</span>=<span class="string">&quot;xxx.svg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>即可达到最终想要的效果:<br><img src="https://file.wf2311.com/images/20190116215757.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://vecta.io/blog/best-way-to-embed-svg/">https://vecta.io/blog/best-way-to-embed-svg</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Hexo </tag>
            
            <tag> SVG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WakaTime数据同步展示工具</title>
      <link href="2019/01/wakatime%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%B1%95%E7%A4%BA%E5%B7%A5%E5%85%B7.html"/>
      <url>2019/01/wakatime%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%B1%95%E7%A4%BA%E5%B7%A5%E5%85%B7.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>从16年知道 WakaTime 后就开始使用它来记录自己的编码时间，但作为免费版只能查看最近两周的数据，于是很久之前就写了一个程序同步自己的历史数据，不过一直没找到合适的图表插件像官网那样展示数据信息。前些日子咨询了一下同事，得知了用 antv 可以绘制对应的图表数据，刚好现在也处于失业阶段，就花了几天时间又重新做了一个项目用于同步和展示 WakaTime 数据。</p></blockquote><span id="more"></span><h2 id="WakaTime"><a href="#WakaTime" class="headerlink" title="WakaTime"></a>WakaTime</h2><h3 id="WakaTime简介"><a href="#WakaTime简介" class="headerlink" title="WakaTime简介"></a>WakaTime简介</h3><p><a href="https://wakatime.com/">WakaTime</a> 是一款可以记录你的编码时间的工具，目前支持绝大部分主流的 IDE 以及 Chrome 浏览器。</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><a href="https://wakatime.com/signup">注册</a> WakaTime 账号；</li><li>在<a href="https://wakatime.com/plugins">官网</a>找到对应的 IDE 插件，按照步骤安装 WakaTime 插件(下图中灰色表示目前官方还不支持):<br><img src="https://file.wf2311.com/images/20190111125101.png" alt="所支持的IDE"></li><li>在<a href="https://wakatime.com/settings/account">个人设置</a>页面复制 Secret API Key ，填入对应的 WakaTime 插件中；<br><img src="https://file.wf2311.com/images/20190111124627.png" alt="复制 Secret API Key"></li><li>过一段时间后，你就可以在 WakaTime 网站上看到你的编码情况，如下图所示：<br><img src="https://file.wf2311.com/images/20190111125255.png"></li></ol><h2 id="wakatime-sync项目"><a href="#wakatime-sync项目" class="headerlink" title="wakatime-sync项目"></a>wakatime-sync项目</h2><h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>  WakaTime 提供了丰富多样的图表可以多维度地查看自己的编码时间情况。不过作为免费用户，最多只能查看自己最近14天的数据；如果要查看全部的数据，需要 $9/月的订阅费用。</p><p>  还好 WakaTime 提供了 <a href="https://wakatime.com/developers">API</a> 接口，通过接口可以获取到编码时间统计情况的原始数据(作为免费用户还是有只能查看最近14天数据的限制)。</p><p>  本项目通过 WakaTime 提供的 API 接口，可以把自己的 WakaTime 数据保存在的数据库中，然后利用图表插件展示出来，目前已完成三种类型的图表展示：</p><ul><li>每日项目持续时间图：<br><img src="https://file.wf2311.com/images/20190115180738.png" alt="每日项目持续时间图"></li><li>时间范围内活动情况：<br><img src="https://file.wf2311.com/images/20190115180838.png" alt="时间范围内活动情况"></li><li>每日编码耗时日历图：<br><img src="https://file.wf2311.com/images/20190115180946.png" alt="每日编码耗时日历图"></li></ul><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><ul><li>GITHUB: <a href="https://github.com/wf2311/wakatime-sync">https://github.com/wf2311/wakatime-sync</a></li><li>码云: <a href="https://gitee.com/wf2311/wakatime-sync">https://gitee.com/wf2311/wakatime-sync</a></li></ul><h3 id="所用技术"><a href="#所用技术" class="headerlink" title="所用技术"></a>所用技术</h3><p>后端：JDK1.8、SpringBoot、Jodd-HTTP、Thymeleaf;</p><p>数据库：MySQL 5.7;</p><p>前端：Moment.js、ElementUI、AntV-G2 、Echarts;</p><p>通知服务：<a href="http://sc.ftqq.com/3.version">Server酱</a>、<a href="https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.61074a9747Wldt&treeId=257&articleId=105735&docType=1">钉钉机器人</a></p><p>项目逻辑比较简单，就是每天会定时通过 WakaTime 的 API 抓取并保存前一天的数据，再通过图标插件展示出来。之后还会完善接口缓存、同步通知等功能；</p><p>同时使用了 AntV-G2 和 Echarts 的原因是因为持续时间图可以用 AntV-G2 实现，但日历图用 AntV-G2 实现过于复杂，就采用了用 Echarts 实现日历图；</p><p>另外本项目最初是的数据库是 MongoDB ，但是考虑到通用性和易用性后来又换成了 MySQL。MongoDB 版本的代码也实现了相关的同步展示逻辑，代码在 <a href="https://github.com/wf2311/wakatime-sync/tree/mongdb">mongodb</a> 分支中。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>替换或设置好<code>src/main/resources/application.yml</code>配置文件中的<code>wakatime.app.key</code>和<code>spring.datasource.*</code> 相关数据库配置，采用 maven 打包的方式安装即可，支持 Docker 方式安装。</p><p>数据库建库脚本位于<code>sql/wakatime_sync.sql</code>中。</p><p>数据库使用 MongoDB 的版本位于分支 <a href="https://github.com/wf2311/wakatime-sync/tree/mongdb">mongdb</a> 中。</p><p>示例地址：<a href="https://wakatime.wangfeng.pro/">https://wakatime.wangfeng.pro/</a>。</p><h3 id="消息通知"><a href="#消息通知" class="headerlink" title="消息通知"></a>消息通知</h3><p>系统中有一个定时任务，会在每天早上09:00会根据配置信息想钉钉或微信发送上一天的编码时间信息；<br>需要在<code>application.yml</code>配置对应的参数:</p><ul><li>Server酱微信通知：按照<a href="http://sc.ftqq.com/3.version">Server酱网站说明</a>获得一个<strong>SCKEY</strong>，设置成<code>wakatime.ftqq-key</code>的值；</li><li>钉钉机器人通知：在要获得提醒的钉钉群里面生成一个<strong>自定义机器人</strong>，将机器人的 Hook 地址中的 access_token 的值设置成<code>wakatime.dingding-key</code>的值；</li></ul><p><strong>如果不想使用对应的消息通知，请将<code>application.yml</code>中对应的参数注释掉或将值置为空</strong></p><h3 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h3><ol><li>由于本项目采用的是SpringBoot 2，对应的 <code>mysql-connector-java</code>  驱动使用的是MySQL服务端的时区，如果你使用的MySQL的时区和你程序中的时区以及你在 <a href="https://wakatime.com/settings/preferences">WakaTime 个人设置</a>中的时区不一致，就会导致保存的相关数据中时间不准，解决办法就是首先调整好 <a href="https://wakatime.com/settings/preferences">WakaTime 个人设置</a>里的时区，再调整 MySQL 数据库的时区，或者是使用 <code>5.X</code>版本的<code>mysql-connector-java</code>驱动。</li><li>如果你一直在使用 WakaTime ，如果想使用本项目同步你所有的历史数据，可以在官网上试用团队版的方式获得1个月(还是半个月？)的付费版功能或者是订阅一个月的付费版，然后通过本项目来同步所有的历史数据：<code>POST /api/v1/sync</code> 或参见项目中的测试方法。使用测试方法进行时不能同时使用太多的线程去同时调用 API 接口，会被限流。</li></ol><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li><input disabled="" type="checkbox"> 查询接口缓存；</li><li><input disabled="" type="checkbox"> 可以对项目名称设置别名展示；</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果本项目对你有用的话，欢迎在 <a href="https://github.com/wf2311/wakatime-sync">GITHUB</a>  或<a href="https://gitee.com/wf2311/wakatime-sync">码云</a>上 star，也欢迎对项目提出修改意见和建议。</p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WakaTime </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac使用tree生成目录结构</title>
      <link href="2019/01/mac%E4%BD%BF%E7%94%A8tree%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.html"/>
      <url>2019/01/mac%E4%BD%BF%E7%94%A8tree%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>程序员经常会有需求，需要列出项目的结构树。Mac或者Linux下可以使用tree列出项目结构，如下图这种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── build</span><br><span class="line">├── config</span><br><span class="line">├── docs</span><br><span class="line">│   └── static</span><br><span class="line">│       ├── css</span><br><span class="line">│       └── js</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets</span><br><span class="line">│   ├── components</span><br><span class="line">│   ├── store</span><br><span class="line">│   │   └── modules</span><br><span class="line">│   └── views</span><br><span class="line">│       ├── book</span><br><span class="line">│       └── movie</span><br><span class="line">└── static</span><br></pre></td></tr></table></figure><p>使用起来也非常简单。<br>Mac下可以使用<code>brew install tree</code>进行安装。安装后，在terminal中输入<code>tree -a</code>便可以查看某个文件夹下的所有文件。</p><h2 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h2><p>当然了，我们的需求肯定不止列出所有文件这么简单。下面介绍几个常用的命令：</p><ul><li><code>tree -d</code> 只显示文件夹；</li><li><code>tree -L n</code> 显示项目的层级。n表示层级数。比如想要显示项目三层结构，可以用tree -l 3；</li><li><code>tree -I pattern</code> 用于过滤不想要显示的文件或者文件夹。比如你想要过滤项目中的node_modules文件夹，可以使用<code>tree -I &quot;node_modules&quot;</code>；</li><li><code>tree &gt; tree.md</code> 将项目结构输出到tree.md这个文件。</li></ul><p>举个例子，如果我们要显示某个项目下3层的所有文件结构，同时又过滤node_modules文件夹，最后输出到tree.md，可以这么写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -L 3 -I <span class="string">&quot;node_modules&quot;</span></span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── build</span><br><span class="line">│   ├── build.js</span><br><span class="line">│   ├── check-versions.js</span><br><span class="line">│   ├── dev-client.js</span><br><span class="line">│   ├── dev-server.js</span><br><span class="line">│   ├── utils.js</span><br><span class="line">│   ├── webpack.base.conf.js</span><br><span class="line">│   ├── webpack.dev.conf.js</span><br><span class="line">│   └── webpack.prod.conf.js</span><br><span class="line">├── config</span><br><span class="line">│   ├── dev.env.js</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── prod.env.js</span><br><span class="line">├── docs</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── static</span><br><span class="line">│       ├── css</span><br><span class="line">│       └── js</span><br><span class="line">├── git.sh</span><br><span class="line">├── index.html</span><br><span class="line">├── npm-debug.log</span><br><span class="line">├── open</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   ├── list.scss</span><br><span class="line">│   │   ├── logo.png</span><br><span class="line">│   │   ├── search-btn.png</span><br><span class="line">│   │   └── style.scss</span><br><span class="line">│   ├── components</span><br><span class="line">│   │   ├── Hello.vue</span><br><span class="line">│   │   ├── Spinner.vue</span><br><span class="line">│   │   └── header.vue</span><br><span class="line">│   ├── main.js</span><br><span class="line">│   ├── router.js</span><br><span class="line">│   ├── store</span><br><span class="line">│   │   ├── api.js</span><br><span class="line">│   │   ├── modules</span><br><span class="line">│   │   ├── store.js</span><br><span class="line">│   │   └── types.js</span><br><span class="line">│   └── views</span><br><span class="line">│       ├── book</span><br><span class="line">│       ├── index.vue</span><br><span class="line">│       ├── movie</span><br><span class="line">│       └── vuex-demo.vue</span><br><span class="line">├── static</span><br><span class="line">└── tree.md</span><br></pre></td></tr></table></figure><p>更多命令的使用可以查看<code>tree --help</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> 转载 </tag>
            
            <tag> MAC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java操作码助记符</title>
      <link href="2018/11/java%E6%93%8D%E4%BD%9C%E7%A0%81%E5%8A%A9%E8%AE%B0%E7%AC%A6.html"/>
      <url>2018/11/java%E6%93%8D%E4%BD%9C%E7%A0%81%E5%8A%A9%E8%AE%B0%E7%AC%A6.html</url>
      
        <content type="html"><![CDATA[<p><em>本表内容来自<strong>《Java虚拟机规范（Java SE 8 版）》</strong>第7章</em></p><table border=0 cellpadding=0 cellspacing=0><tr><td></td><td colspan=2>操作码</td><td>助记码</td><td>指令含义</td></tr><tr><td rowspan=21>常量</td><td>0</td><td>0x00</td><td>nop</td><td>什么都不做</td></tr><tr><td>1</td><td>0x01</td><td>aconst_null</td><td>将null推送至栈顶</td></tr><tr><td>2</td><td>0x02</td><td>iconst_ml</td><td>将int类型-1推送至栈顶</td></tr><tr><td>3</td><td>0x03</td><td>iconst_0</td><td>将int类型0推送至栈顶</td></tr><tr><td>4</td><td>0x04</td><td>iconst_1</td><td>将int类型1推送至栈顶</td></tr><tr><td>5</td><td>0x05</td><td>iconst_2</td><td>将int类型2推送至栈顶</td></tr><tr><td>6</td><td>0x06</td><td>iconst_3</td><td>将int类型3推送至栈顶</td></tr><tr><td>7</td><td>0x07</td><td>iconst_4</td><td>将int类型4推送至栈顶</td></tr><tr><td>8</td><td>0x08</td><td>iconst_5</td><td>将int类型5推送至栈顶</td></tr><tr><td>9</td><td>0x09</td><td>lconst_0</td><td>将long类型0推送至栈顶</td></tr><tr><td>10</td><td>0x0a</td><td>lconst_1</td><td>将long类型1推送至栈顶</td></tr><tr><td>11</td><td>0x0b</td><td>fconst_0</td><td>将float类型0推送至栈顶</td></tr><tr><td>12</td><td>0x0c</td><td>fconst_1</td><td>将float类型1推送至栈顶</td></tr><tr><td>13</td><td>0x0d</td><td>fconst_2</td><td>将float类型2推送至栈顶</td></tr><tr><td>14</td><td>0x0e</td><td>dconst_0</td><td>将double类型0推送至栈顶</td></tr><tr><td>15</td><td>0x0f</td><td>dconst_1</td><td>将double类型1推送至栈顶</td></tr><tr><td>16</td><td>0x10</td><td>bipush</td><td>将单字节的常量值(-128~127)推送至栈顶</td></tr><tr><td>17</td><td>0x11</td><td>sipush</td><td align=left>将一个短整类型常量值(-32768~32767) 推送至栈顶</td></tr><tr><td>18</td><td>0x12</td><td>ldc</td><td align=left>将int、float或String类型常量值从常量池中推送至栈顶</td></tr><tr><td>19</td><td>0x13</td><td>ldc_w</td><td align=left>将int、float 或String类型常量值从常量池中推送至栈顶(宽索引)<span                style='mso-spacerun:yes'>&nbsp;</span></td></tr><tr><td>20</td><td>0x14</td><td>ldc2_w</td><td align=left>将long或double类型常量值从常量池中推送至栈顶(宽索引)</td></tr><tr><td rowspan=33>加载</td><td>21</td><td>0x15</td><td>iload</td><td>将指定的int类型本地变量推送至栈顶</td></tr><tr><td>22</td><td>0x16</td><td>lload</td><td>将指定的long类型本地变量推送至栈顶</td></tr><tr><td>23</td><td>0x17</td><td>fload</td><td>将指定的float类型本地变量推送至栈顶</td></tr><tr><td>24</td><td>0x18</td><td>dload</td><td>将指定的double类型本地变量推送至栈顶</td></tr><tr><td>25</td><td>0x19</td><td>aload</td><td>将指定的引用类型本地变量推送至栈顶</td></tr><tr><td>26</td><td>0xla</td><td>iload_0</td><td>将第1个int类型本地变量推送至栈顶</td></tr><tr><td>27</td><td>0x1b</td><td>iload_1</td><td>将第2个int类型本地变量推送至栈顶</td></tr><tr><td>28</td><td>0x1c</td><td>iload_2</td><td>将第3个int类型本地变量推送至栈顶</td></tr><tr><td>29</td><td>0xld</td><td>iload_3</td><td>将第4个int类型本地变量推送至栈顶</td></tr><tr><td>30</td><td>0xle</td><td>lload_0</td><td>将第1个long类型本地变量推送至栈顶</td></tr><tr><td>31</td><td>0x1f</td><td>lload_1</td><td>将第2个long类型本地变量推送至栈顶</td></tr><tr><td>32</td><td>0x20</td><td>lload_2</td><td>将第3个long类型本地变量推送至栈顶</td></tr><tr><td>33</td><td>0x21</td><td>lload_3</td><td>将第4个long类型本地变量推送至栈顶</td></tr><tr><td>34</td><td>0x22</td><td>fload_0</td><td>将第1个float类型本地变量推送至栈顶</td></tr><tr><td>35</td><td>0x23</td><td>fload_1</td><td>将第2个float类型本地变量推送至栈顶</td></tr><tr><td>36</td><td>0x24</td><td>fload_2</td><td>将第3个float类型本地变量推送至栈顶</td></tr><tr><td>37</td><td>0x25</td><td>fload_3</td><td>将第4个float类型本地变量推送至栈顶</td></tr><tr><td>38</td><td>0x26</td><td>dload_0</td><td>将第1个double类型本地变量推送至栈顶</td></tr><tr><td>39</td><td>0x27</td><td>dload_1</td><td>将第2个double类型本地变量推送至栈顶</td></tr><tr><td>40</td><td>0x28</td><td>dload_2</td><td>将第3个double类型本地变量推送至栈顶</td></tr><tr><td>41</td><td>0x29</td><td>dload_3</td><td>将第4个double类型本地变量推送至栈顶</td></tr><tr><td>42</td><td>0x2a</td><td>aload_0</td><td>将第1个引用类型本地变量推送至栈顶</td></tr><tr><td>43</td><td>0x2b</td><td>aload_1</td><td>将第2个引用类型本地变量推送至栈项</td></tr><tr><td>44</td><td>0x2c</td><td>aload_2</td><td>将第3个引用类型本地变量推送至栈顶</td></tr><tr><td>45</td><td>0x2d</td><td>aload_3</td><td>将第4个引用类型本地变量推送至栈顶</td></tr><tr><td>46</td><td>0x2e</td><td>iaload</td><td>将int类型数组的指定元素推送至栈顶</td></tr><tr><td>47</td><td>0x2f</td><td>laload</td><td>将long类型数组的指定元素推送至栈顶</td></tr><tr><td>48</td><td>0x30</td><td>faload</td><td>将float类型数组的指定元素推送至栈顶</td></tr><tr><td>49</td><td>0x31</td><td>daload</td><td>将double类型数组的指定元素推送至栈顶</td></tr><tr><td>50</td><td>0x32</td><td>aaload</td><td>将引用类型数组的指定元素推送至栈顶</td></tr><tr><td>51</td><td>0x33</td><td>baload</td><td>将boolean或byte类型数组的指定元素推送至栈顶</td></tr><tr><td>52</td><td>0x34</td><td>caload</td><td>将char类型数组的指定元素推送至栈顶</td></tr><tr><td>53</td><td>0x35</td><td>saload</td><td>将short类型数组的指定元素推送至栈顶</td></tr><tr><td rowspan=33 class=xl70>存储</td><td>54</td><td>0x36</td><td>istore</td><td>将栈顶int类型数值存入指定本地变量</td></tr><tr><td>55</td><td>0x37</td><td>lstore</td><td>将栈顶long类型数值存人指定本地变量</td></tr><tr><td>56</td><td>0x38</td><td>fstore</td><td>将栈顶float类型数值存人指定本地变量</td></tr><tr><td>57</td><td>0x39</td><td>dstore</td><td>将栈顶double类型数值存人指定本地变量</td></tr><tr><td>58</td><td>0x3a</td><td>astore</td><td>将栈顶引用类型数值存人指定本地变量</td></tr><tr><td>59</td><td>0x3b</td><td>istore_0</td><td>将栈顶int类型数值存人第1个本地变量</td></tr><tr><td>60</td><td>0x3c</td><td>istore_1</td><td>将栈顶int类型数值存入第2个本地变量</td></tr><tr><td>61</td><td>0x3d</td><td>istore_2</td><td>将栈顶int类型数值存人第3个本地变量</td></tr><tr><td>62</td><td>0x3e</td><td>istore_3</td><td>将栈顶int类型数值存人第4个本地变量</td></tr><tr><td>63</td><td>0x3f</td><td>lstore_0</td><td>将栈顶long类型数值存人第1个本地变量</td></tr><tr><td>64</td><td>0x40</td><td>lstore_1</td><td>将栈顶long类型数值存人第2个本地变量</td></tr><tr><td>65</td><td>0x41</td><td>lstore_2</td><td>将栈顶long类型数值存人第3个本地变量</td></tr><tr><td>66</td><td>0x42</td><td>lstore_3</td><td>将栈顶long类型数值存人第4个本地变量</td></tr><tr><td>67</td><td>0x43</td><td>fstore_0</td><td>将栈顶float类型数值存人第1个本地变量</td></tr><tr><td>68</td><td>0x44</td><td>fstore_1</td><td>将栈顶float类型数值存人第2个本地变量</td></tr><tr><td>69</td><td>0x45</td><td>fstore_2</td><td>将栈顶float类型数值存人第3个本地变量</td></tr><tr><td>70</td><td>0x46</td><td>fstore_3</td><td>将栈顶float类型数值存人第4个本地变量</td></tr><tr><td>71</td><td>0x47</td><td>dstore_0</td><td>将栈顶double类型数值存人第1个本地变量</td></tr><tr><td>72</td><td>0x48</td><td>dstore_1</td><td>将栈顶double类型数值存人第2个本地变量</td></tr><tr><td>73</td><td>0x49</td><td>dstore_2</td><td>将栈顶double类型数值存人第3个本地变量</td></tr><tr><td>74</td><td>0x4a</td><td>dstore_3</td><td>将栈顶double类型数值存人第4个本地变量</td></tr><tr><td>75</td><td>0x4b</td><td>astore_0</td><td>将栈顶引用类型数值存入第1个本地变量</td></tr><tr><td>76</td><td>0x4c</td><td>astore_1</td><td>将栈顶引用类型数值存人第2个本地变量</td></tr><tr><td>77</td><td>0x4d</td><td>astore_2</td><td>将栈顶引用类型数值存入第3个本地变量</td></tr><tr><td>78</td><td>0x4e</td><td>astore_3</td><td>将栈顶引用类型数值存入第4个本地变量</td></tr><tr><td>79</td><td>0x4f</td><td>iastore</td><td>将栈顶int类型数值存人指定数组的指定索引位置</td></tr><tr><td>80</td><td>0x50</td><td>lastore</td><td>将栈顶long类型数值存人指定数组的指定索引位置</td></tr><tr><td>81</td><td>0x51</td><td>fastore</td><td>将栈顶float类型数值存人指定数组的指定索引位置</td></tr><tr><td>82</td><td>0x52</td><td>dastore</td><td>将栈顶double类型数值存人指定数组的指定索引位置</td></tr><tr><td>83</td><td>0x53</td><td>uastore</td><td>将栈顶引用类型数值存人指定数组的指定索引位置</td></tr><tr><td>84</td><td>0x54</td><td>bastore</td><td>将栈顶boolean或byte类型数值存人指定数组的指定索引位置</td></tr><tr><td>85</td><td>0x55</td><td>castore</td><td>将栈顶char类型数值存人指定数组的指定索引位置</td></tr><tr><td>86</td><td>0x56</td><td>sastore</td><td>将栈顶short类型数值存人指定数组的指定索引位置</td></tr><tr><td rowspan=9 class=xl70>栈</td><td>87</td><td>0x57</td><td>pop</td><td>将栈顶数值弹出( 数值不能是long或double类型的)</td></tr><tr><td>88</td><td>0x58</td><td>pop2</td><td>将栈顶的一个long或double类型的数值或两个其他类型的数值弹出</td></tr><tr><td>89</td><td>0x59</td><td>dup</td><td>复制栈顶数值并将复制值压人栈顶</td></tr><tr><td>90</td><td>0x5a</td><td>dup_x1</td><td>复制栈顶值并将其插人栈顶那两个值的下面</td></tr><tr><td>91</td><td>0x5b</td><td>dup_x2</td><td>复制栈顶值并将其插人栈顶那两个或三个值的下面</td></tr><tr><td>92</td><td>0x5c</td><td>dup2</td><td>复制栈顶的一个long或double类型的值，或两个其他类型的值，并将其压人栈顶</td></tr><tr><td>93</td><td>0x5d</td><td>dup2_x1</td><td>复制栈顶的一个或两个值，并将其插人栈顶那两个或三个值的下面</td></tr><tr><td>94</td><td>0x5e</td><td>dup2_x2</td><td>复制栈顶的一个或两个值，并将其插人栈顶那两个、三个或四个值的下面</td></tr><tr><td>95</td><td>0x5f</td><td>swap</td><td>将栈顶的两个数值互换(数值不能是long或double类型的)</td></tr><tr><td rowspan=35>数学</td><td>96</td><td>0x60</td><td>iadd</td><td>将栈顶两int类型数值相加并将结果压人栈顶</td></tr><tr><td>97</td><td>0x61</td><td>ladd</td><td>将栈顶两long类型数值相加并将结果压人栈顶</td></tr><tr><td>98</td><td>0x62</td><td>fadd</td><td>将栈顶两float类型数值相加并将结果压人栈顶</td></tr><tr><td>99</td><td>0x63</td><td>dadd</td><td>将栈顶两double类型数值相加并将结果压人栈顶</td></tr><tr><td>100</td><td>0x64</td><td>isub</td><td>将栈顶两int类型数值相减并将结果压人栈顶</td></tr><tr><td>101</td><td>0x65</td><td>lsub</td><td>将栈顶两long类型数值相减并将结果压人栈顶</td></tr><tr><td>102</td><td>0x66</td><td>fsub</td><td>将栈顶两float类型数值相减并将结果压人栈顶</td></tr><tr><td>103</td><td>0x67</td><td>dsub</td><td>将栈顶两double类型数值相减并将结果压人栈顶</td></tr><tr><td>104</td><td>0x68</td><td>imul</td><td>将栈顶两int类型数值相乘并将结果压人栈顶</td></tr><tr><td>105</td><td>0x69</td><td>lmul</td><td>将栈顶两long类型数值相乘并将结果压人栈顶</td></tr><tr><td>106</td><td>0x6a</td><td>fmul</td><td>将栈顶两float类型数值相乘并将结果压人栈顶</td></tr><tr><td>107</td><td>0x6b</td><td>dmul</td><td>将栈顶两double类型数值相乘并将结果压人栈顶</td></tr><tr><td>108</td><td>0x6c</td><td>idiv</td><td>将栈顶两int类型数值相除并将结果压人栈顶</td></tr><tr><td>109</td><td>0x6d</td><td>ldiv</td><td>将栈顶两long类型数值相除并将结果压人栈顶</td></tr><tr><td>110</td><td>0x6e</td><td>fdiv</td><td>将栈顶两float类型数值相除并将结果压人栈顶</td></tr><tr><td>111</td><td>0x6f</td><td>ddiv</td><td>将栈顶两double类型数值相除并将结果压人栈顶</td></tr><tr><td>112</td><td>0x70</td><td>irem</td><td>将栈顶两int类型数值作取模运算并将结果压人栈顶</td></tr><tr><td>113</td><td>0x71</td><td>lrem</td><td>将栈顶两long类型数值作取模运算并将结果压人栈顶</td></tr><tr><td>114</td><td>0x72</td><td>frem</td><td>将栈顶两float类型数值作取模运算并将结果压人栈顶</td></tr><tr><td>115</td><td>0x73</td><td>drem</td><td>将栈顶两double类型数值作取模运算并将结果压人栈顶</td></tr><tr><td>116</td><td>0x74</td><td>ineg</td><td>将栈顶int类型数值取负并将结果压入栈项</td></tr><tr><td>117</td><td>0x75</td><td>lneg</td><td>将栈顶long类型数值取负并将结果压人栈顶</td></tr><tr><td>118</td><td>0x76</td><td>fineg</td><td>将栈顶float类型数值取负并将结果压人栈顶</td></tr><tr><td>119</td><td>0x77</td><td>dneg</td><td>将栈顶double类型数值取负并将结果压人栈顶</td></tr><tr><td>120</td><td>0x78</td><td>ishl</td><td>将int类型数值左移位指定位数并将结果压人栈项</td></tr><tr><td>121</td><td>0x79</td><td>lshl</td><td>将long类型数值左移位指定位数并将结果压人栈顶</td></tr><tr><td>122</td><td>0x7a</td><td>ishr</td><td>将int类型数值(有符号)右移位指定位数并将结果压入栈顶</td></tr><tr><td>123</td><td>0x7b</td><td>lshr</td><td>将long类型数值(有符号)右移位指定位数并将结果压入栈顶</td></tr><tr><td>124</td><td>0x7c</td><td>iushr</td><td>将int类型数值(无符号)右移位指定位数并将结果压入栈顶</td></tr><tr><td>125</td><td>0x7d</td><td>lushr</td><td>将long类型数值(无符号)右移位指定位数并将结果压入栈顶</td></tr><tr><td>126</td><td>0x7e</td><td>iand</td><td>将栈顶两int类型数值作“按位与”并将结果压人栈顶</td></tr><tr><td>127</td><td>0x7f</td><td>land</td><td>将栈顶两long类型数值作“按位与” 并将结果压人栈顶</td></tr><tr><td>128</td><td>0x80</td><td>ior</td><td>将栈顶两int类型数值作“按位或”并将结果压人栈项</td></tr><tr><td>129</td><td>0x81</td><td>lor</td><td>将栈顶两long类型数值作“按位或”并将结果压人栈顶</td></tr><tr><td>130</td><td>0x82</td><td>ixor</td><td>将栈顶两int类型数值作“按位异或”并将结果压人栈顶</td></tr><tr><td rowspan=15>转换</td><td>131</td><td>0x83</td><td>lxor</td><td>将栈顶两long类型数值作“按位异或”并将结果压人栈顶</td></tr><tr><td>132</td><td>0x84</td><td>iinc</td><td>将指定int类型变量增加指定值(i++，i--, i+=2)</td></tr><tr><td>133</td><td>0x85</td><td>i2l</td><td>将栈顶int类型数值强制转换成long类型数值并将结果压入栈顶</td></tr><tr><td>134</td><td>0x86</td><td>i2f</td><td>将栈顶int类型数值强制转换成float类型数值并将结果压入栈顶</td></tr><tr><td>135</td><td>0x87</td><td>i2d</td><td>将栈顶int类型数值强制转换成double类型数值并将结果压入栈顶</td></tr><tr><td>136</td><td>0x88</td><td>l2i</td><td>将栈顶long类型数值强制转换成int类型数值并将结果压入栈顶</td></tr><tr><td>137</td><td>0x89</td><td>l2f</td><td>将栈顶long类型数值强制转换成float类型数值并将结果压入栈顶</td></tr><tr><td>138</td><td>0x8a</td><td>l2d</td><td>将栈顶long类型数值强制转换成double类型数值并果压入栈顶</td></tr><tr><td>139</td><td>0x8b</td><td>f2i</td><td>将栈顶float类型数值强制转换成int类型数值并将结果压入栈顶</td></tr><tr><td>140</td><td>0x8c</td><td>f2l</td><td>将栈顶float类型数值强制转换成long类型数值并将结果压入栈顶</td></tr><tr><td>141</td><td>0x8d</td><td>f2d</td><td>将栈顶float类型数值强制转换成double类型数值并果压入栈顶</td></tr><tr><td>142</td><td>0x8e</td><td>d2i</td><td>将栈顶double类型数值强制转换成int类型数值并将果压入栈顶</td></tr><tr><td>143</td><td>0x8f</td><td>d2l</td><td>将栈顶double类型数值强制转换成long类型数值并果压入栈顶</td></tr><tr><td>144</td><td>0x90</td><td>d2f</td><td>将栈顶double类型数值强制转换成float类型数值并果压入栈顶</td></tr><tr><td>145</td><td>0x91</td><td>i2b</td><td>将栈顶int类型数值强制转换成byte类型数值并将结果压入栈顶</td></tr><tr><td rowspan=19 class=xl70>比较</td><td>146</td><td>0x92</td><td>i2c</td><td>将栈顶int类型数值强制转换成char类型数值并将结果压入栈顶</td></tr><tr><td>147</td><td>0x93</td><td>i2s</td><td>将栈顶int类型数值强制转换成short类型数值并将结果压入栈顶</td></tr><tr><td>148</td><td>0x94</td><td>lcmp</td><td>比较栈顶两long类型数值大小，并将结果( 1, 0, -1)压入栈顶</td></tr><tr><td>149</td><td>0x95</td><td>fcmpl</td><td>比较栈顶两float类型数值大小，并将结果(1, 0, -1)压入栈顶;当其中-一个数值为“NaN&quot;时，将-1压入栈顶</td></tr><tr><td>150</td><td>0x96</td><td>fcmpg</td><td>比较栈顶两float类型数值大小，并将结果(1，0, -1)压入栈顶;当其中-一个数值为“NaN&quot;时，将1压入栈顶</td></tr><tr><td>151</td><td>0x97</td><td>dcmpl</td><td>比较栈顶两double类型数值大小，并将结果(1,0,-1)压入栈顶;当其中-一个数值为“NaN&quot;时，将-1压入栈顶</td></tr><tr><td>152</td><td>0x98</td><td>dcmpg</td><td>比较栈顶两double类型数值大小，并将结果(1.0,-1)压入栈顶;当其中一个数值为“NaN&quot; 时，将1压入栈顶</td></tr><tr><td>153</td><td>0x99</td><td>ifeq</td><td>当栈顶int类型数值等于0时跳转</td></tr><tr><td>154</td><td>0x9a</td><td>ifne</td><td>当栈顶int类型数值不等于0时跳转</td></tr><tr><td>155</td><td>0x9b</td><td>jft</td><td>当栈顶int类型数值小于0时跳转</td></tr><tr><td>156</td><td>0x9c</td><td>ifge</td><td>当栈顶int类型数值大于等于0时跳转</td></tr><tr><td>157</td><td>0x9d</td><td>ifgt</td><td>当栈顶int类型数值大于0时跳转</td></tr><tr><td>158</td><td>0x9e</td><td>ifle</td><td>当栈顶int类型数值小于等于0时跳转</td></tr><tr><td>159</td><td>0x9f</td><td>if_icmpeq</td><td>比较栈顶两int类型数值大小，当前者等于后者时跳转</td></tr><tr><td>160</td><td>0xa0</td><td>f_icmpne</td><td>比较栈顶两int类型数值大小，当前者不等于后者时跳转</td></tr><tr><td>161</td><td>0xa1</td><td>if_icmplt</td><td>比较栈顶两int类型数值大小，当前者小于后者时跳转</td></tr><tr><td>162</td><td>0xa2</td><td>if_icmpge</td><td>比较栈顶两int类型数值大小，当前者大于等于后者时跳转</td></tr><tr><td>163</td><td>0xa3</td><td>if_icmpgt</td><td>比较栈顶两int类型数值大小，当前者大于后者时跳转</td></tr><tr><td>164</td><td>0xa4</td><td>if_icmple</td><td>比较栈顶两int类型数值大小，当前者小于等于后者时跳转</td></tr><tr><td rowspan=11>控制</td><td>165</td><td>0xa5</td><td>if_acmpeq</td><td>比较栈顶两引用类型数值，当结果相等时跳转</td></tr><tr><td>166</td><td>0xa6</td><td>if_acmpne</td><td>比较栈顶两引用类型数值，当结果不相等时跳转</td></tr><tr><td>167</td><td>0xa 7</td><td>goto</td><td>无条件跳转</td></tr><tr><td>168</td><td>0xa8</td><td>jsr</td><td>跳转至指定16位offset位置，并将jsr下一条指令地址压入栈顶</td></tr><tr><td>169</td><td>0xa9</td><td>ret</td><td>返回至由指定的局部变量所给出的指令位置(一般与jsr、jsr_w联合使用)</td></tr><tr><td>170</td><td>0xaa</td><td>tableswitch</td><td>用于switch条件跳转，case值连续(变长指令)</td></tr><tr><td>171</td><td>0xab</td><td>lookupswitch</td><td>用于switch条件跳转，case 值不连续(变长指令)</td></tr><tr><td>172</td><td>0xac</td><td>ireturn</td><td>从当前方法返回int</td></tr><tr><td>173</td><td>0xad</td><td>lreturn</td><td>从当前方法返回long</td></tr><tr><td>174</td><td>0xae</td><td>freturn</td><td>从当前方法返回float</td></tr><tr><td>175</td><td>0xaf</td><td>dreturn</td><td>从当前方法返回double</td></tr><tr><td rowspan=18>引用</td><td>176</td><td>0xb0</td><td>areturn</td><td>从当前方法返回对象引用</td></tr><tr><td>177</td><td>0xb1</td><td>return</td><td>从当前方法返回void</td></tr><tr><td>178</td><td>0xb2</td><td>getstatic</td><td>获取指定类的静态字段，并将其值压人栈顶</td></tr><tr><td>179</td><td>0xb3</td><td>putstatic</td><td>为指定类的静态字段赋值</td></tr><tr><td>180</td><td>0xb4</td><td>getfield</td><td>获取指定类的实例字段，并将其值压人栈顶</td></tr><tr><td>181</td><td>0xb5</td><td>pufield</td><td>为指定类的实例字段赋值</td></tr><tr><td>182</td><td>0xb6</td><td>invokevirtual</td><td>调用实例方法</td></tr><tr><td>183</td><td>0xb7</td><td>invokespecial</td><td>调用父类方法、实例初始化方法、私有方法</td></tr><tr><td>184</td><td>0xb8</td><td>invokestatic</td><td>调用静态方法</td></tr><tr><td>185</td><td>0xb9</td><td>invokeinterface</td><td>调用接口方法</td></tr><tr><td>186</td><td>0xba</td><td>invokedynamic</td><td>调用动态链接方法</td></tr><tr><td>187</td><td>0xbb</td><td>new</td><td>创建一个对象，并将其引用值压人栈顶</td></tr><tr><td>188</td><td>0xbc</td><td>newarray</td><td>创建一个指定原始类型(如int、float、char等)的数组，并将其引用值压人栈顶</td></tr><tr><td>189</td><td>0xbd</td><td>anewarray</td><td>创建一个引用型(如类、接口、数组)的数组，并将其引用值压人栈顶</td></tr><tr><td>190</td><td>0xbe</td><td>arraylength</td><td>获得数组的长度值并压人栈顶</td></tr><tr><td>191</td><td>0xbf</td><td>athrow</td><td>将栈顶的异常抛出</td></tr><tr><td>192</td><td>0xc0</td><td>checkcast</td><td>检验类型转换，检验未通过将抛出ClassCastException</td></tr><tr><td>193</td><td>0xc1</td><td>instanceof</td><td>检验对象是否是指定类的实例，如果是，就将1压人栈顶，否则将0压人栈顶</td></tr><tr><td rowspan=8>扩展</td><td>194</td><td>0xc2</td><td>monitorenter</td><td>获得对象的锁，用于实现同步块</td></tr><tr><td>195</td><td>0xc3</td><td>monitorexit</td><td>释放对象的锁，用于实现同步块</td></tr><tr><td>196</td><td>0xc4</td><td>wide</td><td>扩展本地变量索引的宽度</td></tr><tr><td>197</td><td>0xc5</td><td>multianewarray</td><td>创建指定类型和指定维度的多维数组(执行该指令时，操作栈中必须包含各维度的长度值)，并将其引用值压人栈项</td></tr><tr><td>198</td><td>0xc6</td><td>ifnull</td><td>为null时跳转</td></tr><tr><td>199</td><td>0xc7</td><td>ifnonnull</td><td>不为null时跳转</td></tr><tr><td>200</td><td>0xc8</td><td>goto_w</td><td>无条件跳转(宽索引)</td></tr><tr><td>201</td><td>0xc9</td><td>jsr_w</td><td>跳转至指定32位offset位置，并将jsr_w下一条指令地址压人栈顶</td></tr><tr><td rowspan=3>保留字段</td><td>202</td><td>0xca</td><td>breakpoint</td><td>调试时的断点标记</td></tr><tr><td>254</td><td>0xfe</td><td>impdep1</td><td>为特定软件而预留的语言后门</td></tr><tr><td>255</td><td>0xff</td><td>impdep2</td><td>为特定硬件而预留的语言后门</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Maven项目打包发布到中央仓库</title>
      <link href="2018/06/%E5%B0%86maven%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E5%88%B0%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.html"/>
      <url>2018/06/%E5%B0%86maven%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E5%88%B0%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.html</url>
      
        <content type="html"><![CDATA[<h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><h3 id="groupId-要求"><a href="#groupId-要求" class="headerlink" title="groupId 要求"></a>groupId 要求</h3><p>项目的<code>groupId</code>一般为域名倒置，比如我的网址为wangfeng.pro，<code>groupId</code>则可以命名为<code>pro.wangfeng</code>。如果你没有属于自己的域名，则最好使用<strong>github</strong>相关的<code>groupId</code>，比如你的项目地址的github路径为<code>https://www.github.com/username/projectName</code>,那<code>groupId</code>最好为<code>com.github.username</code>。<br><code>groupId</code>的命名规范关系到在接下来的Sonatype OSSRH审核能否通过。</p><h3 id="修改-pom-xml"><a href="#修改-pom-xml" class="headerlink" title="修改 pom.xml"></a>修改 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开源协议--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>The Apache License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开发者信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>wf2311<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>wf2311@163.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">role</span>&gt;</span>developer<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timezone</span>&gt;</span>+8<span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">organization</span>&gt;</span>wf2311<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>https://www.wangfeng.pro<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:git:https://github.com/wf2311/common-lang.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>scm:git:https://github.com/wf2311/common-lang.git<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/wf2311/common-lang<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span>v$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--仓库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--快照库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--正式库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Central Staging Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意将其中与项目相关的路径修改为当前项目的</strong><br>加入相关插件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--编译插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--源码插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--javadoc插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">additionalparam</span>&gt;</span>-Xdoclint:none<span class="tag">&lt;/<span class="name">additionalparam</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--gpg签名插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>sign-artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改完以上配置后，将代码同步到github上面。</p><h2 id="注册-Sonatype-OSSRH"><a href="#注册-Sonatype-OSSRH" class="headerlink" title="注册 Sonatype OSSRH"></a>注册 Sonatype OSSRH</h2><p>注册地址：<a href="https://issues.sonatype.org/secure/Signup!default.jspa">https://issues.sonatype.org/secure/Signup!default.jspa</a></p><h2 id="提交一个-ISSUE"><a href="#提交一个-ISSUE" class="headerlink" title="提交一个 ISSUE"></a>提交一个 ISSUE</h2><p>登录成功后，进入<a href="https://issues.sonatype.org/secure/Dashboard.jspa">首页</a>，点击页面上方的 <strong>Create</strong> 按钮，弹出如下窗口：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/issue-before.png" alt="打开创建ISSUE窗口"></p><p><strong>Project</strong> 选择 <strong>Open Source Project Repository Hosting</strong>；<br><strong>Issue Type</strong> 选择 <strong>New Project</strong>；<br><strong>Summary</strong> 可以填<strong>你的项目名称</strong>；<br>其它的必填项请参考示例填写，填写完成后点击下方的 <strong>Create</strong> 按钮提交 ISSUE 。<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/issue-form.png" alt="填写表单"></p><p>提交成功后，点击页面上方的 <strong>Issue</strong> 按钮，可以看到刚刚你提交的 ISSUE :<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/open-issue.png" alt="前往ISSUE详情页"></p><p>稍等片刻，你就会审核者的相关评论，询问你填写的<code>groupId</code>对应的域名是不是属于你的：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/issue-ask.png" alt="审核者确认信息"></p><p>然后你需要点击下方的 <strong>Comment</strong> 按钮回答审核者，向他确认该域名是属于你的:<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/to-answer.png" alt="点击Comment按钮"></p><p>这个确认过程可能需要你和审核者交流几个来回才能搞定，具体过程可参考笔者的<a href="https://issues.sonatype.org/browse/OSSRH-40306">一个ISSUE案例</a>。</p><p>当最终审核通过后，你将收到审核者的如下回复：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/success-comment.png" alt="审核通过"></p><p>并且该 ISSUE 的状态将变为<code>RESOLVED</code>：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/success-status.png" alt="审核通过状态"></p><p>至此，你就有权限将该项目发布到maven中央仓库中了。</p><p><strong>注意：如果你还有其它的项目也需要发布到中央仓库，并且 groupId 和上面的一样，就不需要再次创建 ISSUE 了；只有在使用新的 groupId 时才需要提交 ISSUE。</strong></p><h2 id="gpg安装配置"><a href="#gpg安装配置" class="headerlink" title="gpg安装配置"></a>gpg安装配置</h2><h3 id="安装-gpg"><a href="#安装-gpg" class="headerlink" title="安装 gpg"></a>安装 gpg</h3><p>由于各个系统版本的 gpg 安装方式不尽相同，这里就不写详细安装方式了。具体步骤可以 google 、百度或者按<a href="https://www.gnupg.org/download/index.html">官网</a>上给的步骤下载安装。</p><p>安装完成后在终端或命令行运行以下命令，确认是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --version</span><br></pre></td></tr></table></figure><p>出现类似信息表上安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gpg (GnuPG) 2.1.21</span><br><span class="line">libgcrypt 1.7.8</span><br><span class="line">Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;https://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Home: /Users/wf2311/.gnupg</span><br><span class="line">支持的算法：</span><br><span class="line">公钥：RSA, ELG, DSA, ECDH, ECDSA, EDDSA</span><br><span class="line">对称加密：IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256,</span><br><span class="line">     TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256</span><br><span class="line">散列：SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224</span><br><span class="line">压缩：不压缩, ZIP, ZLIB, BZIP2</span><br></pre></td></tr></table></figure><h3 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h3><p><strong>以 Mac 下操作为例，不同系统的过程可能有所差异</strong><br>运行命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --gen-key</span><br></pre></td></tr></table></figure><p>会让你输入<strong>真实姓名</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gpg (GnuPG) 2.1.21; Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Note: Use <span class="string">&quot;gpg2 --full-generate-key&quot;</span> <span class="keyword">for</span> a full featured key generation dialog.</span><br><span class="line"></span><br><span class="line">You need a user ID to identify your key; the software constructs the user ID</span><br><span class="line">from the Real Name, Comment and Email Address <span class="keyword">in</span> this form:</span><br><span class="line">    <span class="string">&quot;Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">真实姓名：</span><br></pre></td></tr></table></figure><p>输入 你的姓名(<strong>至少为5个字符</strong>) ，回车<br>再输入你的电子邮箱 ，回车，出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Change (N)ame, (E)mail, or (O)kay/(Q)uit?</span><br></pre></td></tr></table></figure><p>选择 <code>O</code> 回车，出现如下提示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我们需要生成大量的随机字节。这个时候您可以多做些琐事(像是敲打键盘、移动</span><br><span class="line">鼠标、读写硬盘之类的)，这会让随机数字发生器有更好的机会获得足够的熵数。</span><br></pre></td></tr></table></figure><p>并且提示让你输入密码，输入密码后回车，<br>稍等片刻就会出现如下生成信息：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/gpg.png" alt="gpg 生成步骤"><br>图中的<code>CD4809496C405C2F72F62B31052A2DC27A064C14</code>即为生成的公钥</p><h3 id="发布公钥到-GPG-密钥服务器"><a href="#发布公钥到-GPG-密钥服务器" class="headerlink" title="发布公钥到 GPG 密钥服务器"></a>发布公钥到 GPG 密钥服务器</h3><p>运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://pool.sks-keyservers.net --send-keys CD4809496C405C2F72F62B31052A2DC27A064C14</span><br></pre></td></tr></table></figure><p>此操作因为网络原因可能需要等待一定的时间</p><h3 id="查询公钥是否发布成功"><a href="#查询公钥是否发布成功" class="headerlink" title="查询公钥是否发布成功"></a>查询公钥是否发布成功</h3><p>运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys CD4809496C405C2F72F62B31052A2DC27A064C14</span><br></pre></td></tr></table></figure><p>出现类似以下信息即表示发布成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gpg: 密钥 052A2DC27A064C14：“wf2311 &lt;wf2311@163.com&gt;”未改变</span><br><span class="line">gpg: 合计被处理的数量：1</span><br><span class="line">gpg:           未改变：1</span><br></pre></td></tr></table></figure><p>更多 gpg 命令请参考阮一峰的<a href="http://www.ruanyifeng.com/blog/2013/07/gpg.html">GPG入门教程</a></p><h2 id="修改-maven-配置文件"><a href="#修改-maven-配置文件" class="headerlink" title="修改 maven 配置文件"></a>修改 maven 配置文件</h2><p>在maven的配置文件 settings.xml 中添加以下内容:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>id须与pom.xml中distributionManagement下设置的id保持一致<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>注册Sonatype账号是填写的用户名<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>注册Sonatype账号是填写的密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>gpg<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.executable</span>&gt;</span>与gpg版本有关mac下一般填写gpg2,window下填gpg<span class="tag">&lt;/<span class="name">gpg.executable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.passphrase</span>&gt;</span>生成gpg秘钥过程中填写的密码<span class="tag">&lt;/<span class="name">gpg.passphrase</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="打包上传"><a href="#打包上传" class="headerlink" title="打包上传"></a>打包上传</h2><p>切换到当前项目路径，运行命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -DskipTests clean deploy</span><br></pre></td></tr></table></figure><p>正常情况下，如果运行成功未出错，项目会打包并上传的<strong>对应</strong>的仓库中：</p><ul><li>对应快照版本，即版本号以 <code>-SNAPSHOT</code> 结尾的，会立即上传到 <a href="https://oss.sonatype.org/content/repositories/snapshots">https://oss.sonatype.org/content/repositories/snapshots</a> 中，并且可以直接通过 maven 快照仓库引用，但是在 maven 中央仓库中搜索不到。</li><li>对应正式版本，即版本号不是以 <code>-SNAPSHOT</code> 结尾的，虽然也会上传到 <a href="https://oss.sonatype.org/service/local/staging/deploy/maven2/">https://oss.sonatype.org/service/local/staging/deploy/maven2/</a> 中，但还需要我们手动发布一下，才会发布到中央仓库中。</li></ul><p><strong>提示： 如果在 Mac 环境下打包是出现 gpg 相关的错误，可以参考 <a href="https://blog.csdn.net/wenbo20182/article/details/72850810">gpg: 签名时失败处理</a>这篇文章来处理</strong></p><h2 id="在-OSS-中发布构件"><a href="#在-OSS-中发布构件" class="headerlink" title="在 OSS 中发布构件"></a>在 OSS 中发布构件</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>登录 <a href="https://oss.sonatype.org/">https://oss.sonatype.org</a>，用户名密码与上面 Sonatype 的相同</p><h3 id="发布构建"><a href="#发布构建" class="headerlink" title="发布构建"></a>发布构建</h3><p>登录成功后会进入如下页面：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/oss-menu.png" alt="neuxs 管理页面"></p><p>点击左侧的 <strong>Build Promotion</strong> 下的 <strong>Staging Repositories</strong>，出现：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/oss-search.png" alt="根据groupId搜索"></p><p>在搜索输入框输入项目的 <strong>groupId</strong>，找到并选择你刚刚打包上传的项目。点击上方的 <strong>Close</strong> 按钮：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/oss-close.png" alt="close"></p><p>再在弹窗中点击 <strong>Confirm</strong> 按钮，过几秒后再点击上面的 <strong>Refresh</strong> 按钮进行刷新，就可以看到如下界面：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/oss-close-result.png" alt="close-result"></p><p>展开下方 <strong>Activity</strong> 面板的结果信息，如果出现如上图的信息，即表示构建通过。<br>再过几秒后再次点击点击上面的 <strong>Refresh</strong> 按钮进行刷新，就会看到旁边的 <strong>Release</strong> 按钮变为可操作状态：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/oss-to-release.png" alt="发布按钮"></p><p>最后点击 <strong>Release</strong> 按钮，出现弹窗：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/oss-confirm-release.png" alt="确认发布"></p><p>点击 <strong>Confirm</strong> 按钮，确认发布构建，至此发布构建的的步骤全部结束。<br>再等待大概一到两小时的同步时间后，便可以在中央仓库中<a href="http://search.maven.org/">搜索</a>到你发布的项目了：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/search-project.png" alt="搜索"></p><h2 id="修改-README-md-文件"><a href="#修改-README-md-文件" class="headerlink" title="修改 README.md 文件"></a>修改 README.md 文件</h2><p>在项目的 README.md 头部 加上 如下格式的内容：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![Maven Central](https:<span class="regexp">//m</span>aven-badges.herokuapp.com<span class="regexp">/maven-central/</span>&lt;groupId&gt;<span class="regexp">/&lt;projectName&gt;/</span>badge.svg)](https:<span class="regexp">//m</span>aven-badges.herokuapp.com<span class="regexp">/maven-central/</span>&lt;groupId&gt;/&lt;projectName&gt;)</span><br></pre></td></tr></table></figure><p>比如我的这个项目的 <strong>gorupId</strong> 为 <strong>pro.wangfeng</strong>，<strong>projectName</strong> 为 <strong>common-lang</strong>，则加上：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![Maven Central](https:<span class="regexp">//m</span>aven-badges.herokuapp.com<span class="regexp">/maven-central/</span>pro.wangfeng<span class="regexp">/common-lang/</span>badge.svg)](https:<span class="regexp">//m</span>aven-badges.herokuapp.com<span class="regexp">/maven-central/</span>pro.wangfeng/common-lang)</span><br></pre></td></tr></table></figure><p>之后就会出现如下显示：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/svg.png" alt="svg"></p><p>最后再给出两个在打包时十分有用的 maven 命令：</p><ul><li>更新父模块到指定版本号：</li></ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn versions:<span class="built_in">set</span> -DnewVersion=1.0.1-SNAPSHOT</span><br></pre></td></tr></table></figure><ul><li>更新子模块版本到与模块相同：</li></ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -N versions:update-child-modules</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.ktanx.com/blog/p/4352">将jar发布到maven中央仓库小记</a></li><li><a href="http://www.cnblogs.com/gaoxing/p/4359795.html">向maven中央仓库提交jar</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker命令备忘</title>
      <link href="2018/06/docker%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98.html"/>
      <url>2018/06/docker%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98.html</url>
      
        <content type="html"><![CDATA[<h2 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h2><h3 id="列出所有镜像"><a href="#列出所有镜像" class="headerlink" title="列出所有镜像"></a>列出所有镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure><h3 id="删除名称或标签为none的镜像"><a href="#删除名称或标签为none的镜像" class="headerlink" title="删除名称或标签为none的镜像"></a>删除名称或标签为none的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f  `docker images | grep <span class="string">&#x27;&lt;none&gt;&#x27;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h2><h3 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name MyJenkins -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><ul><li><strong>docker run</strong> : 由 image 建立 container 并执行之;</li><li><strong>-d</strong> : 建立 container 后，就脱离目前 process</li><li><strong>—name</strong> : 替 container 设置一个易识别的名字 <code>MyJenkins</code> (若省略，Docker 将随机命名，不易维护)</li><li><strong>-p</strong> : Docker 外部与 Jenkins 內部所对应的 port，其中左边为外部 Docker 的 port，右边为 Jenkins 內部的 port</li><li><strong>-v</strong> : 建立 <code>JENKINS_HOME</code> 环境变量，其目录在 <code>/var/jenkins_home</code>，为 Jenkins 的工作目录</li></ul><h3 id="重命名容器名称"><a href="#重命名容器名称" class="headerlink" title="重命名容器名称"></a>重命名容器名称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename &lt;old_name&gt; &lt;new_name&gt;</span><br></pre></td></tr></table></figure><h3 id="显示所有容器"><a href="#显示所有容器" class="headerlink" title="显示所有容器"></a>显示所有容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="根据容器名称启动-停止容器"><a href="#根据容器名称启动-停止容器" class="headerlink" title="根据容器名称启动/停止容器"></a>根据容器名称启动/停止容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker [stop] [start] &lt;container_name&gt;</span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container_name&gt; /bin/bash</span><br></pre></td></tr></table></figure><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h3 id="上传文件到容器"><a href="#上传文件到容器" class="headerlink" title="上传文件到容器"></a>上传文件到容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp [本地文件路径] &lt;container_name&gt;: [目标路径]</span><br></pre></td></tr></table></figure><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -t -f <span class="tag">&lt;<span class="name">container_name</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="删除异常停止的docker容器"><a href="#删除异常停止的docker容器" class="headerlink" title="删除异常停止的docker容器"></a>删除异常停止的docker容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm `docker ps -a | grep Exited | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://oomusou.io/docker/jenkins/" title="如何使用 Docker 安裝 Jenkins ?">如何使用 Docker 安裝 Jenkins ?</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 命令 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事件的使用</title>
      <link href="2018/01/spring%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
      <url>2018/01/spring%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Spring 的事件(Spring Application Event)为 Bean 与 Bean 之间传递消息。一个 Bean 处理完了希望其余一个接着处理。这时我们就需要其余的一个 Bean 监听当前 Bean 所发送的事件。</p></blockquote><span id="more"></span><p>Spring 事件使用步骤如下:</p><ol><li>先自定义事件: 需要继承<code>ApplicationEvent</code>;</li><li>定义事件监听者: 使用注解<code>@EventListener</code>或者实现<code>ApplicationListener</code>;</li><li>使用容器对事件进行发布;</li></ol><h2 id="基于注解监听模式的基本用法"><a href="#基于注解监听模式的基本用法" class="headerlink" title="基于注解监听模式的基本用法"></a>基于注解监听模式的基本用法</h2><p>以下用一个每天的定时同步任务为例进行讲解:</p><h3 id="定义同步事件"><a href="#定义同步事件" class="headerlink" title="定义同步事件"></a>定义同步事件</h3><p><code>SyncEvent</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步任务事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SyncEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件监听者"><a href="#事件监听者" class="headerlink" title="事件监听者"></a>事件监听者</h3><p>定义一个 MailHandler.java 在监听到事件后发送邮件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 邮件发送处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(MailService.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSycResult</span><span class="params">(SyncEvent event)</span>  <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;MailHandler接收到同步结果:&#123;&#125;&quot;</span>,event);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;mock send sync data ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>void sendSycResult(SyncEvent event)</code>方法上使用注解<code>@EventListener</code>, 表明<code>sendSycResult</code>方法将会监听<code>SyncEvent</code>事件;</p><p><code>EventListener</code>的源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EventListener &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * classes的别名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AliasFor(&quot;classes&quot;)</span></span><br><span class="line">Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要监听的事件类。</span></span><br><span class="line"><span class="comment"> * 如果该属性只绑定了一个监听类，那使用该注解的方法最多只能有一个参数，并且参数类型需要该属性绑定的监听类相匹配(即参数类型需是监听类或者其父类);</span></span><br><span class="line"><span class="comment"> * 如果该属性绑定了多个监听类，那使用该注解的方法不能带有任何参数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">Class&lt;?&gt;[] classes() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 匹配条件，SpEL表达式；</span></span><br><span class="line"><span class="comment"> * 默认为空，表示总是匹配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">condition</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发布事件"><a href="#发布事件" class="headerlink" title="发布事件"></a>发布事件</h3><p><code>SyncService</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据同步服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(SyncService.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncDayData</span><span class="params">(LocalDate day)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;开始同步&#123;&#125;的数据&quot;</span>, day);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> speed = end - start;</span><br><span class="line">        log.debug(<span class="string">&quot;&#123;&#125;的数据同步完成,耗时&#123;&#125; ms&quot;</span>, day, speed);</span><br><span class="line">        SyncData syncData = SyncData.builder().day(day).speed(speed).data(<span class="keyword">new</span> Object()).build();</span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> SyncEvent(syncData, <span class="string">&quot;mail&quot;</span>));</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">long</span> end2 = System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">&quot;sleep &#123;&#125; ns&quot;</span>, end2 - end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringEventApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SyncService syncService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSyncData</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">syncService.syncDayData(LocalDate.now());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试方法<code>testSyncData()</code>,得到如下结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2018-01-15 16:37:11.387 DEBUG 132812 --- [           main] c.w.s.e.s.SyncService                    : 开始同步2018-01-15的数据</span><br><span class="line">2018-01-15 16:37:12.389 DEBUG 132812 --- [           main] c.w.s.e.s.SyncService                    : 2018-01-15的数据同步完成,耗时1001 ms</span><br><span class="line">2018-01-15 16:37:12.390 DEBUG 132812 --- [           main] c.w.s.e.h.MailHandler                    : MailHandler接收到同步结果:SyncEvent(<span class="built_in">type</span>=mail)</span><br><span class="line">2018-01-15 16:37:13.391 DEBUG 132812 --- [           main] c.w.s.e.h.MailHandler                    : mock send sync data ...</span><br><span class="line">2018-01-15 16:37:16.391 DEBUG 132812 --- [           main] c.w.s.e.s.SyncService                    : sleep 4002 ns</span><br></pre></td></tr></table></figure><p>由测试结果可知：在方法<code>syncDayData()</code>运行到<code>applicationEventPublisher.publishEvent(new SyncEvent(syncData))</code>后就会立即自动调用<code>void sendSycResult(SyncEvent event)</code>方法。</p><h2 id="多个事件监听者"><a href="#多个事件监听者" class="headerlink" title="多个事件监听者"></a>多个事件监听者</h2><p>如果在同步任务完成后，不仅需要发送邮件，还需要对数据进行缓存和消息推送，只需要仿照<code>MailHandler</code>,再建立相应的类。<br><code>CacheHandler</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(CacheHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheSycResult</span><span class="params">(SyncEvent event)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;CacheHandler接收到同步结果:&#123;&#125;&quot;</span>, event.getSource());</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;mock cache sync data ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MqHandler</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(MqHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushSycResult</span><span class="params">(SyncEvent event)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;MqHandler接收到同步结果:&#123;&#125;&quot;</span>, event.getSource());</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;mock push sync data ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行<code>syncDayData()</code>测试方法得到如下结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2018-01-15 16:44:57.280 DEBUG 135208 --- [           main] c.w.s.e.s.SyncService                    : 开始同步2018-01-15的数据</span><br><span class="line">2018-01-15 16:44:58.281 DEBUG 135208 --- [           main] c.w.s.e.s.SyncService                    : 2018-01-15的数据同步完成,耗时1001 ms</span><br><span class="line">2018-01-15 16:44:58.282 DEBUG 135208 --- [           main] c.w.s.e.h.CacheHandler                   : CacheHandler接收到同步结果:SyncData(day=2018-01-15, speed=1001, data=java.lang.Object@3f9270ed)</span><br><span class="line">2018-01-15 16:45:00.282 DEBUG 135208 --- [           main] c.w.s.e.h.CacheHandler                   : mock cache sync data ...</span><br><span class="line">2018-01-15 16:45:00.282 DEBUG 135208 --- [           main] c.w.s.e.h.MailHandler                    : MailHandler接收到同步结果:SyncEvent(<span class="built_in">type</span>=mail)</span><br><span class="line">2018-01-15 16:45:01.283 DEBUG 135208 --- [           main] c.w.s.e.h.MailHandler                    : mock send sync data ...</span><br><span class="line">2018-01-15 16:45:01.283 DEBUG 135208 --- [           main] c.w.s.e.h.MqHandler                      : MqHandler接收到同步结果:SyncData(day=2018-01-15, speed=1001, data=java.lang.Object@3f9270ed)</span><br><span class="line">2018-01-15 16:45:04.283 DEBUG 135208 --- [           main] c.w.s.e.h.MqHandler                      : mock push sync data ...</span><br><span class="line">2018-01-15 16:45:07.283 DEBUG 135208 --- [           main] c.w.s.e.s.SyncService                    : sleep 9002 ns</span><br></pre></td></tr></table></figure><p>由测试结果可以看出，在方法<code>syncDayData()</code>运行到<code>applicationEventPublisher.publishEvent(new SyncEvent(syncData))</code>后就会立即依次调用我们定义的多个监听者。<br>但是如果我们对邮件发送、消息推送、缓存更新的执行顺序由特定的需求怎么办？(经简单测试，在有多个监听者时，默认情况下监听者的执行顺序是安装监听者所在的类名(不是beanName)来执行的)</p><h3 id="使用-Order来指定监听者执行顺序"><a href="#使用-Order来指定监听者执行顺序" class="headerlink" title="使用@Order来指定监听者执行顺序"></a>使用<code>@Order</code>来指定监听者执行顺序</h3><p>查看<code>EventListener</code>的API文档，其中有这样一段描述：</p><blockquote><p>It is also possible to define the order in which listeners for a certain event are to be invoked. To do so, add Spring’s common @Order annotation alongside this event listener annotation.</p></blockquote><p>所以我们可以用<code>@Order</code>来配合<code>@EventListener</code>来指定多个监听者的执行顺序。<br>分别修改<br><code>MailHandler</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSycResult</span><span class="params">(SyncEvent event)</span>  <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CacheHandler</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheSycResult</span><span class="params">(SyncEvent event)</span>  <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MqHandler</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="meta">@Order(3)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushSycResult</span><span class="params">(SyncEvent event)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的代码为我们指定了3个监听者的依次执行顺序为: MailHandler、CacheHandler、MqHandler<br>再次运行<code>syncDayData()</code>测试方法得到如下结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2018-01-15 17:09:34.830 DEBUG 138192 --- [           main] c.w.s.e.s.SyncService                    : 开始同步2018-01-15的数据</span><br><span class="line">2018-01-15 17:09:35.831 DEBUG 138192 --- [           main] c.w.s.e.s.SyncService                    : 2018-01-15的数据同步完成,耗时1001 ms</span><br><span class="line">2018-01-15 17:09:35.832 DEBUG 138192 --- [           main] c.w.s.e.h.MailHandler                    : MailHandler接收到同步结果:SyncEvent(<span class="built_in">type</span>=mail)</span><br><span class="line">2018-01-15 17:09:36.832 DEBUG 138192 --- [           main] c.w.s.e.h.MailHandler                    : mock send sync data ...</span><br><span class="line">2018-01-15 17:09:36.832 DEBUG 138192 --- [           main] c.w.s.e.h.CacheHandler                   : CacheHandler接收到同步结果:SyncData(day=2018-01-15, speed=1001, data=java.lang.Object@129bd55d)</span><br><span class="line">2018-01-15 17:09:38.833 DEBUG 138192 --- [           main] c.w.s.e.h.CacheHandler                   : mock cache sync data ...</span><br><span class="line">2018-01-15 17:09:38.833 DEBUG 138192 --- [           main] c.w.s.e.h.MqHandler                      : MqHandler接收到同步结果:SyncData(day=2018-01-15, speed=1001, data=java.lang.Object@129bd55d)</span><br><span class="line">2018-01-15 17:09:41.833 DEBUG 138192 --- [           main] c.w.s.e.h.MqHandler                      : mock push sync data ...</span><br><span class="line">2018-01-15 17:09:44.834 DEBUG 138192 --- [           main] c.w.s.e.s.SyncService                    : sleep 9003 ns</span><br></pre></td></tr></table></figure><p>测试顺序与设置的顺序一致。</p><h2 id="基于多个监听者的链式调用"><a href="#基于多个监听者的链式调用" class="headerlink" title="基于多个监听者的链式调用"></a>基于多个监听者的链式调用</h2><p>同样是在<code>EventListener</code>的API文档中，有这样一段描述：</p><blockquote><p>Annotated methods may have a non-void return type. When they do, the result of the method invocation is sent as a new event. If the return type is either an array or a collection, each element is sent as a new individual event.</p></blockquote><p>大概意思是说: <code>EventListener</code>注解的方法，可以返回一个非空的类型。并且该方法的返回结果可以作为一个新的事件被发送。如果返回类型是数组或集合，则将每个元素作为新的单独事件发送。<br>我们可以基于此特性，实现多个监听者的链式调用。</p><ol><li>定义 <code>OrderInfo</code>:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderInfo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String customer;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime orderTime;</span><br><span class="line">    <span class="keyword">private</span> Integer emailResultId;</span><br><span class="line">    <span class="keyword">private</span> Integer cacheResultId;</span><br><span class="line">    <span class="keyword">private</span> Integer mqResultId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>订单事件类 <code>OrderEvent</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderEvent</span>  <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String nextListenerType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderEvent</span><span class="params">(Object source, String nextListenerType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.nextListenerType = nextListenerType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>设置订单事件监听者<br><code>MqHandler</code>中,添加:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener(condition = &quot;#event.nextListenerType == &#x27;mq&#x27;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderEvent <span class="title">pushOrderInfo</span><span class="params">(OrderEvent event)</span> </span>&#123;</span><br><span class="line">    log.debug(<span class="string">&quot;MqHandler接收到订单信息:&#123;&#125;&quot;</span>, event);</span><br><span class="line">    ((OrderInfo) event.getSource()).setMqResultId(<span class="number">1</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;mock push order event ...&quot;</span>);</span><br><span class="line">    event.setNextListenerType(<span class="string">&quot;cache&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> event;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><code>CacheHandler</code>中,添加:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener(condition = &quot;event.nextListenerType == &#x27;cache&#x27;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderEvent <span class="title">cacheOrderInfo</span><span class="params">(OrderEvent event)</span> </span>&#123;</span><br><span class="line">    log.debug(<span class="string">&quot;CacheHandler接收到订单信息:&#123;&#125;&quot;</span>, event.getSource());</span><br><span class="line">    ((OrderInfo) event.getSource()).setCacheResultId(<span class="number">2</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;mock cache order info ...&quot;</span>);</span><br><span class="line">    event.setNextListenerType(<span class="string">&quot;mail&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> event;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>MailHandler</code>中,添加:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener(condition = &quot;#event.nextListenerType == &#x27;mail&#x27;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderEvent <span class="title">sendOrderInfo</span><span class="params">(OrderEvent event)</span> </span>&#123;</span><br><span class="line">    log.debug(<span class="string">&quot;MailHandler接收到订单信息:&#123;&#125;&quot;</span>, event.getSource());</span><br><span class="line">    ((OrderInfo) event.getSource()).setMqResultId(<span class="number">3</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;mock send order event ...&quot;</span>);</span><br><span class="line">    event.setNextListenerType(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> event;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上各个<code>EventListener</code>中的<code>condition</code>表示，只有当对应的事件中对应的自定义属性<code>nextListenerType</code>等于对应值时，才会执行该方法。</p><ol start="4"><li>设置事件发布者:<br><code>OrderService</code>:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(OrderService.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrder</span><span class="params">(String customer, LocalDateTime time)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        OrderInfo order = OrderInfo.builder().orderTime(time).customer(customer).build();</span><br><span class="line">        log.debug(<span class="string">&quot;保存订单信息:&#123;&#125;&quot;</span>, order);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> OrderEvent(order, <span class="string">&quot;mq&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>测试方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OrderService orderService;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrderInfo</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">orderService.saveOrder(<span class="string">&quot;test&quot;</span>, LocalDateTime.now());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行后得到如下结果：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2018-01-15 18:51:46.677 DEBUG 135904 --- [           main] c.w.s.e.s.OrderService                   : 保存订单信息:OrderInfo(customer=<span class="built_in">test</span>, orderTime=2018-01-15T18:51:46.674, emailResultId=null, cacheResultId=null, mqResultId=null)</span><br><span class="line">2018-01-15 18:51:49.702 DEBUG 135904 --- [           main] c.w.s.e.h.MqHandler                      : MqHandler接收到订单信息:OrderEvent(nextListenerType=mq)</span><br><span class="line">2018-01-15 18:51:49.702 DEBUG 135904 --- [           main] c.w.s.e.h.MqHandler                      : mock push order event ...</span><br><span class="line">2018-01-15 18:51:49.703 DEBUG 135904 --- [           main] c.w.s.e.h.CacheHandler                   : CacheHandler接收到订单信息:OrderInfo(customer=<span class="built_in">test</span>, orderTime=2018-01-15T18:51:46.674, emailResultId=null, cacheResultId=null, mqResultId=1)</span><br><span class="line">2018-01-15 18:51:49.703 DEBUG 135904 --- [           main] c.w.s.e.h.CacheHandler                   : mock cache order info ...</span><br><span class="line">2018-01-15 18:51:49.703 DEBUG 135904 --- [           main] c.w.s.e.h.MailHandler                    : MailHandler接收到订单信息:OrderInfo(customer=<span class="built_in">test</span>, orderTime=2018-01-15T18:51:46.674, emailResultId=null, cacheResultId=2, mqResultId=1)</span><br><span class="line">2018-01-15 18:51:49.703 DEBUG 135904 --- [           main] c.w.s.e.h.MailHandler                    : mock send order event ...</span><br></pre></td></tr></table></figure></li><li>结果分析：<br><code>saveOrder()</code>发布的事件中<code>event.nextListenerType</code> = ‘mq’,只有<code>pushOrderInfo()</code>方法符合条件；<br>执行完<code>pushOrderInfo()</code>后，<code>event.nextListenerType</code>变为’cache’,只有<code>cacheOrderInfo()</code>方法符合条件；<br>执行完<code>cacheOrderInfo()</code>后,<code>event.nextListenerType</code>变为’mail’,只有<code>sendOrderInfo()</code>方法符合条件；<br>执行完<code>sendOrderInfo()</code>后,<code>event.nextListenerType</code>变为null,无符合条件的事件监听者，结束事件监听；</li></ol><h2 id="基于实现ApplicationListener的事件监听者"><a href="#基于实现ApplicationListener的事件监听者" class="headerlink" title="基于实现ApplicationListener的事件监听者"></a>基于实现<code>ApplicationListener</code>的事件监听者</h2><p>参考<a href="%E5%AE%9E%E7%8E%B0ApplicationListener">Spring Application Event Example</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> ApplicationEvent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有了Closeable为什么还要定义AutoCloseable</title>
      <link href="2017/09/%E6%9C%89%E4%BA%86closeable%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E5%AE%9A%E4%B9%89autocloseable.html"/>
      <url>2017/09/%E6%9C%89%E4%BA%86closeable%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E5%AE%9A%E4%B9%89autocloseable.html</url>
      
        <content type="html"><![CDATA[<h2 id="从try-with-resources语法块说起"><a href="#从try-with-resources语法块说起" class="headerlink" title="从try-with-resources语法块说起"></a>从<code>try-with-resources</code>语法块说起</h2><p>我们知道java7中引入了新的语法块<code>try-with-resources</code>:实现了<code>java.lang.AutoCloseable</code>的对象都可以作为<strong>资源</strong>，在<code>try</code>后面的括号类声明实例化，在后面的<code>&#123;...&#125;</code>语句块执行完后被自动关闭(<code>close()</code>方法被自动调用)。例如：在java7前，我们需要这样定义语句:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String path,<span class="keyword">byte</span>[] data)</span></span>&#123;</span><br><span class="line">    OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        os = <span class="keyword">new</span> FileOutputStream(path);</span><br><span class="line">        os.write(data);</span><br><span class="line">        os.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (os!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            os.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在java7后，可以变成这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String path,<span class="keyword">byte</span>[] data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> ( OutputStream os  = <span class="keyword">new</span> FileOutputStream(path))&#123;</span><br><span class="line">        os.write(data);</span><br><span class="line">        os.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Closeable与AutoCloseable的关系与区别"><a href="#Closeable与AutoCloseable的关系与区别" class="headerlink" title="Closeable与AutoCloseable的关系与区别"></a><code>Closeable</code>与<code>AutoCloseable</code>的关系与区别</h2><p><code>AutoCloseable</code>的源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Closeable</code>的源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Closeable</span> <span class="keyword">extends</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上可知<code>Closeable</code>在jdk1.5中就定义了，而<code>AutoCloseable</code>在jdk1.7才被引入，并且<code>Closeable</code>继承了<code>AutoCloseable</code>。为什么要这样设计呢？答案很简单，仔细查看源码就可以知道原因:<br>因为<code>Closeable</code>的<code>close()</code>方法只会抛出<code>IOException</code>异常，而<code>AutoCloseable</code>的<code>close()</code>方法抛出的是<code>Exception</code>异常。如此一来<code>try-with-resources</code>的适用性就更大了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://stackoverflow.com/questions/19572537/why-is-autocloseable-the-base-interface-for-closeable-and-not-vice-versa">https://stackoverflow.com/questions/19572537/why-is-autocloseable-the-base-interface-for-closeable-and-not-vice-versa</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 远程调试spring boot项目</title>
      <link href="2017/09/idea-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95spring-boot%E9%A1%B9%E7%9B%AE.html"/>
      <url>2017/09/idea-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95spring-boot%E9%A1%B9%E7%9B%AE.html</url>
      
        <content type="html"><![CDATA[<h2 id="IDEA-远程调试spring-boot项目"><a href="#IDEA-远程调试spring-boot项目" class="headerlink" title="IDEA 远程调试spring boot项目"></a>IDEA 远程调试spring boot项目</h2><h3 id="1-Dokcer容器中"><a href="#1-Dokcer容器中" class="headerlink" title="1. Dokcer容器中"></a>1. Dokcer容器中</h3><h4 id="在Dockefile中配置-方法1"><a href="#在Dockefile中配置-方法1" class="headerlink" title="在Dockefile中配置(方法1)"></a>在Dockefile中配置(方法1)</h4><p>在Dockerfile文件中加入参数<code>-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n</code>,<br>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ENV JAVA_OPTS=<span class="string">&quot;-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n&quot;</span></span><br><span class="line">ENTRYPOINT [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java <span class="variable">$JAVA_OPTS</span> -Djava.security.egd=file:/dev/./urandom -jar /app.jar&quot;</span> ]</span><br></pre></td></tr></table></figure><p>启动docker命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8000:8000 -p 4000:4000 -t imageName</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>-p 8000:8000</code> 表示把在Dockerfile中定义的远程调试端口8000映射到服务器端口8000中；</li><li><code>-p 4000:4000</code> 表示把在应用程序的启动端口4000映射到服务器端口4000中；</li></ul><h4 id="启动命令中配置-方法2"><a href="#启动命令中配置-方法2" class="headerlink" title="启动命令中配置(方法2)"></a>启动命令中配置(方法2)</h4><p>在启动命令中加上参数<code>-e &quot;JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=y&quot;</code>，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e <span class="string">&quot;JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=y&quot;</span> -p 8000:8000 -p 4000:4000 -t imageName</span><br></pre></td></tr></table></figure><h3 id="2-以嵌入式web容器运行时"><a href="#2-以嵌入式web容器运行时" class="headerlink" title="2. 以嵌入式web容器运行时"></a>2. 以嵌入式web容器运行时</h3><p>在启动命令中加上参数<code>-e &quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000</code>，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=8000 -jar application.jar</span><br></pre></td></tr></table></figure><h3 id="3-以mvn-spring-boot-run运行时"><a href="#3-以mvn-spring-boot-run运行时" class="headerlink" title="3. 以mvn spring-boot:run运行时"></a>3. 以<code>mvn spring-boot:run</code>运行时</h3><p>在pom.xml中加入如下插件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">            -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000</span><br><span class="line">        <span class="tag">&lt;/<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://stackoverflow.com/questions/31070671/debug-spring-boot-in-docker">debug spring-boot in docker</a></li><li><a href="https://stacktrace.tech/2017-03-21/spring-boot-idea-remote-debug/">spring boot + IDEA 远程调试</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/examples/run-debug.html">Spring Boot Maven Plugin - Debug the application</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
          <category> 远程调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 远程调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot + IDEA 远程调试</title>
      <link href="2017/09/springboot-idea-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95.html"/>
      <url>2017/09/springboot-idea-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95.html</url>
      
        <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>若想调试远端web容器内部的应用，需要接入web容器的jvm，以Tomcat为例，需修改web容器的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// bin\startup.bat（.sh）文件，在里面添加</span><br><span class="line"> </span><br><span class="line">// windows</span><br><span class="line"><span class="built_in">set</span> CATALINA_OPTS=<span class="string">&quot;-agentlib:jdwp=transport=dt_socket,address=8888（自定义调试端口）,server=y,suspend=n %CATALINA_OPTS%&quot;</span></span><br><span class="line"> </span><br><span class="line">// linux</span><br><span class="line"><span class="built_in">export</span> CATALINA_OPTS=<span class="string">&quot;-agentlib:jdwp=transport=dt_socket,address= 8888（自定义调试端口）,server=y,suspend=n <span class="variable">$CATALINA_OPTS</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若是使用了spring boot并将工程打成了可执行JAR包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 在使用java指令启动程序时需要附加额外的参数以开启外部调试，如下</span><br><span class="line">-Xdebug -Xrunjdwp:transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=8888（自定义调试端口）</span><br><span class="line"> </span><br><span class="line">// 完整的启动指令是类似下面酱的</span><br><span class="line">java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=8888（自定义调试端口） -jar application.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="IDEA连接远端调试"><a href="#IDEA连接远端调试" class="headerlink" title="IDEA连接远端调试"></a>IDEA连接远端调试</h2><p><img src="https://file.wf2311.com/2017/09/19/15/WechatIMG2478.jpeg"><br><img src="https://file.wf2311.com/2017/09/19/15/WX20170321-035338@2x.png"><br><img src="https://file.wf2311.com/2017/09/19/15/WX20170321-035510@2x.png"><br>填写远端JMV所在服务器IP和调试端口号，保存即可：<br><img src="https://file.wf2311.com/2017/09/19/15/WX20170321-035733@2x.png"><br>连接远端JVM启动调试：<br><img src="https://file.wf2311.com/2017/09/19/14/WX20170321-040105@2x.png"><br>如若连接成功，调试控制台将输出以下内容，如果没成功，请自行检查服务器防火墙以及网络<br><img src="https://file.wf2311.com/2017/09/19/15/WX20170321-040237@2x.png"><br>接下来的操作就和在本地调试一样了，打断点，远端JVM会通过网络同步调试信息，和在本地没什么两样，要注意调试的时候和本地一样都是会暂停JVM继续往下执行的。</p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
          <category> 远程调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 远程调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的枚举类使用技巧</title>
      <link href="2017/08/java%E7%9A%84%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html"/>
      <url>2017/08/java%E7%9A%84%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html</url>
      
        <content type="html"><![CDATA[<h2 id="枚举接口"><a href="#枚举接口" class="headerlink" title="枚举接口"></a>枚举接口</h2><p>在web开发中我们常常会定义一些enum来表示常量，比如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">BlogType</span> </span>&#123;</span><br><span class="line">    BLOG(<span class="number">1</span>, <span class="string">&quot;原创博文&quot;</span>),</span><br><span class="line">    REPRINT(<span class="number">2</span>, <span class="string">&quot;转载文章&quot;</span>),</span><br><span class="line">    QUESTION(<span class="number">3</span>, <span class="string">&quot;问答&quot;</span>),</span><br><span class="line">    VOTE(<span class="number">4</span>, <span class="string">&quot;投票&quot;</span>),</span><br><span class="line">    SUBJECT(<span class="number">5</span>, <span class="string">&quot;专栏&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    BlogType(Integer code, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">BlogStatus</span> </span>&#123;</span><br><span class="line">    PRIVATE(<span class="number">1</span>, <span class="string">&quot;自己可见&quot;</span>),</span><br><span class="line">    FRIEND(<span class="number">2</span>, <span class="string">&quot;好友可见&quot;</span>),</span><br><span class="line">    ONLINE(<span class="number">3</span>, <span class="string">&quot;登陆用户可见&quot;</span>),</span><br><span class="line">    PUBLISH(<span class="number">4</span>, <span class="string">&quot;公开&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    BlogStatus(Integer code, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出它们的结构一样，都有<code>code</code>和<code>name</code>这两个属性，以及对应的<code>getter</code>方法，因此可以定义一个如下的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Common</span>&lt;<span class="title">C</span>, <span class="title">N</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">C <span class="title">getCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">N <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有如上面的常量枚举类都可以实现该接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">BlogType</span> <span class="keyword">implements</span> <span class="title">Common</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">BlogStatus</span> <span class="keyword">implements</span> <span class="title">Common</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="公用静态方法"><a href="#公用静态方法" class="headerlink" title="公用静态方法"></a>公用静态方法</h2><p>我们可以在在<code>Common</code>接口中定义一个如下的静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;E extends Enum&lt;E&gt; &amp; Common, C&gt; <span class="function">E <span class="title">getByCode</span><span class="params">(Class&lt;E&gt; clazz, C code)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(clazz.getEnumConstants())</span><br><span class="line">            .filter(t -&gt; t.getCode().equals(code))</span><br><span class="line">            .findFirst().orElse(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用此方法可以根据code来查找指定的<code>Common</code>实现类中的值，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Assert.assertEquals(BlogType.QUESTION, Common.getByCode(BlogType.class, BlogType.QUESTION.getCode()));</span><br><span class="line">Assert.assertEquals(BlogStatus.PUBLISH, Common.getByCode(BlogType.class, BlogStatus.PUBLISH.getCode()));</span><br></pre></td></tr></table></figure><h2 id="自定义序列化"><a href="#自定义序列化" class="headerlink" title="自定义序列化"></a>自定义序列化</h2><p>当我们定义如下的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consts&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResult <span class="title">consts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApiResult result = <span class="keyword">new</span> ApiResult();</span><br><span class="line">    Map&lt;String, Object&gt; consts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    consts.put(<span class="string">&quot;blogType&quot;</span>, BlogType.values());</span><br><span class="line">    consts.put(<span class="string">&quot;blogStatus&quot;</span>, BlogStatus.values());</span><br><span class="line">    result.setData(consts);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过请求，得到的结果格式是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;blogStatus&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;PRIVATE&quot;</span>,</span><br><span class="line">      <span class="string">&quot;FRIEND&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ONLINE&quot;</span>,</span><br><span class="line">      <span class="string">&quot;PUBLISH&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;blogType&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;BLOG&quot;</span>,</span><br><span class="line">      <span class="string">&quot;REPRINT&quot;</span>,</span><br><span class="line">      <span class="string">&quot;QUESTION&quot;</span>,</span><br><span class="line">      <span class="string">&quot;VOTE&quot;</span>,</span><br><span class="line">      <span class="string">&quot;SUBJECT&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而我们期待的到是格式是包含<code>code</code>和<code>name</code>的键值对的形式，而不是以上的形式。通过在<code>Common</code>接口中添加以上方法可以实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonValue</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Map&lt;C, N&gt; <span class="title">toMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;C, N&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">    map.put(getCode(), getName());</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时再次通过页面请求，得到的结果将如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;blogStatus&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;1&quot;</span>: <span class="string">&quot;自己可见&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;2&quot;</span>: <span class="string">&quot;好友可见&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;3&quot;</span>: <span class="string">&quot;登陆用户可见&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;4&quot;</span>: <span class="string">&quot;公开&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;blogType&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;1&quot;</span>: <span class="string">&quot;原创博文&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;2&quot;</span>: <span class="string">&quot;转载文章&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;3&quot;</span>: <span class="string">&quot;问答&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;4&quot;</span>: <span class="string">&quot;投票&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;5&quot;</span>: <span class="string">&quot;专栏&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，如果想通过使用<code>fastjson</code>的<code>JSON.toJSONString()</code>也能得到如上格式的结果，可以让<code>Common</code>继承<code>com.alibaba.fastjson.JSONAware</code>,并在<code>Common</code>中实现<code>JSONAware</code>的<code>toJSONString</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> String <span class="title">toJSONString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(toMap());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下代码将会通过:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.assertEquals(<span class="string">&quot;&#123;2:\&quot;转载文章\&quot;&#125;&quot;</span>, JSON.toJSONString(BlogType.REPRINT));</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONAware;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Enums</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Common</span>&lt;<span class="title">C</span>, <span class="title">N</span>&gt; <span class="keyword">extends</span> <span class="title">JSONAware</span> </span>&#123;</span><br><span class="line">        <span class="function">C <span class="title">getCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">N <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt; &amp; Common, C&gt; <span class="function">E <span class="title">getByCode</span><span class="params">(Class&lt;E&gt; clazz, C code)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.stream(clazz.getEnumConstants())</span><br><span class="line">                    .filter(t -&gt; t.getCode().equals(code))</span><br><span class="line">                    .findFirst().orElse(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@JsonValue</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> Map&lt;C, N&gt; <span class="title">toMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Map&lt;C, N&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">            map.put(getCode(), getName());</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> String <span class="title">toJSONString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> JSON.toJSONString(toMap());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">BlogType</span> <span class="keyword">implements</span> <span class="title">Common</span> </span>&#123;</span><br><span class="line">        BLOG(<span class="number">1</span>, <span class="string">&quot;原创博文&quot;</span>),</span><br><span class="line">        REPRINT(<span class="number">2</span>, <span class="string">&quot;转载文章&quot;</span>),</span><br><span class="line">        QUESTION(<span class="number">3</span>, <span class="string">&quot;问答&quot;</span>),</span><br><span class="line">        VOTE(<span class="number">4</span>, <span class="string">&quot;投票&quot;</span>),</span><br><span class="line">        SUBJECT(<span class="number">5</span>, <span class="string">&quot;专栏&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Integer code;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        BlogType(Integer code, String name) &#123;</span><br><span class="line">            <span class="keyword">this</span>.code = code;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">BlogStatus</span> <span class="keyword">implements</span> <span class="title">Common</span> </span>&#123;</span><br><span class="line">        PRIVATE(<span class="number">1</span>, <span class="string">&quot;自己可见&quot;</span>),</span><br><span class="line">        FRIEND(<span class="number">2</span>, <span class="string">&quot;好友可见&quot;</span>),</span><br><span class="line">        ONLINE(<span class="number">3</span>, <span class="string">&quot;登陆用户可见&quot;</span>),</span><br><span class="line">        PUBLISH(<span class="number">4</span>, <span class="string">&quot;公开&quot;</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        BlogStatus(Integer code, String name) &#123;</span><br><span class="line">            <span class="keyword">this</span>.code = code;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven命令备忘</title>
      <link href="2017/07/maven%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98.html"/>
      <url>2017/07/maven%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98.html</url>
      
        <content type="html"><![CDATA[<ul><li>更新父模块到指定版本号</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn versions:<span class="built_in">set</span> -DnewVersion=1.0.1-SNAPSHOT</span><br></pre></td></tr></table></figure><ul><li>更新子模块版本到与模块相同</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -N versions:update-child-modules</span><br></pre></td></tr></table></figure><ul><li>发布版本到指定本地仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy -DskipTests -DaltDeploymentRepository=wf2311-mvn-repo::default::file:D:/Projects/open-source/maven-repo/repository/</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li>跳过测试</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-DskipTests</span><br></pre></td></tr></table></figure><ul><li>跳过gpg签名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-DskipGPG</span><br></pre></td></tr></table></figure><ul><li>查看执行过程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-X</span><br></pre></td></tr></table></figure><ul><li>把jar包加入本地仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=D:\thrift-0.9.2.jar -DgroupId=org.apache.thrift -DartifactId=libthrift -Dversion=0.9.2 -Dpackaging=jar </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中使用Thymeleaf模板在找不到对于模板的解决方法</title>
      <link href="2017/07/springboot%E4%B8%AD%E4%BD%BF%E7%94%A8thymeleaf%E6%A8%A1%E6%9D%BF%E5%9C%A8%E6%89%BE%E4%B8%8D%E5%88%B0%E5%AF%B9%E4%BA%8E%E6%A8%A1%E6%9D%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html"/>
      <url>2017/07/springboot%E4%B8%AD%E4%BD%BF%E7%94%A8thymeleaf%E6%A8%A1%E6%9D%BF%E5%9C%A8%E6%89%BE%E4%B8%8D%E5%88%B0%E5%AF%B9%E4%BA%8E%E6%A8%A1%E6%9D%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>SpringBoot中使用thymeleaf模板，在IDEA中以main方法运行可以正常显示页面，但在打包之后就会提示找不到模板页面的错误信息:</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">[THYMELEAF][http-nio-4000-exec-1] Exception processing template <span class="string">&quot;/blog/index&quot;</span>: Error resolving template <span class="string">&quot;/blog/index&quot;</span>, template might not exist or might not be accessible by any of the configured Template Resolvers</span><br><span class="line">org.thymeleaf.exceptions.TemplateInputException: Error resolving template <span class="string">&quot;/blog/index&quot;</span>, template might not exist or might not be accessible by any of the configured Template Resolvers</span><br><span class="line">        at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:870) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) [thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) [thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:353) [thymeleaf-spring4-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:191) [thymeleaf-spring4-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:59) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.AbstractProtocol<span class="variable">$ConnectionHandler</span>.process(AbstractProtocol.java:868) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.util.net.NioEndpoint<span class="variable">$SocketProcessor</span>.doRun(NioEndpoint.java:1455) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_74]</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:617) [?:1.8.0_74]</span><br><span class="line">        at org.apache.tomcat.util.threads.TaskThread<span class="variable">$WrappingRunnable</span>.run(TaskThread.java:61) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745) [?:1.8.0_74]</span><br><span class="line">Servlet.service() <span class="keyword">for</span> servlet [dispatcherServlet] <span class="keyword">in</span> context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template <span class="string">&quot;/blog/index&quot;</span>, template might not exist or might not be accessible by any of the</span><br><span class="line"> configured Template Resolvers] with root cause</span><br><span class="line">org.thymeleaf.exceptions.TemplateInputException: Error resolving template <span class="string">&quot;/blog/index&quot;</span>, template might not exist or might not be accessible by any of the configured Template Resolvers</span><br><span class="line">        at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:870) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:353) ~[thymeleaf-spring4-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:191) ~[thymeleaf-spring4-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:59) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.AbstractProtocol<span class="variable">$ConnectionHandler</span>.process(AbstractProtocol.java:868) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.util.net.NioEndpoint<span class="variable">$SocketProcessor</span>.doRun(NioEndpoint.java:1455) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_74]</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:617) [?:1.8.0_74]</span><br><span class="line">        at org.apache.tomcat.util.threads.TaskThread<span class="variable">$WrappingRunnable</span>.run(TaskThread.java:61) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745) [?:1.8.0_74]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>参考<a href="https://stackoverflow.com/questions/26493831/spring-boot-thymeleaf-not-resolving-fragments-after-packaging#answer-26503954" title="stackflow">stackflow</a> 类似的问题</p><blockquote><p>You don’t need the leading / on the view name, i.e. you should return fragments :: nodeList rather than /fragments :: nodeList. Having made this change Thymeleaf should be able to find the template when run from your IDE or from a jar file.<br>If you’re interested, here’s what’s happening under the hood:<br>The view name is used to search for a resource on the classpath. fragments :: nodeList means that the resource name is /templates/fragments.html and /fragments :: nodeList means that the resource name is /templates//fragments.html (note the double slash). When you’re running in your IDE the resource is available straight off the filesystem and the double slash doesn’t cause a problem. When you’re running from a jar file the resource is nested within that jar and the double slash prevents it from being found. I don’t fully understand why there’s this difference in behaviour and it is rather unfortunate. I’ve opened an issue so that we (the Spring Boot team) can see if there’s anything we can do to make the behaviour consistent.</p></blockquote><p>简单来说就是在springboot配置文件里的<code>spring.thymeleaf.prefix=classpath:/templates/</code>的与返回页面的视图设置<code>mav.setViewName(&quot;/blog/write&quot;);</code> 在组成url路径时会构成一个双斜杠<code>//</code>，在IDEA中运行时是可以被识别的，但在程序打包运行之后就不能被识别了，所以会出现这个问题。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>根据上面的错误原因分析，目前的解决办法就是让模板的路径中不会出现双斜杠<code>//</code>，或者支持双斜杠<code>//</code>路径(目前已经有人在jira中提出了该<a href="https://jira.spring.io/browse/SPR-15596" title="bug">bug</a> 期待在之后的版本中能狗支持双斜杠<code>//</code>路径)</p><ol><li>去掉返回视图页面最前面的斜杠：<br> <code>mav.setViewName(&quot;/blog/write&quot;);</code><br> 改为<br> <code>mav.setViewName(&quot;blog/write&quot;);</code></li><li>或者在配置文件里去掉最后的斜杠：<br> <code>spring.thymeleaf.prefix=classpath:/templates/</code><br> 改为<br> <code>spring.thymeleaf.prefix=classpath:/templates</code><br> 同时需要修改thymeleaf模板文件中的相关内容，比如<br> <code>layout:decorate=&quot;~&#123;blog/common/common&#125;</code><br> 此时应变为<br> <code>layout:decorate=&quot;~&#123;/blog/common/common&#125;</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令备忘</title>
      <link href="2017/07/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98.html"/>
      <url>2017/07/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98.html</url>
      
        <content type="html"><![CDATA[<h2 id="克隆远程制定分支到本地"><a href="#克隆远程制定分支到本地" class="headerlink" title="克隆远程制定分支到本地"></a>克隆远程制定分支到本地</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b &lt;branch&gt; &lt;remote_repo&gt; <span class="comment">## branch为分支名，remote_repo为远程仓库</span></span><br></pre></td></tr></table></figure><h3 id="强制覆盖本地文件"><a href="#强制覆盖本地文件" class="headerlink" title="强制覆盖本地文件"></a>强制覆盖本地文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add a.file b.fle</span><br><span class="line">git commit -m <span class="string">&quot;备注&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="标签相关"><a href="#标签相关" class="headerlink" title="标签相关"></a>标签相关</h2><h3 id="切换到指定分支"><a href="#切换到指定分支" class="headerlink" title="切换到指定分支"></a>切换到指定分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch&gt;</span><br></pre></td></tr></table></figure><h3 id="检出指定分支"><a href="#检出指定分支" class="headerlink" title="检出指定分支"></a>检出指定分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout tags/&lt;tag_name&gt; -b &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><h3 id="新建标签"><a href="#新建标签" class="headerlink" title="新建标签"></a>新建标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tagName&gt;</span><br></pre></td></tr></table></figure><h3 id="查看所有标签"><a href="#查看所有标签" class="headerlink" title="查看所有标签"></a>查看所有标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="统计相关"><a href="#统计相关" class="headerlink" title="统计相关"></a>统计相关</h2><h3 id="查看git上个人代码量"><a href="#查看git上个人代码量" class="headerlink" title="查看git上个人代码量"></a>查看git上个人代码量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --author=<span class="string">&quot;&lt;username&gt;&quot;</span> --pretty=tformat: --numstat | awk <span class="string">&#x27;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#x27;</span> -</span><br></pre></td></tr></table></figure><h3 id="统计每个人的增删行数"><a href="#统计每个人的增删行数" class="headerlink" title="统计每个人的增删行数"></a>统计每个人的增删行数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --format=<span class="string">&#x27;%aN&#x27;</span> | sort -u | <span class="keyword">while</span> <span class="built_in">read</span> name; <span class="keyword">do</span> <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$name</span>\t&quot;</span>; git <span class="built_in">log</span> --author=<span class="string">&quot;<span class="variable">$name</span>&quot;</span> --pretty=tformat: --numstat | awk <span class="string">&#x27;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#x27;</span> -; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="查看仓库提交者排名前-5"><a href="#查看仓库提交者排名前-5" class="headerlink" title="查看仓库提交者排名前 5"></a>查看仓库提交者排名前 5</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=<span class="string">&#x27;%aN&#x27;</span> | sort | uniq -c | sort -k1 -n -r | head -n 5</span><br></pre></td></tr></table></figure><h3 id="贡献者统计"><a href="#贡献者统计" class="headerlink" title="贡献者统计"></a>贡献者统计</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=<span class="string">&#x27;%aN&#x27;</span> | sort -u | wc -l</span><br></pre></td></tr></table></figure><h3 id="提交数统计"><a href="#提交数统计" class="headerlink" title="提交数统计"></a>提交数统计</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline | wc -l</span><br></pre></td></tr></table></figure><h3 id="统计项目某个某个时间段的行数"><a href="#统计项目某个某个时间段的行数" class="headerlink" title="统计项目某个某个时间段的行数"></a>统计项目某个某个时间段的行数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --author=<span class="string">&quot;<span class="subst">$(git config --get user.name)</span>&quot;</span>  --before=<span class="string">&#x27;2018-12-31 23:59:59&#x27;</span> --after=<span class="string">&#x27;2018-01-01 00:00:00&#x27;</span> --pretty=tformat: --numstat | awk <span class="string">&#x27;&#123; add += $1 ; subs += $2 ; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s removed lines : %s total lines: %s\n&quot;,add,subs,loc &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://rzrobert.github.io/2017/02/04/git%E7%BB%9F%E8%AE%A1%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%90%84%E6%88%90%E5%91%98%E4%BB%A3%E7%A0%81%E9%87%8F/">git统计项目中各成员代码量</a></li><li><a href="https://liuyueyi.github.io/hexblog/2019/01/27/190127-Git%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0%E7%BB%9F%E8%AE%A1/">https://liuyueyi.github.io/hexblog/2019/01/27/190127-Git%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0%E7%BB%9F%E8%AE%A1/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HttpServletRequest常用获取URL的方法</title>
      <link href="2017/07/httpservletrequest%E5%B8%B8%E7%94%A8%E8%8E%B7%E5%8F%96url%E7%9A%84%E6%96%B9%E6%B3%95.html"/>
      <url>2017/07/httpservletrequest%E5%B8%B8%E7%94%A8%E8%8E%B7%E5%8F%96url%E7%9A%84%E6%96%B9%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<ol><li><code>request.getRequestURL()</code><br>返回的是完整的url，包括Http协议，端口号，servlet名字和映射路径，但它不包含请求参数。  </li><li><code>request.getRequestURI()</code><br>得到的是request URL的部分值，并且web容器没有decode过的  </li><li><code>request.getContextPath()</code><br>返回 the context of the request.  </li><li><code>request.getServletPath()</code><br>返回调用servlet的部分url.  </li><li><code>request.getQueryString() </code><br>返回url路径后面的查询字符串  </li></ol><p>示例：<br>当前url：<a href="http://localhost:8080/CarsiLogCenter_new/idpstat.jsp?action=idp.sptopn">http://localhost:8080/CarsiLogCenter_new/idpstat.jsp?action=idp.sptopn</a></p><ul><li><code>request.getRequestURL()</code>: <code>http://localhost:8080/CarsiLogCenter_new/idpstat.jsp</code></li><li><code>request.getRequestURI()</code>: <code>/CarsiLogCenter_new/idpstat.jsp</code></li><li><code>request.getContextPath()</code>:<code>/CarsiLogCenter_new</code></li><li><code>request.getServletPath()</code>: <code>/idpstat.jsp</code></li><li><code>request.getQueryString()</code>: <code>action=idp.sptopn</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Servlet </tag>
            
            <tag> HttpServletRequest </tag>
            
            <tag> SpringMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Thymeleaf变量给onclick属性赋值</title>
      <link href="2017/07/%E4%BD%BF%E7%94%A8thymeleaf%E5%8F%98%E9%87%8F%E7%BB%99onclick%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC.html"/>
      <url>2017/07/%E4%BD%BF%E7%94%A8thymeleaf%E5%8F%98%E9%87%8F%E7%BB%99onclick%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC.html</url>
      
        <content type="html"><![CDATA[<p>在使用thymeleaf渲染页面时，遇到如下情况：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;submit(&#x27;publish&#x27;);&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>submit</code>函数的参数会根据后端参数的不同而动态改变，Google搜索到了一些类似问题，记录一下解决方法。</p><p>已经测试可用的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">th:onclick=&quot;&#x27;alert(\&#x27;&#x27; + $&#123;myVar&#125; + &#x27;\&#x27;);&#x27;&quot;</span><br></pre></td></tr></table></figure><p>还未测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">th:onclick</span>=<span class="string">&quot;&#x27;javascript:upload(&#x27; + $&#123;gallery&#125; + &#x27;)&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">th:onclick=&quot;|upload(&#x27;$&#123;command[&#x27;class&#x27;].simpleName&#125;&#x27;, &#x27;$&#123;gallery&#125;&#x27;)|&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:style</span>=<span class="string">&quot;&#x27;background:url(&#x27; + @&#123;/&lt;path-to-image&gt;&#125; + &#x27;);&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 优化之 index merge(索引合并)</title>
      <link href="2017/07/mysql-%E4%BC%98%E5%8C%96%E4%B9%8B-index-merge-%E7%B4%A2%E5%BC%95%E5%90%88%E5%B9%B6.html"/>
      <url>2017/07/mysql-%E4%BC%98%E5%8C%96%E4%B9%8B-index-merge-%E7%B4%A2%E5%BC%95%E5%90%88%E5%B9%B6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>深入理解 index merge 是使用索引进行优化的重要基础之一。理解了 index merge 技术，我们才知道应该如何在表上建立索引。</p></blockquote><span id="more"></span><h2 id="1-为什么会有index-merge"><a href="#1-为什么会有index-merge" class="headerlink" title="1.为什么会有index merge"></a>1.为什么会有index merge</h2><p>我们的 where 中可能有多个条件(或者join)涉及到多个字段，它们之间进行 AND 或者 OR，那么此时就有可能会使用到 index merge 技术。index merge 技术如果简单的说，其实就是：对多个索引分别进行条件扫描，然后将它们各自的结果进行合并(intersect/union)。</p><p>MySQL5.0之前，一个表一次只能使用一个索引，无法同时使用多个索引分别进行条件扫描。但是从5.1开始，引入了 index merge 优化技术，对同一个表可以使用多个索引分别进行条件扫描。</p><p>相关文档：<a href="http://dev.mysql.com/doc/refman/5.6/en/index-merge-optimization.html">http://dev.mysql.com/doc/refman/5.6/en/index-merge-optimization.html</a> (注意该文档中说的有几处错误)</p><p>The Index Merge method is used to retrieve rows with several range scans and to merge their results into one. The merge can produce unions, intersections, or unions-of-intersections of its underlying scans. This access method merges index scans from a single table; it does not merge scans across multiple tables.</p><p>In EXPLAIN output, the Index Merge method appears as index_merge in the type column. In this case, the key column contains a list of indexes used, and key_len contains a list of the longest key parts for those indexes.</p><p>index merge: 同一个表的多个索引的范围扫描可以对结果进行合并，合并方式分为三种：union, intersection, 以及它们的组合(先内部intersect然后在外面union)。</p><p>官方文档给出了四个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_name <span class="keyword">WHERE</span> key1 <span class="operator">=</span> <span class="number">10</span> <span class="keyword">OR</span> key2 <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_name <span class="keyword">WHERE</span> (key1 <span class="operator">=</span> <span class="number">10</span> <span class="keyword">OR</span> key2 <span class="operator">=</span> <span class="number">20</span>) <span class="keyword">AND</span> non_key<span class="operator">=</span><span class="number">30</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1, t2 <span class="keyword">WHERE</span> (t1.key1 <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">OR</span> t1.key2 <span class="keyword">LIKE</span> <span class="string">&#x27;value%&#x27;</span>) <span class="keyword">AND</span> t2.key1<span class="operator">=</span>t1.some_col;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1, t2 <span class="keyword">WHERE</span> t1.key1<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> (t2.key1<span class="operator">=</span>t1.some_col <span class="keyword">OR</span> t2.key2<span class="operator">=</span>t1.some_col2);</span><br></pre></td></tr></table></figure><p>但是第四个例子，感觉并不会使用 index merge. 因为 t2.key1=t1.some_col 和 t2.key2=t1.some_col2 之间进行的是 OR 运算，而且 t2.key2 是复合索引的第二个字段(非第一个字段)。所以：t2.key2 = t1.some_col2 并不能使用到复合索引。(文档这里应该是错误的)</p><p>index merge 算法根据合并算法的不同分成了三种：intersect, union, sort_union. </p><h2 id="2-index-merge-之-intersect"><a href="#2-index-merge-之-intersect" class="headerlink" title="2.index merge 之 intersect"></a>2.index merge 之 intersect</h2><p>简单而言，index intersect merge就是多个索引条件扫描得到的结果进行交集运算。显然在多个索引提交之间是 AND 运算时，才会出现 index intersect merge. 下面两种where条件或者它们的组合时会进行 index intersect merge:</p><ol><li>条件使用到复合索引中的所有字段或者左前缀字段(对单字段索引也适用)</li></ol><p>key_part1=const1 AND key_part2=const2 … AND key_partN=constN<br>2) 主键上的任何范围条件</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> innodb_table <span class="keyword">WHERE</span> primary_key <span class="operator">&lt;</span> <span class="number">10</span> <span class="keyword">AND</span> key_col1<span class="operator">=</span><span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_name <span class="keyword">WHERE</span> (key1_part1<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> key1_part2<span class="operator">=</span><span class="number">2</span>) <span class="keyword">AND</span> key2<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>上面只说到复合索引，但是其实单字段索引显然也是一样的。比如 select * from tab where key1=xx and key2 =xxx; 也是有可能进行index intersect merge的。另外上面两种情况的 AND 组合也一样可能会进行 index intersect merge.</p><p>The Index Merge intersection algorithm performs simultaneous scans on all used indexes and produces the intersection of row sequences that it receives from the merged index scans. (intersect merge运行方式：多个索引同时扫描，然后结果取交集)</p><p>If all columns used in the query are covered by the used indexes, full table rows are not retrieved (EXPLAIN output contains Using index in Extra field in this case). Here is an example of such a query:(索引覆盖扫描，无需回表)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> key1<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> key2<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>If the used indexes do not cover all columns used in the query, full rows are retrieved only when the range conditions for all used keys are satisfied.(索引不能覆盖，则对满足条件的再进行回表)</p><p>If one of the merged conditions is a condition over a primary key of an InnoDB table, it is not used for row retrieval, but is used to filter out rows retrieved using other conditions.</p><h2 id="3-index-merge-之-union"><a href="#3-index-merge-之-union" class="headerlink" title="3.index merge 之 union"></a>3.index merge 之 union</h2><p>简单而言，index uion merge就是多个索引条件扫描，对得到的结果进行并集运算，显然是多个条件之间进行的是 OR 运算。</p><p>下面几种类型的 where 条件，以及他们的组合可能会使用到 index union merge算法：</p><ol><li><p>条件使用到复合索引中的所有字段或者左前缀字段(对单字段索引也适用)</p></li><li><p>主键上的任何范围条件</p></li><li><p>任何符合 index intersect merge 的where条件；</p></li></ol><p>上面三种 where 条件进行 OR 运算时，可能会使用 index union merge算法。</p><p>例子：</p><p>SELECT * FROM t1 WHERE key1=1 OR key2=2 OR key3=3;<br>SELECT * FROM innodb_table WHERE (key1=1 AND key2=2) OR (key3=’foo’ AND key4=’bar’) AND key5=5;<br>第一个例子，就是三个 单字段索引 进行 OR 运算，所以他们可能会使用 index union merge算法。</p><p>第二个例子，复杂一点。(key1=1 AND key2=2) 是符合 index intersect merge; (key3=’foo’ AND key4=’bar’) AND key5=5 也是符合index intersect merge，所以 二者之间进行 OR 运算，自然可能会使用 index union merge算法。</p><h2 id="4-index-merge-之-sort-union"><a href="#4-index-merge-之-sort-union" class="headerlink" title="4.index merge 之 sort_union"></a>4.index merge 之 sort_union</h2><p>This access algorithm is employed when the WHERE clause was converted to several range conditions combined by OR, but for which the Index Merge method union algorithm is not applicable.(多个条件扫描进行 OR 运算，但是不符合 index union merge算法的，此时可能会使用 sort_union算法)</p><p>官方文档给出了两个例子：</p><p>SELECT * FROM tbl_name WHERE key_col1 &lt; 10 OR key_col2 &lt; 20;<br>SELECT * FROM tbl_name WHERE (key_col1 &gt; 10 OR key_col2 = 20) AND nonkey_col=30;<br>但是显然：因为 key_col2 不是复合索引的第一个字段，对它进行 OR 运算，是不可能使用到索引的。所以这两个例子应该也是错误的，它们实际上并不会进行 index sort_union merge算法。</p><p>The difference between the sort-union algorithm and the union algorithm is that the sort-union algorithm must first fetch row IDs for all rows and sort them before returning any rows.(sort-union合并算法和union合并算法的不同点，在于返回结果之前是否排序，为什么需要排序呢？可能是因为两个结果集，进行并集运算，需要去重，所以才进行排序？？？)</p><h2 id="5-index-merge的局限"><a href="#5-index-merge的局限" class="headerlink" title="5.index merge的局限"></a>5.index merge的局限</h2><p>1）If your query has a complex WHERE clause with deep AND/OR nesting and MySQL does not choose the optimal plan, try distributing terms using the following identity laws:</p><p>(x AND y) OR z = (x OR z) AND (y OR z)<br>(x OR y) AND z = (x AND z) OR (y AND z)<br>如果我们的条件比较复杂，用到多个 and / or 条件运算，而MySQL没有使用最优的执行计划，那么可以使用上面的两个等式将条件进行转换一下。</p><p>2）Index Merge is not applicable to full-text indexes. We plan to extend it to cover these in a future MySQL release.(全文索引没有index merge)</p><p>3）Before MySQL 5.6.6, if a range scan is possible on some key, the optimizer will not consider using Index Merge Union or Index Merge Sort-Union algorithms. For example, consider this query:</p><p>SELECT * FROM t1 WHERE (goodkey1 &lt; 10 OR goodkey2 &lt; 20) AND badkey &lt; 30;<br>For this query, two plans are possible:</p><p>An Index Merge scan using the (goodkey1 &lt; 10 OR goodkey2 &lt; 20) condition.</p><p>A range scan using the badkey &lt; 30 condition.</p><p>However, the optimizer considers only the second plan.</p><p>这一点对以低版本的MySQL是一个很大的缺陷。就是如果where条件中有 &gt;, &lt;, &gt;=, &lt;=等条件，那么优化器不会使用 index merge，而且还会忽略其他的索引，不会使用它们，哪怕他们的选择性更优。</p><h2 id="6-对-index-merge-的进一步优化"><a href="#6-对-index-merge-的进一步优化" class="headerlink" title="6.对 index merge 的进一步优化"></a>6.对 index merge 的进一步优化</h2><p>index merge使得我们可以使用到多个索引同时进行扫描，然后将结果进行合并。听起来好像是很好的功能，但是如果出现了 index intersect merge，那么一般同时也意味着我们的索引建立得不太合理，因为 index intersect merge 是可以通过建立 复合索引进行更一步优化的。</p><p>比如下面的select:</p><p>SELECT * FROM t1 WHERE key1=1 AND key2=2 AND key3=3;<br>显然我们是可以在这三个字段上建立一个复合索引来进行优化的，这样就只需要扫描一个索引一次，而不是对三个所以分别扫描一次。</p><p>percona官网有一篇 比较复合索引和index merge 的好文章：Multi Column indexes vs Index Merge</p><h2 id="7-复合索引的最左前缀原则"><a href="#7-复合索引的最左前缀原则" class="headerlink" title="7.复合索引的最左前缀原则"></a>7.复合索引的最左前缀原则</h2><p>上面我们说到，对复合索引的非最左前缀字段进行 OR 运算，是无法使用到复合索引的。比如：</p><p>SELECT * FROM tbl_name WHERE (key_col1 &gt; 10 OR key_col2 = 20) AND nonkey_col=30;<br>其原因是，MySQL中的索引，使用的是B+tree, 也就是说他是：先按照复合索引的 第一个字段的大小来排序，插入到 B+tree 中的，当第一个字段值相同时，在按照第二个字段的值比较来插入的。那么如果我们需要对： OR key_col2 = 20 这样的条件也使用复合索引，那么该怎么操作呢？应该要对复合索引进行全扫描，找出所有 key_col2 =20 的项，然后还要回表去判断 nonkey_col=30，显然代价太大了。所以一般而言 OR key_col2 = 20 这样的条件是无法使用到复合索引的。如果一定要使用索引，那么可以在 col2 上单独建立一个索引。</p><p>复合索引的最左前缀原则：</p><p>MySQL中的复合索引，查询时只会使用到最左前缀，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    mysql&gt; show index from role_goods;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    +------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">    | Table      | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |</span><br><span class="line">    +------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">    | role_goods |          0 | PRIMARY  |            1 | id          | A         |       22816 |     NULL | NULL   |      | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | roleId   |            1 | roleId      | A         |        1521 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | goodsId  |            1 | goodsId     | A         |        1521 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | roleId_2 |            1 | roleId      | A         |        1901 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | roleId_2 |            2 | status      | A         |        4563 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | roleId_2 |            3 | number      | A         |       22816 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    +------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>上面有一个复合索引：roleId_2(roleId,status,number)，如果条件是： where roleId=xxx and number=xxx，那么此时只会使用到最左前缀roleId，而不会使用到 number 来进行过滤。因为它们中间存在一个字段 status 没有出现在where条件中。实验如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from role_goods <span class="built_in">where</span> roleId=100000001 and status=1 and number=1 <span class="built_in">limit</span> 1;</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------------+------+-------+</span><br><span class="line">| id | select_type | table      | <span class="built_in">type</span> | possible_keys   | key      | key_len | ref               | rows | Extra |</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | role_goods | ref  | roleId,roleId_2 | roleId_2 | 23      | const,const,const |   13 | NULL  |</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------------+------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from role_goods <span class="built_in">where</span> roleId=100000001 and status=1 <span class="built_in">limit</span> 1;</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------+------+-------+</span><br><span class="line">| id | select_type | table      | <span class="built_in">type</span> | possible_keys   | key      | key_len | ref         | rows | Extra |</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | role_goods | ref  | roleId,roleId_2 | roleId_2 | 14      | const,const |   13 | NULL  |</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------+------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from role_goods <span class="built_in">where</span> roleId=100000001 and number=1 <span class="built_in">limit</span> 1;</span><br><span class="line">+----+-------------+------------+------+-----------------+--------+---------+-------+------+-------------+</span><br><span class="line">| id | select_type | table      | <span class="built_in">type</span> | possible_keys   | key    | key_len | ref   | rows | Extra       |</span><br><span class="line">+----+-------------+------------+------+-----------------+--------+---------+-------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | role_goods | ref  | roleId,roleId_2 | roleId | 9       | const |   14 | Using <span class="built_in">where</span> |</span><br><span class="line">+----+-------------+------------+------+-----------------+--------+---------+-------+------+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line">mysql&gt; explain select * from role_goods ignore index(roleId) <span class="built_in">where</span> roleId=100000001 and number=1 <span class="built_in">limit</span> 1;</span><br><span class="line">+----+-------------+------------+------+---------------+----------+---------+-------+------+-----------------------+</span><br><span class="line">| id | select_type | table      | <span class="built_in">type</span> | possible_keys | key      | key_len | ref   | rows | Extra                 |</span><br><span class="line">+----+-------------+------------+------+---------------+----------+---------+-------+------+-----------------------+</span><br><span class="line">|  1 | SIMPLE      | role_goods | ref  | roleId_2      | roleId_2 | 9       | const |   14 | Using index condition |</span><br><span class="line">+----+-------------+------------+------+---------------+----------+---------+-------+------+-----------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p>可以看到 <code>key_len</code> 的变化：</p><p>显然最后一个查询仅仅使用到符合索引中的 roleId, 没有使用到 number. number使用在了 index conditon(也就是索引的push down技术)</p><p>注意最左前缀，并不是是指：一定要按照各个字段出现在where中的顺序来建立复合索引的。比如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">where</span> status<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> roleId<span class="operator">=</span>xxx <span class="keyword">and</span> number <span class="operator">=</span> xxx</span><br></pre></td></tr></table></figure><p>该条件建立符合索引，我们并不需要按照status,roleId，number它们出现的顺序来建立索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> role_goods <span class="keyword">add</span> index <span class="built_in">sin</span>(status,roleId,number)</span><br></pre></td></tr></table></figure><p>这是对最左前缀极大的误解。因为 <code>where status=2 and roleId=xxx and number = xxx 和 where roleId=xxx and number = xxx and status=2</code>它们是等价的。复合索引，哪个字段放在最前面，需要根据哪个字段经常出现在where条件中，哪个字段的选择性最好来判断的。</p><p>进一步可以参考的文章：</p><p><a href="http://www.orczhou.com/index.php/2013/01/mysql-source-code-query-optimization-index-merge/" title="http://www.orczhou.com/index.php/2013/01/mysql-source-code-query-optimization-index-merge/">http://www.orczhou.com/index.php/2013/01/mysql-source-code-query-optimization-index-merge/</a></p><p><a href="http://www.cnblogs.com/nocode/archive/2013/01/28/2880654.html" title="http://www.cnblogs.com/nocode/archive/2013/01/28/2880654.html">http://www.cnblogs.com/nocode/archive/2013/01/28/2880654.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在SpringBoot里面使用Thymeleaf3</title>
      <link href="2017/05/%E5%9C%A8springboot%E9%87%8C%E9%9D%A2%E4%BD%BF%E7%94%A8thymeleaf3.html"/>
      <url>2017/05/%E5%9C%A8springboot%E9%87%8C%E9%9D%A2%E4%BD%BF%E7%94%A8thymeleaf3.html</url>
      
        <content type="html"><![CDATA[<p>最近在一个<code>springboot</code>项目里使用<code>thymeleaf</code>模板，访问页面时一直报错。而之前的项目中没发现过这种情况发生。<br>和之前的项目对比发现，在<code>springboot</code>项目中引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入的<code>thymeleaf</code>版本居然是<code>2.x.x</code>版本，之前项目引入的是<code>3.x.x</code>版本的<br><img src="https://file.wf2311.com/2017/05/26/10/QQ%E6%88%AA%E5%9B%BE20170526100433.png" alt="之前项目"><br><img src="https://file.wf2311.com/2017/05/26/10/QQ%E6%88%AA%E5%9B%BE20170526100404.png" alt="该项目"></p><p>查看相应的pom文件发现，<code>thymeleaf.version</code>确实是<code>2.x.x</code>的。<br><img src="https://file.wf2311.com/2017/05/26/10/QQ%E6%88%AA%E5%9B%BE20170526095909.png" alt="截图"><br>究竟怎么回事呢？搜索<code>springboot</code>文档中相关<code>thymeleaf</code>的段落，发现了如下<a href="http://docs.spring.io/spring-boot/docs/1.5.3.RELEASE/reference/htmlsingle/#howto-use-thymeleaf-3">描述</a>:<br><img src="https://file.wf2311.com/2017/05/26/10/QQ%E6%88%AA%E5%9B%BE20170526100534.png" alt="描述"></p><p>原来在<code>spring-boot-starter-thymeleaf</code>中默认引入的版本<code>thymeleaf</code>是<code>2.1</code>,如果需要使用<code>thymeleaf3</code>,需要在<code>pom.xml</code>中加入如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runnable实现资源共享</title>
      <link href="2017/05/runnable%E5%AE%9E%E7%8E%B0%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB.html"/>
      <url>2017/05/runnable%E5%AE%9E%E7%8E%B0%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB.html</url>
      
        <content type="html"><![CDATA[<p><strong><a href="http://www.cnblogs.com/skywang12345/p/3479063.html">参考地址</a></strong></p><p>以抢票或秒杀为例</p><ol><li>错误示例1：</li></ol><ul><li>Service<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> remain = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (remain &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 剩余：&quot;</span> + <span class="keyword">this</span>.remain--);</span><br><span class="line">            count.addAndGet(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>测试方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line"></span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(service);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        <span class="keyword">return</span> service.count.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            array[i] = buy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> a = Arrays.stream(array).filter(i -&gt; i &gt; <span class="number">100</span>).count();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行次数大于100的个数：&quot;</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>测试结果：</li></ul><p><img src="https://file.wf2311.com/2017/05/25/17/QQ%E6%88%AA%E5%9B%BE20170525171025.png" alt="截图"><br>执行100次中出现了13次下单次数大于100次的情况</p><ul><li>原因分析:<br>在上述方法中，多个线程共享一个变量，会存在并发争抢资源的问题，可能多买票的现象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程与并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery checkbox选中、改变状态、change和click事件</title>
      <link href="2017/05/jquery-checkbox%E9%80%89%E4%B8%AD%E3%80%81%E6%94%B9%E5%8F%98%E7%8A%B6%E6%80%81%E3%80%81change%E5%92%8Cclick%E4%BA%8B%E4%BB%B6.html"/>
      <url>2017/05/jquery-checkbox%E9%80%89%E4%B8%AD%E3%80%81%E6%94%B9%E5%8F%98%E7%8A%B6%E6%80%81%E3%80%81change%E5%92%8Cclick%E4%BA%8B%E4%BB%B6.html</url>
      
        <content type="html"><![CDATA[<h2 id="jquery判断checked的三种方法"><a href="#jquery判断checked的三种方法" class="headerlink" title="jquery判断checked的三种方法:"></a>jquery判断checked的三种方法:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.attr(<span class="string">&#x27;checked&#x27;</span>); <span class="comment">//看版本1.6+返回:”checked”或”undefined” ;1.5-返回:true或false</span></span><br><span class="line">.prop(<span class="string">&#x27;checked&#x27;</span>); <span class="comment">//1.6+:true/false</span></span><br><span class="line">.is(<span class="string">&#x27;:checked&#x27;</span>); <span class="comment">//所有版本:true/false//别忘记冒号哦</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="jquery赋值checked的几种写法"><a href="#jquery赋值checked的几种写法" class="headerlink" title="jquery赋值checked的几种写法:"></a>jquery赋值checked的几种写法:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有的jquery版本都可以这样赋值:</span></span><br><span class="line">$(<span class="string">&quot;#cb1&quot;</span>).attr(<span class="string">&quot;checked&quot;</span>, <span class="string">&quot;checked&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;#cb1&quot;</span>).attr(<span class="string">&quot;checked&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//jquery1.6+:prop的4种赋值:</span></span><br><span class="line">$(<span class="string">&quot;#cb1&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">$(<span class="string">&quot;#cb1&quot;</span>).prop(&#123;<span class="attr">checked</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">$(<span class="string">&quot;#cb1&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//函数返回true或false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//记得还有这种哦:</span></span><br><span class="line">$(<span class="string">&quot;#cb1″).prop(&quot;</span>checked<span class="string">&quot;,&quot;</span>checked<span class="string">&quot;);</span></span><br></pre></td></tr></table></figure><h2 id="checkbox-click和change事件"><a href="#checkbox-click和change事件" class="headerlink" title="checkbox click和change事件"></a>checkbox click和change事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1:</span></span><br><span class="line">$(<span class="string">&quot;#ischange&quot;</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;checked&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2:</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($.browser.msie) &#123;</span><br><span class="line">        $(<span class="string">&#x27;input:checkbox&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.blur();</span><br><span class="line">            <span class="built_in">this</span>.focus();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法3：</span></span><br><span class="line">$(<span class="string">&quot;#ischange&quot;</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;checked&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法4:</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($.browser.msie) &#123;</span><br><span class="line">        $(<span class="string">&#x27;input:checkbox&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.blur();</span><br><span class="line">            <span class="built_in">this</span>.focus();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法5:</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;testCheckbox&quot;</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;Option changed!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> jQuery </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx出现413 Request Entity Too Large 解决方法</title>
      <link href="2017/05/nginx%E5%87%BA%E7%8E%B0413-request-entity-too-large-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html"/>
      <url>2017/05/nginx%E5%87%BA%E7%8E%B0413-request-entity-too-large-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<p><strong>nginx.conf</strong>中默认没有设置<code>client_max_body_size</code>，这个参数默认只是1M，</p><p>解决办法：</p><p>增加如下两行到<strong>nginx.conf</strong>的<code>http&#123;&#125;</code>段， 增大nginx上传文件大小限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置允许发布内容为8M</span></span><br><span class="line">client_max_body_size 8M;</span><br><span class="line">client_body_buffer_size 128k;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水仙花算法</title>
      <link href="2017/05/%E6%B0%B4%E4%BB%99%E8%8A%B1%E7%AE%97%E6%B3%95.html"/>
      <url>2017/05/%E6%B0%B4%E4%BB%99%E8%8A%B1%E7%AE%97%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><blockquote><p>水仙花数是一个n(&gt;=3)位数字的数,它等于每个数字的n次幂之和 列如153分别是1 5 3 这几个数的立方之和</p></blockquote><span id="more"></span><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算从100到endNum范围内的水仙花数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] narcissisticNumber(<span class="keyword">int</span> endNum) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> IntStream.range(<span class="number">100</span>, endNum).parallel()</span><br><span class="line">            <span class="comment">//判断n是否为水仙花数</span></span><br><span class="line">            .filter(n -&gt; isNarcissistic(n))</span><br><span class="line">            <span class="comment">//得到结 果作为数值返回</span></span><br><span class="line">            .toArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断一个整数是否是水仙花数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNarcissistic</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//切割整数</span></span><br><span class="line">    String[] array = String.valueOf(n).split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = Arrays.stream(array)</span><br><span class="line">            <span class="comment">//n次方</span></span><br><span class="line">            .mapToInt(i -&gt; nPower(Integer.valueOf(i), array.length))</span><br><span class="line">            <span class="comment">//求和</span></span><br><span class="line">            .sum();</span><br><span class="line">    <span class="keyword">return</span> sum == n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算n次方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nPower</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        sum *= i;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算1_0000_0000以内的水仙花数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] ints = narcissisticNumber(<span class="number">1_0000_0000</span>);</span><br><span class="line">    Arrays.stream(ints).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">153</span></span><br><span class="line"><span class="number">370</span></span><br><span class="line"><span class="number">371</span></span><br><span class="line"><span class="number">407</span></span><br><span class="line"><span class="number">1634</span></span><br><span class="line"><span class="number">8208</span></span><br><span class="line"><span class="number">9474</span></span><br><span class="line"><span class="number">54748</span></span><br><span class="line"><span class="number">92727</span></span><br><span class="line"><span class="number">93084</span></span><br><span class="line"><span class="number">548834</span></span><br><span class="line"><span class="number">1741725</span></span><br><span class="line"><span class="number">4210818</span></span><br><span class="line"><span class="number">9800817</span></span><br><span class="line"><span class="number">9926315</span></span><br><span class="line"><span class="number">24678050</span></span><br><span class="line"><span class="number">24678051</span></span><br><span class="line"><span class="number">88593477</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8中利用Stream过滤属性重复的元素</title>
      <link href="2017/05/java8%E4%B8%AD%E5%88%A9%E7%94%A8stream%E8%BF%87%E6%BB%A4%E5%B1%9E%E6%80%A7%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0.html"/>
      <url>2017/05/java8%E4%B8%AD%E5%88%A9%E7%94%A8stream%E8%BF%87%E6%BB%A4%E5%B1%9E%E6%80%A7%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0.html</url>
      
        <content type="html"><![CDATA[<h2 id="根据属性过滤重复的元素"><a href="#根据属性过滤重复的元素" class="headerlink" title="根据属性过滤重复的元素"></a>根据属性过滤重复的元素</h2><p><a href="http://stackoverflow.com/questions/27870136/java-lambda-stream-distinct-on-arbitrary-key">参考地址</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据属性过滤重复的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">distinctByKey</span><span class="params">(Function&lt;? <span class="keyword">super</span> T,Object&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line">    Map&lt;Object,Boolean&gt; seen = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">return</span> t -&gt; seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> String[] data = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">        <span class="string">&quot;1,2,a,4,5,6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;2,2,b,4,5,6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;3,2,a,4,5,6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;4,2,d,4,5,6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;5,2,b,5,5,6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;6,2,f,4,5,6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;7,2,c,4,5,6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;8,2,g,4,5,6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;9,2,d,4,5,6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;10,2,g,5,5,6&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据单个属性过滤</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arrays = Stream.of(data).map(d -&gt; d.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">            .filter(array -&gt; !array[<span class="number">0</span>].equals(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">            .filter(distinctByKey(array -&gt; array[<span class="number">2</span>]))</span><br><span class="line">            .mapToInt(array -&gt; Integer.valueOf(array[<span class="number">0</span>]))</span><br><span class="line">            .toArray();</span><br><span class="line">    Assert.assertArrayEquals(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;, arrays);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据多个属性过滤</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arrays = Stream.of(data).map(d -&gt; d.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">            .filter(distinctByKey(array -&gt; array[<span class="number">2</span>] + array[<span class="number">3</span>]))</span><br><span class="line">            .mapToInt(array -&gt; Integer.valueOf(array[<span class="number">0</span>]))</span><br><span class="line">            .toArray();</span><br><span class="line">    Assert.assertArrayEquals(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>&#125;, arrays);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stream </tag>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
