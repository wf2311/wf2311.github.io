<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王峰的博客</title>
  <icon>https://www.gravatar.com/avatar/f12acb240e0a43c7f35ca20b62c0439d</icon>
  <subtitle>保持学习</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wangfeng.pro/"/>
  <updated>2021-05-23T02:05:13.294Z</updated>
  <id>https://www.wangfeng.pro/</id>
  
  <author>
    <name>王峰</name>
    <email>work@wangfeng.pro</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloud中使用Apollo实现动态刷新</title>
    <link href="https://www.wangfeng.pro/2021/05/springcloud%E4%B8%AD%E4%BD%BF%E7%94%A8apollo%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0.html"/>
    <id>https://www.wangfeng.pro/2021/05/springcloud中使用apollo实现动态刷新.html</id>
    <published>2021-05-17T12:14:24.000Z</published>
    <updated>2021-05-23T02:05:13.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="普通字段"><a href="#普通字段" class="headerlink" title="普通字段"></a>普通字段</h1><p>在需要刷新的字段上使用<code>@value</code>注解即可，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;test.user.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;test.user.age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;test.user.sex&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Boolean sex;</span><br></pre></td></tr></table></figure><h1 id="bean使用-ConfigurationProperties动态刷新"><a href="#bean使用-ConfigurationProperties动态刷新" class="headerlink" title="bean使用@ConfigurationProperties动态刷新"></a>bean使用@ConfigurationProperties动态刷新</h1><p>bean使用@ConfigurationProperties注解目前还不支持自动刷新，得编写一定的代码实现刷新。目前官方提供2种刷新方案：</p><ul><li>基于RefreshScope实现刷新</li><li>基于EnvironmentChangeEvent实现刷新</li></ul><h2 id="方法一：基于RefreshScope实现刷新"><a href="#方法一：基于RefreshScope实现刷新" class="headerlink" title="方法一：基于RefreshScope实现刷新"></a>方法一：基于RefreshScope实现刷新</h2><ol><li>确保项目中已引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>实体类上使用<code>@RefreshScope</code>注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;test.user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUserProperties</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在namespace=config的命名空间中定义配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">test.user.name</span> = <span class="string">zhangsan</span></span><br><span class="line"><span class="meta">test.user.age</span> = <span class="string">10</span></span><br><span class="line"><span class="meta">test.user.sex</span> = <span class="string">1</span></span><br></pre></td></tr></table></figure><ol start="3"><li>利用RefreshScope搭配@ApolloConfigChangeListener监听实现bean的动态刷新</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApolloDynamicConfigPropertiesRefresh</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RefreshScope refreshScope;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApolloConfigChangeListener(value=&quot;config&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(ConfigChangeEvent changeEvent)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        refreshScope.refresh(<span class="string">&quot;testUserProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        PrintChangeKeyUtils.printChange(changeEvent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@ApolloConfigChangeListener(value=&quot;config&quot;)</code> 表示监听namespace=config的配置文件的变化</li><li><code>refreshScope.refresh(&quot;testUserProperties&quot;);</code> 表示如果触发监听事件，则刷新名为<code>testUserProperties</code>的bean；</li><li><code>PrintChangeKeyUtils.printChange(changeEvent);</code> 表示打印发送变化的熟悉（可选）,<code>PrintChangeKeyUtils</code>定义为：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ctrip.framework.apollo.model.ConfigChange;</span><br><span class="line"><span class="keyword">import</span> com.ctrip.framework.apollo.model.ConfigChangeEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintChangeKeyUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printChange</span><span class="params">(ConfigChangeEvent changeEvent)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; changeKeys = changeEvent.changedKeys();</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(changeKeys)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String changeKey : changeKeys) &#123;</span><br><span class="line">                ConfigChange configChange = changeEvent.getChange(changeKey);</span><br><span class="line">                System.out.println(<span class="string">&quot;key:&quot;</span> + changeKey + <span class="string">&quot;;oldValue:&quot;</span> + configChange.getOldValue() + <span class="string">&quot;;newValue:&quot;</span> + configChange.getNewValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法二：基于EnvironmentChangeEvent实现刷新"><a href="#方法二：基于EnvironmentChangeEvent实现刷新" class="headerlink" title="方法二：基于EnvironmentChangeEvent实现刷新"></a>方法二：基于EnvironmentChangeEvent实现刷新</h2><ol><li>定义实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;test.user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUserProperties</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与方法一的差异是不使用<code>@RefreshScope</code>注解</p><ol start="2"><li>利用spring的事件驱动配合@ApolloConfigChangeListener监听实现bean的动态刷新：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApolloDynamicConfigPropertiesRefresh</span>  <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    RefreshScope refreshScope;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApolloConfigChangeListener(value=&quot;config&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(ConfigChangeEvent changeEvent)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        applicationContext.publishEvent(<span class="keyword">new</span> EnvironmentChangeEvent(changeEvent.changedKeys()));</span><br><span class="line"></span><br><span class="line">        PrintChangeKeyUtils.printChange(changeEvent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两种方式动态刷新原理浅析："><a href="#两种方式动态刷新原理浅析：" class="headerlink" title="两种方式动态刷新原理浅析："></a>两种方式动态刷新原理浅析：</h2><h3 id="RefreshScope"><a href="#RefreshScope" class="headerlink" title="RefreshScope"></a>RefreshScope</h3><p>首先了解Spring中几个相关的类：</p><ul><li>注解@RefreshScope(<code>org.springframework.cloud.context.config.annotation.RefreshScope</code>)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Scope(&quot;refresh&quot;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RefreshScope &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Scope#proxyMode()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> proxy mode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ScopedProxyMode <span class="title">proxyMode</span><span class="params">()</span> <span class="keyword">default</span> ScopedProxyMode.TARGET_CLASS</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注解@Scope(<code>org.springframework.context.annotation.Scope</code>)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scope &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@AliasFor(&quot;scopeName&quot;)</span></span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line"><span class="function">String <span class="title">scopeName</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ScopedProxyMode <span class="title">proxyMode</span><span class="params">()</span> <span class="keyword">default</span> ScopedProxyMode.DEFAULT</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口Scope(<code>org.springframework.beans.factory.config.Scope</code>) </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Scope</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(String name, ObjectFactory&lt;?&gt; objectFactory)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">Object <span class="title">remove</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerDestructionCallback</span><span class="params">(String name, Runnable callback)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">Object <span class="title">resolveContextualObject</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">String <span class="title">getConversationId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类RefreshScope(<code>org.springframework.cloud.context.scope.refresh.RefreshScope</code>)  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ManagedResource</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefreshScope</span> <span class="keyword">extends</span> <span class="title">GenericScope</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span>,<span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt;, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BeanDefinitionRegistry registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> eager = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> order = Ordered.LOWEST_PRECEDENCE - <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a scope instance and gives it the default name: &quot;refresh&quot;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RefreshScope</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.setName(<span class="string">&quot;refresh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(<span class="keyword">int</span> order)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.order = order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEager</span><span class="params">(<span class="keyword">boolean</span> eager)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.eager = eager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.registry = registry;</span><br><span class="line"><span class="keyword">super</span>.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">start(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (event.getApplicationContext() == <span class="keyword">this</span>.context &amp;&amp; <span class="keyword">this</span>.eager</span><br><span class="line">&amp;&amp; <span class="keyword">this</span>.registry != <span class="keyword">null</span>) &#123;</span><br><span class="line">eagerlyInitialize();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eagerlyInitialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (String name : <span class="keyword">this</span>.context.getBeanDefinitionNames()) &#123;</span><br><span class="line">BeanDefinition definition = <span class="keyword">this</span>.registry.getBeanDefinition(name);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.getName().equals(definition.getScope())</span><br><span class="line">&amp;&amp; !definition.isLazyInit()) &#123;</span><br><span class="line">Object bean = <span class="keyword">this</span>.context.getBean(name);</span><br><span class="line"><span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">bean.getClass();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ManagedOperation(description = &quot;Dispose of the current instance of bean name &quot;</span></span><br><span class="line"><span class="meta">+ &quot;provided and force a refresh on next method execution.&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">refresh</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!name.startsWith(SCOPED_TARGET_PREFIX)) &#123;</span><br><span class="line"><span class="comment">// User wants to refresh the bean with this name but that isn&#x27;t the one in the</span></span><br><span class="line"><span class="comment">// cache...</span></span><br><span class="line">name = SCOPED_TARGET_PREFIX + name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Ensure lifecycle is finished if bean was disposable</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">super</span>.destroy(name)) &#123;</span><br><span class="line"><span class="keyword">this</span>.context.publishEvent(<span class="keyword">new</span> RefreshScopeRefreshedEvent(name));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ManagedOperation(description = &quot;Dispose of the current instance of all beans &quot;</span></span><br><span class="line"><span class="meta">+ &quot;in this scope and force a refresh on next method execution.&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.destroy();</span><br><span class="line"><span class="keyword">this</span>.context.publishEvent(<span class="keyword">new</span> RefreshScopeRefreshedEvent());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.context = context;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带有<code>@RefreshScope</code>注解后的Bean，在初始话的过程中，会通过<code>AnnotationScopeMetadataResolver#resolveScopeMetadata</code>提取元数据：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ScopeMetadata <span class="title">resolveScopeMetadata</span><span class="params">(BeanDefinition definition)</span> </span>&#123;</span><br><span class="line">    ScopeMetadata metadata = <span class="keyword">new</span> ScopeMetadata();</span><br><span class="line">    <span class="keyword">if</span> (definition <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">        AnnotatedBeanDefinition annDef = (AnnotatedBeanDefinition) definition;</span><br><span class="line">        AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(</span><br><span class="line">                annDef.getMetadata(), <span class="keyword">this</span>.scopeAnnotationType);</span><br><span class="line">        <span class="keyword">if</span> (attributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            metadata.setScopeName(attributes.getString(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">            ScopedProxyMode proxyMode = attributes.getEnum(<span class="string">&quot;proxyMode&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (proxyMode == ScopedProxyMode.DEFAULT) &#123;</span><br><span class="line">                proxyMode = <span class="keyword">this</span>.defaultProxyMode;</span><br><span class="line">            &#125;</span><br><span class="line">            metadata.setScopedProxyMode(proxyMode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以理解为 <code>@RefreshScope</code> 是scopeName=”refresh”的 <code>@Scope</code>，其Bean的注册将通过<code>AnnotatedBeanDefinitionReader#registerBean</code>完成的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">doRegisterBean</span><span class="params">(Class&lt;T&gt; beanClass, <span class="meta">@Nullable</span> String name,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="meta">@Nullable</span> Class&lt;? extends Annotation&gt;[] qualifiers, <span class="meta">@Nullable</span> Supplier&lt;T&gt; supplier,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="meta">@Nullable</span> BeanDefinitionCustomizer[] customizers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">AnnotatedGenericBeanDefinition abd = <span class="keyword">new</span> AnnotatedGenericBeanDefinition(beanClass);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.conditionEvaluator.shouldSkip(abd.getMetadata())) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abd.setInstanceSupplier(supplier);</span><br><span class="line">ScopeMetadata scopeMetadata = <span class="keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(abd);</span><br><span class="line">abd.setScope(scopeMetadata.getScopeName());</span><br><span class="line">String beanName = (name != <span class="keyword">null</span> ? name : <span class="keyword">this</span>.beanNameGenerator.generateBeanName(abd, <span class="keyword">this</span>.registry));</span><br><span class="line"></span><br><span class="line">AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);</span><br><span class="line"><span class="keyword">if</span> (qualifiers != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (Class&lt;? extends Annotation&gt; qualifier : qualifiers) &#123;</span><br><span class="line"><span class="keyword">if</span> (Primary.class == qualifier) &#123;</span><br><span class="line">abd.setPrimary(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Lazy.class == qualifier) &#123;</span><br><span class="line">abd.setLazyInit(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">abd.addQualifier(<span class="keyword">new</span> AutowireCandidateQualifier(qualifier));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (customizers != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (BeanDefinitionCustomizer customizer : customizers) &#123;</span><br><span class="line">customizer.customize(abd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(abd, beanName);</span><br><span class="line">definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/dynamic/config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicConfigTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;test.user.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;test.user.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;test.user.sex&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean sex;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TestUserProperties userProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">properties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>, age);</span><br><span class="line">        map.put(<span class="string">&quot;sex&quot;</span>, sex);</span><br><span class="line">        map.put(<span class="string">&quot;user&quot;</span>, userProperties.toString());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://cloud.tencent.com/developer/article/1639579">apollo与springboot集成实现动态刷新配置</a></li><li><a href="https://www.jianshu.com/p/188013dd3d02">@RefreshScope那些事</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;普通字段&quot;&gt;&lt;a href=&quot;#普通字段&quot; class=&quot;headerlink&quot; title=&quot;普通字段&quot;&gt;&lt;/a&gt;普通字段&lt;/h1&gt;&lt;p&gt;在需要刷新的字段上使用&lt;code&gt;@value&lt;/code&gt;注解即可，例如：&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="微服务" scheme="https://www.wangfeng.pro/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="配置中心" scheme="https://www.wangfeng.pro/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
    
      <category term="Apollo" scheme="https://www.wangfeng.pro/tags/Apollo/"/>
    
  </entry>
  
  <entry>
    <title>一致性Hash算法</title>
    <link href="https://www.wangfeng.pro/2021/04/%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95.html"/>
    <id>https://www.wangfeng.pro/2021/04/一致性hash算法.html</id>
    <published>2021-04-27T11:08:03.000Z</published>
    <updated>2021-05-23T08:24:53.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><h2 id="不带虚拟节点的实现"><a href="#不带虚拟节点的实现" class="headerlink" title="不带虚拟节点的实现"></a>不带虚拟节点的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.SortedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不带虚拟节点的一致性Hash算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistentHashingWithoutVirtualNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//待添加入Hash环的服务器列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] servers = &#123;<span class="string">&quot;192.168.0.0:111&quot;</span>, <span class="string">&quot;192.168.0.1:111&quot;</span>,</span><br><span class="line">            <span class="string">&quot;192.168.0.2:111&quot;</span>, <span class="string">&quot;192.168.0.3:111&quot;</span>, <span class="string">&quot;192.168.0.4:111&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key表示服务器的hash值，value表示服务器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SortedMap&lt;Integer, String&gt; sortedMap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//程序初始化，将所有的服务器放入sortedMap中</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; servers.length; i++) &#123;</span><br><span class="line">            String server = servers[i];</span><br><span class="line">            <span class="keyword">int</span> hash = getHash(server);</span><br><span class="line">            System.out.println(<span class="string">&quot;[&quot;</span> + server + <span class="string">&quot;]加入集合中, 其Hash值为&quot;</span> + hash);</span><br><span class="line">            sortedMap.put(hash, server);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到应当路由到的结点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getServer</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//得到该key的hash值</span></span><br><span class="line">        <span class="keyword">int</span> hash = getHash(key);</span><br><span class="line">        <span class="comment">//得到大于该Hash值的所有Map</span></span><br><span class="line">        SortedMap&lt;Integer, String&gt; subMap = sortedMap.tailMap(hash);</span><br><span class="line">        <span class="keyword">if</span> (subMap.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//如果没有比该key的hash值大的，则从第一个node开始</span></span><br><span class="line">            Integer i = sortedMap.firstKey();</span><br><span class="line">            <span class="comment">//返回对应的服务器</span></span><br><span class="line">            <span class="keyword">return</span> sortedMap.get(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//第一个Key就是顺时针过去离node最近的那个结点</span></span><br><span class="line">            Integer i = subMap.firstKey();</span><br><span class="line">            <span class="comment">//返回对应的服务器</span></span><br><span class="line">            <span class="keyword">return</span> subMap.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用FNV1_32_HASH算法计算服务器的Hash值,这里不使用重写hashCode的方法，最终效果没区别</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getHash</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> p = <span class="number">16777619</span>;</span><br><span class="line">        <span class="keyword">int</span> hash = (<span class="keyword">int</span>) <span class="number">2166136261L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</span><br><span class="line">            hash = (hash ^ str.charAt(i)) * p;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">13</span>;</span><br><span class="line">        hash ^= hash &gt;&gt; <span class="number">7</span>;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">3</span>;</span><br><span class="line">        hash ^= hash &gt;&gt; <span class="number">17</span>;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果算出来的值为负数则取其绝对值</span></span><br><span class="line">        <span class="keyword">if</span> (hash &lt; <span class="number">0</span>)</span><br><span class="line">            hash = Math.abs(hash);</span><br><span class="line">        <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] keys = &#123;<span class="string">&quot;太阳&quot;</span>, <span class="string">&quot;月亮&quot;</span>, <span class="string">&quot;星星&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String key : keys)</span><br><span class="line">            System.out.println(<span class="string">&quot;[&quot;</span> + key + <span class="string">&quot;]的hash值为&quot;</span> + getHash(key)</span><br><span class="line">                    + <span class="string">&quot;, 被路由到结点[&quot;</span> + getServer(key) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带虚拟节点的实现"><a href="#带虚拟节点的实现" class="headerlink" title="带虚拟节点的实现"></a>带虚拟节点的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.SortedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.StampedLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:wf2311@163.com&quot;&gt;wf2311&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/4/25 19:08.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistentHashingWithVirtualNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NODE_SPILT = <span class="string">&quot;@@&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NODE_PREFIX = <span class="string">&quot;VN&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key表示服务器的hash,value表示服务器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SortedMap&lt;Integer, String&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; servers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 虚拟节点数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> virtualNodeNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StampedLock lock = <span class="keyword">new</span> StampedLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsistentHashingWithVirtualNode</span><span class="params">(List&lt;String&gt; servers, <span class="keyword">int</span> virtualNodeNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servers = servers;</span><br><span class="line">        <span class="keyword">this</span>.virtualNodeNum = virtualNodeNum;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String server : servers) &#123;</span><br><span class="line">            addServer(server);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addServer</span><span class="params">(String server)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stamp = lock.writeLock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; virtualNodeNum; i++) &#123;</span><br><span class="line">                String virtual = server + NODE_SPILT + NODE_PREFIX + i;</span><br><span class="line">                <span class="keyword">int</span> hash = getHash(virtual);</span><br><span class="line">                map.put(hash, virtual);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlockWrite(stamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeServer</span><span class="params">(String server)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stamp = lock.writeLock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; virtualNodeNum; i++) &#123;</span><br><span class="line">                String virtual = server + NODE_SPILT + NODE_PREFIX + i;</span><br><span class="line">                map.remove(getHash(virtual));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlockWrite(stamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeServer</span><span class="params">(String server, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stamp = lock.writeLock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String virtual = server + NODE_SPILT + NODE_PREFIX + i;</span><br><span class="line">            <span class="keyword">int</span> hash = getHash(virtual);</span><br><span class="line">            map.put(hash, virtual);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlockWrite(stamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findServer</span><span class="params">(String request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hash = getHash(request);</span><br><span class="line">        <span class="keyword">long</span> stamp = lock.tryOptimisticRead();</span><br><span class="line">        String server = getServerByHashKey(hash);</span><br><span class="line">        <span class="keyword">if</span> (!lock.validate(stamp)) &#123;</span><br><span class="line">            stamp = lock.readLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                server = getServerByHashKey(hash);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlockRead(stamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getServerByHashKey</span><span class="params">(<span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">        SortedMap&lt;Integer, String&gt; subMap = map.tailMap(hash);</span><br><span class="line">        Integer targetServerKey = subMap.isEmpty() ? map.firstKey() : subMap.firstKey();</span><br><span class="line">        String virtual = map.get(targetServerKey);</span><br><span class="line">        <span class="keyword">if</span> (virtual != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> virtual.split(NODE_SPILT)[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getHash</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> p = <span class="number">16777619</span>;</span><br><span class="line">        <span class="keyword">int</span> hash = (<span class="keyword">int</span>) <span class="number">2166136261L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</span><br><span class="line">            hash = (hash ^ str.charAt(i)) * p;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">13</span>;</span><br><span class="line">        hash ^= hash &gt;&gt; <span class="number">7</span>;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">3</span>;</span><br><span class="line">        hash ^= hash &gt;&gt; <span class="number">17</span>;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果算出来的值为负数则取其绝对值</span></span><br><span class="line">        <span class="keyword">if</span> (hash &lt; <span class="number">0</span>)</span><br><span class="line">            hash = Math.abs(hash);</span><br><span class="line">        <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;算法实现&quot;&gt;&lt;a href=&quot;#算法实现&quot; class=&quot;headerlink&quot; title=&quot;算法实现&quot;&gt;&lt;/a&gt;算法实现&lt;/h1&gt;&lt;h2 id=&quot;不带虚拟节点的实现&quot;&gt;&lt;a href=&quot;#不带虚拟节点的实现&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="算法" scheme="https://www.wangfeng.pro/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="分布式" scheme="https://www.wangfeng.pro/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>漏桶算法</title>
    <link href="https://www.wangfeng.pro/2021/04/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95.html"/>
    <id>https://www.wangfeng.pro/2021/04/漏桶算法.html</id>
    <published>2021-04-25T03:52:03.000Z</published>
    <updated>2021-05-23T08:28:48.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:wf2311@163.com&quot;&gt;wf2311&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/4/25 11:52.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeakyBucketRateLimiter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 桶的大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> bucket;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 桶的已用量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> used;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 桶的流出速率</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> rate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流出速率单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TimeUnit rateUnit;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> perMillisRadio;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新刷新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> lastRefreshTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LeakyBucketRateLimiter <span class="title">create</span><span class="params">(<span class="keyword">long</span> bucket, <span class="keyword">int</span> rate, TimeUnit rateUnit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LeakyBucketRateLimiter(bucket, rate, rateUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LeakyBucketRateLimiter</span><span class="params">(<span class="keyword">long</span> bucket, <span class="keyword">int</span> rate, TimeUnit rateUnit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bucket = bucket;</span><br><span class="line">        <span class="keyword">this</span>.rate = rate;</span><br><span class="line">        <span class="keyword">this</span>.rateUnit = rateUnit;</span><br><span class="line">        <span class="keyword">this</span>.perMillisRadio = convertMillisRadio();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">convertMillisRadio</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (rateUnit) &#123;</span><br><span class="line">            <span class="keyword">case</span> MILLISECONDS:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> SECONDS:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">case</span> MINUTES:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1000</span> * <span class="number">60</span>;</span><br><span class="line">            <span class="keyword">case</span> HOURS:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshBucketUsed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (lastRefreshTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> n = (now - lastRefreshTime) / perMillisRadio;</span><br><span class="line">            used = Math.max(<span class="number">0</span>, used - n * rate);</span><br><span class="line">        &#125;</span><br><span class="line">        lastRefreshTime = now;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//刷新桶的使用量</span></span><br><span class="line">        refreshBucketUsed();</span><br><span class="line">        <span class="comment">//如果桶未满，则获取成功</span></span><br><span class="line">        <span class="keyword">if</span> (used + n &lt;= bucket) &#123;</span><br><span class="line">            used += n;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="算法" scheme="https://www.wangfeng.pro/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="限流" scheme="https://www.wangfeng.pro/tags/%E9%99%90%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>02、注册中心与CAP理论</title>
    <link href="https://www.wangfeng.pro/2020/05/02%E3%80%81%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E4%B8%8Ecap%E7%90%86%E8%AE%BA.html"/>
    <id>https://www.wangfeng.pro/2020/05/02、注册中心与cap理论.html</id>
    <published>2020-05-17T07:36:00.000Z</published>
    <updated>2021-05-23T02:17:49.059Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f6becdc1c158ed2a42ec6d39ea0d0b619a735ef20b2a651f7d9670d2ae4b697a">f48401abf4af5ea52f379292f7c52cdee04aaad3c4e76cbf5fb2b7117946b99a083099e166ec30ee523f511c69cad33ef09a118837889c00f08b333563068612f9234df138fc6310441b63371d02b09839f336f72afa3b9f8e22e52c3de67e4fb0fd56fe4272f536df59ad27222fe3befef8b7921c5eb95a19493cdfd79cdca05c0c0772267b5c82fb84185f5c72f57900e551552afc0c52605aee79fbd59aa84dfeddae744860363bb2b2ca5b6d0f07236eea3c26612f7a2e19905784ac20fd1c376e05657a8b2fddf7319df05a468bc251043d034c4294c748fee1ebeff2e5564d66177f2e4d17f5d6445d57f6350e5cf3b473c61e32f68f1864540fbaba1073969a97bb203494c585b8dbb96e951611fdb99964a6142098418d2aadf95962ddc5c3e19ce18d33feea57264a97524881f2ecb53923991d0de540ca727057de786216d9a5d9346d827e003a6ec67b7870b0fdce529f7e6f8f47bd59aab8ee1cc62ceea961249f16b10c94e8b43479bd9df6e3d24e2bcaae2582e1096ca468597d1084cf0487da3be551d1427eff40d8366659a743b9f081735384d7a180b9bb0e967e86aa73571aa7a798bc009542440189ae49416fc85906e8f0bd48471c4becfc7e24b9bb86d6386435ddd894ec16</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      未完成
    
    </summary>
    
      <category term="分布式" scheme="https://www.wangfeng.pro/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="分布式协议" scheme="https://www.wangfeng.pro/categories/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="nacos" scheme="https://www.wangfeng.pro/tags/nacos/"/>
    
      <category term="cap" scheme="https://www.wangfeng.pro/tags/cap/"/>
    
  </entry>
  
  <entry>
    <title>01、CAP与BASE理论</title>
    <link href="https://www.wangfeng.pro/2020/05/01%E3%80%81cap%E4%B8%8Ebase%E7%90%86%E8%AE%BA.html"/>
    <id>https://www.wangfeng.pro/2020/05/01、cap与base理论.html</id>
    <published>2020-05-17T06:38:43.000Z</published>
    <updated>2021-05-18T03:34:44.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>一致性（Consistency）： 除非读取失败，否则不管访问的是哪个节点，在同一时间的数据返回的数据都是完全一致的；</li><li>可用性（Availability）：服务总是能正常响应数据，但不保证是最新数据；</li><li>分区容错性（Partition Tolerance）：在分布式系统内，即使因部分节点或者网络分区故障，导致任意数量的请求响应丢失或者延迟已经发送，后续系统仍能够对外提供服务；  </li></ul><h2 id="侧重点"><a href="#侧重点" class="headerlink" title="侧重点"></a>侧重点</h2><ul><li>一致性强调的不是数据完整性，而是各个节点之间数据一致；</li><li>可用性强调的是服务可用，但不保证数据的一致；</li><li>分区容错性强调的是对分区故障的容错能力，即分布式系统不会因为已经发生过的故障导致整个系统会挂掉；</li></ul><h2 id="CAP权衡"><a href="#CAP权衡" class="headerlink" title="CAP权衡"></a>CAP权衡</h2><h3 id="CA"><a href="#CA" class="headerlink" title="CA"></a>CA</h3><p>由于在分布式系统中，由于网络延迟或网络分区的存在，P是一个基本要求，CA在分布式系统中几乎不存在；</p><h3 id="CP"><a href="#CP" class="headerlink" title="CP"></a>CP</h3><p>必须保证分布式系统的一致性，以至于可以牺牲掉系统的可用作容许系统停机或长时间无响应。例如像Redis、HBASE等分布式存储系统以及想Zookeeper这种分布式协调组件，必须要保证数据的一致性；</p><h3 id="AP"><a href="#AP" class="headerlink" title="AP"></a>AP</h3><p>牺牲分布式系统的强一致性，保证分布式系统的可用性；</p><h1 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p><strong>BASE</strong>是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的简写，BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的结论，是基于CAP定理逐步演化而来的，其核心思想是即使无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/50990721">轻松理解CAP理论</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CAP&quot;&gt;&lt;a href=&quot;#CAP&quot; class=&quot;headerlink&quot; title=&quot;CAP&quot;&gt;&lt;/a&gt;CAP&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;u
      
    
    </summary>
    
      <category term="分布式" scheme="https://www.wangfeng.pro/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="分布式协议" scheme="https://www.wangfeng.pro/categories/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="CAP" scheme="https://www.wangfeng.pro/tags/CAP/"/>
    
      <category term="BASE" scheme="https://www.wangfeng.pro/tags/BASE/"/>
    
  </entry>
  
  <entry>
    <title>K8S中搭建Apollo</title>
    <link href="https://www.wangfeng.pro/2020/05/k8s%E4%B8%AD%E6%90%AD%E5%BB%BAapollo.html"/>
    <id>https://www.wangfeng.pro/2020/05/k8s中搭建apollo.html</id>
    <published>2020-05-10T03:19:03.000Z</published>
    <updated>2021-05-21T05:50:13.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>Rancher</li><li>k8s 1.20</li><li>Helm 3</li><li>MySQL数据库</li></ul><h1 id="添加Apollo-Helm-Chart仓库"><a href="#添加Apollo-Helm-Chart仓库" class="headerlink" title="添加Apollo Helm Chart仓库"></a>添加Apollo Helm Chart仓库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm repo add apollo https://www.apolloconfig.com/charts</span><br><span class="line">helm search repo apollo</span><br></pre></td></tr></table></figure><h1 id="数据库脚本"><a href="#数据库脚本" class="headerlink" title="数据库脚本"></a>数据库脚本</h1><ol><li><p>下载<a href="https://github.com/ctripcorp/apollo/tree/master/scripts/docker-quick-start/sql">apollo/scripts/docker-quick-start/sql</a>目录下的<code>apolloportaldb.sql</code>和<code>apolloconfigdb.sql</code>两个SQL脚本;</p></li><li><p>由于搭建的Apollo服务将会用于公司内网1套开发环境和6套测试环境，所以需要搭建1套<code>apollo-portal</code>服务和7套<code>apollo-configservice</code>和<code>apollo-adminservice</code>服务，对应的需要建立一套<code>ApolloPortalDB</code>和7套<code>ApolloConfigDB</code>:</p><ul><li>使用<code>apolloportaldb.sql</code>建立<code>ApolloConfigDB</code>库；</li><li>使用<code>apolloportaldb.sql</code>建立<code>ApolloConfigDB_20_21</code>、<code>ApolloConfigDB_20_2</code>、<code>ApolloConfigDB_20_207</code>、<code>ApolloConfigDB_20_22</code>、<code>ApolloConfigDB_20_76</code>、<code>ApolloConfigDB_20_91</code>、<code>ApolloConfigDB_20_105</code>库</li></ul></li></ol><h1 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h1><h3 id="部署apollo-configservice和apollo-adminservice"><a href="#部署apollo-configservice和apollo-adminservice" class="headerlink" title="部署apollo-configservice和apollo-adminservice"></a>部署apollo-configservice和apollo-adminservice</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">helm install apollo-service-20-2 \</span><br><span class="line">    --<span class="built_in">set</span> configdb.host=&lt;MYSQL_IP&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.port=&lt;MYSQL_PORT&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.userName=&lt;MYSQL_USERNAME&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.password=&lt;MYSQL_PASSWORD&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.dbName=ApolloConfigDB_20_2 \</span><br><span class="line">    --<span class="built_in">set</span> configdb.service.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> configService.replicaCount=1 \</span><br><span class="line">    --<span class="built_in">set</span> adminService.replicaCount=1 \</span><br><span class="line">    -n apollo \</span><br><span class="line">    apollo/apollo-service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">helm install apollo-service-20-207 \</span><br><span class="line">    --<span class="built_in">set</span> configdb.host=&lt;MYSQL_IP&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.port=&lt;MYSQL_PORT&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.userName=&lt;MYSQL_USERNAME&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.password=&lt;MYSQL_PASSWORD&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.dbName=ApolloConfigDB_20_207 \</span><br><span class="line">    --<span class="built_in">set</span> configdb.service.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> configService.replicaCount=1 \</span><br><span class="line">    --<span class="built_in">set</span> adminService.replicaCount=1 \</span><br><span class="line">    -n apollo \</span><br><span class="line">    apollo/apollo-service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">helm install apollo-service-20-21 \</span><br><span class="line">    --<span class="built_in">set</span> configdb.host=&lt;MYSQL_IP&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.port=&lt;MYSQL_PORT&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.userName=&lt;MYSQL_USERNAME&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.password=&lt;MYSQL_PASSWORD&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.dbName=ApolloConfigDB_20_21 \</span><br><span class="line">    --<span class="built_in">set</span> configdb.service.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> configService.replicaCount=1 \</span><br><span class="line">    --<span class="built_in">set</span> adminService.replicaCount=1 \</span><br><span class="line">    -n apollo \</span><br><span class="line">    apollo/apollo-service</span><br><span class="line"></span><br><span class="line">helm install apollo-service-20-22 \</span><br><span class="line">    --<span class="built_in">set</span> configdb.host=&lt;MYSQL_IP&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.port=&lt;MYSQL_PORT&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.userName=&lt;MYSQL_USERNAME&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.password=&lt;MYSQL_PASSWORD&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.dbName=ApolloConfigDB_20_22 \</span><br><span class="line">    --<span class="built_in">set</span> configdb.service.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> configService.replicaCount=1 \</span><br><span class="line">    --<span class="built_in">set</span> adminService.replicaCount=1 \</span><br><span class="line">    -n apollo \</span><br><span class="line">    apollo/apollo-service</span><br><span class="line"></span><br><span class="line">helm install apollo-service-20-76 \</span><br><span class="line">    --<span class="built_in">set</span> configdb.host=&lt;MYSQL_IP&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.port=&lt;MYSQL_PORT&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.userName=&lt;MYSQL_USERNAME&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.password=&lt;MYSQL_PASSWORD&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.dbName=ApolloConfigDB_20_76 \</span><br><span class="line">    --<span class="built_in">set</span> configdb.service.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> configService.replicaCount=1 \</span><br><span class="line">    --<span class="built_in">set</span> adminService.replicaCount=1 \</span><br><span class="line">    -n apollo \</span><br><span class="line">    apollo/apollo-service</span><br><span class="line"></span><br><span class="line">helm install apollo-service-20-91 \</span><br><span class="line">    --<span class="built_in">set</span> configdb.host=&lt;MYSQL_IP&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.port=&lt;MYSQL_PORT&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.userName=&lt;MYSQL_USERNAME&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.password=&lt;MYSQL_PASSWORD&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.dbName=ApolloConfigDB_20_91 \</span><br><span class="line">    --<span class="built_in">set</span> configdb.service.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> configService.replicaCount=1 \</span><br><span class="line">    --<span class="built_in">set</span> adminService.replicaCount=1 \</span><br><span class="line">    -n apollo \</span><br><span class="line">    apollo/apollo-service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">helm install apollo-service-20-105 \</span><br><span class="line">    --<span class="built_in">set</span> configdb.host=&lt;MYSQL_IP&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.port=&lt;MYSQL_PORT&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.userName=&lt;MYSQL_USERNAME&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.password=&lt;MYSQL_PASSWORD&gt; \</span><br><span class="line">    --<span class="built_in">set</span> configdb.dbName=ApolloConfigDB_20_105 \</span><br><span class="line">    --<span class="built_in">set</span> configdb.service.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> configService.replicaCount=1 \</span><br><span class="line">    --<span class="built_in">set</span> adminService.replicaCount=1 \</span><br><span class="line">    -n apollo \</span><br><span class="line">    apollo/apollo-service</span><br></pre></td></tr></table></figure><h3 id="部署apollo-portal"><a href="#部署apollo-portal" class="headerlink" title="部署apollo-portal"></a>部署apollo-portal</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">helm install apollo-portal \</span><br><span class="line">    --<span class="built_in">set</span> portaldb.host=&lt;MYSQL_IP&gt; \</span><br><span class="line">    --<span class="built_in">set</span> portaldb.port=&lt;MYSQL_PORT&gt; \</span><br><span class="line">    --<span class="built_in">set</span> portaldb.userName=&lt;MYSQL_USERNAME&gt; \</span><br><span class="line">    --<span class="built_in">set</span> portaldb.password=&lt;MYSQL_PASSWORD&gt; \</span><br><span class="line">    --<span class="built_in">set</span> portaldb.dbName=ApolloPortalDB \</span><br><span class="line">    --<span class="built_in">set</span> portaldb.service.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> config.envs=<span class="string">&quot;dev21\,test2\,test22\,test76\,test91\,test105\,test207&quot;</span> \</span><br><span class="line">    --<span class="built_in">set</span> config.metaServers.dev21=http://apollo-service-20-21-apollo-configservice.apollo:8080 \</span><br><span class="line">    --<span class="built_in">set</span> config.metaServers.test2=http://apollo-service-20-2-apollo-configservice.apollo:8080 \</span><br><span class="line">    --<span class="built_in">set</span> config.metaServers.test22=http://apollo-service-20-22-apollo-configservice.apollo:8080 \</span><br><span class="line">    --<span class="built_in">set</span> config.metaServers.test76=http://apollo-service-20-76-apollo-configservice.apollo:8080 \</span><br><span class="line">    --<span class="built_in">set</span> config.metaServers.test91=http://apollo-service-20-91-apollo-configservice.apollo:8080 \</span><br><span class="line">    --<span class="built_in">set</span> config.metaServers.test105=http://apollo-service-20-105-apollo-configservice.apollo:8080 \</span><br><span class="line">    --<span class="built_in">set</span> config.metaServers.test207=http://apollo-service-20-207-apollo-configservice.apollo:8080 \</span><br><span class="line">    --<span class="built_in">set</span> replicaCount=1 \</span><br><span class="line">    -n apollo \</span><br><span class="line">    apollo/apollo-portal</span><br></pre></td></tr></table></figure><h3 id="在Rancher配置端口映射"><a href="#在Rancher配置端口映射" class="headerlink" title="在Rancher配置端口映射"></a>在Rancher配置端口映射</h3><h4 id="准备工作：搭建好metalb，做好虚拟ip规划"><a href="#准备工作：搭建好metalb，做好虚拟ip规划" class="headerlink" title="准备工作：搭建好metalb，做好虚拟ip规划"></a>准备工作：搭建好metalb，做好虚拟ip规划</h4><ul><li><p>metalb搭建：参考<a href="https://metallb.universe.tf/installation/">metalb官方安装文档</a></p></li><li><p>IP规划</p><ul><li><p>Apollo Portal<br>192.168.40.31:8070</p></li><li><p>Apollo ConfigServer</p><table><thead><tr><th>环境</th><th>ip:port</th></tr></thead><tbody><tr><td>dev21</td><td>192.168.40.31:8080</td></tr><tr><td>test02</td><td>192.168.40.32:8080</td></tr><tr><td>test22</td><td>192.168.40.33:8080</td></tr><tr><td>test76</td><td>192.168.40.34:8080</td></tr><tr><td>test91</td><td>192.168.40.35:8080</td></tr><tr><td>test105</td><td>192.168.40.36:8080</td></tr><tr><td>test207</td><td>192.168.40.37:8080</td></tr></tbody></table></li></ul></li></ul><p>部署脚本：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">cattle.io/creator:</span> <span class="string">norman</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">apollo-portal-port</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">apollo</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">metallb.universe.tf/allow-shared-ip:</span> <span class="string">ip_192_168_40_31</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line">  <span class="attr">loadBalancerIP:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.31</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8070</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8070</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">apollo-portal</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">cattle.io/creator:</span> <span class="string">norman</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">apollo-20-21-port</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">apollo</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">metallb.universe.tf/allow-shared-ip:</span> <span class="string">ip_192_168_40_31</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line">  <span class="attr">loadBalancerIP:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.31</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">apollo-service-20-21-apollo-configservice</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">cattle.io/creator:</span> <span class="string">norman</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">apollo-20-02-port</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">apollo</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">metallb.universe.tf/allow-shared-ip:</span> <span class="string">ip_192_168_40_32</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line">  <span class="attr">loadBalancerIP:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.32</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">apollo-service-20-2-apollo-configservice</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">cattle.io/creator:</span> <span class="string">norman</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">apollo-20-22-port</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">apollo</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">metallb.universe.tf/allow-shared-ip:</span> <span class="string">ip_192_168_40_33</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line">  <span class="attr">loadBalancerIP:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.33</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">apollo-service-20-22-apollo-configservice</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">cattle.io/creator:</span> <span class="string">norman</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">apollo-20-76-port</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">apollo</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">metallb.universe.tf/allow-shared-ip:</span> <span class="string">ip_192_168_40_34</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line">  <span class="attr">loadBalancerIP:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.34</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">apollo-service-20-76-apollo-configservice</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">cattle.io/creator:</span> <span class="string">norman</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">apollo-20-91-port</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">apollo</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">metallb.universe.tf/allow-shared-ip:</span> <span class="string">ip_192_168_40_35</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line">  <span class="attr">loadBalancerIP:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.35</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">apollo-service-20-91-apollo-configservice</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">cattle.io/creator:</span> <span class="string">norman</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">apollo-20-105-port</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">apollo</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">metallb.universe.tf/allow-shared-ip:</span> <span class="string">ip_192_168_40_36</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line">  <span class="attr">loadBalancerIP:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.36</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">apollo-service-20-105-apollo-configservice</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">cattle.io/creator:</span> <span class="string">norman</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">apollo-20-207-port</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">apollo</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">metallb.universe.tf/allow-shared-ip:</span> <span class="string">ip_192_168_40_37</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line">  <span class="attr">loadBalancerIP:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.37</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">apollo-service-20-207-apollo-configservice</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=_241-%e5%9f%ba%e4%ba%8ekubernetes%e5%8e%9f%e7%94%9f%e6%9c%8d%e5%8a%a1%e5%8f%91%e7%8e%b0">基于kubernetes原生服务发现</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Rancher&lt;/li&gt;
&lt;li&gt;k8s 1.20&lt;/li&gt;
&lt;li&gt;Helm 3&lt;/li&gt;
&lt;li&gt;MySQL
      
    
    </summary>
    
      <category term="微服务" scheme="https://www.wangfeng.pro/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="配置中心" scheme="https://www.wangfeng.pro/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
    
      <category term="Apollo" scheme="https://www.wangfeng.pro/tags/Apollo/"/>
    
      <category term="K8S" scheme="https://www.wangfeng.pro/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>让处于事务中的特定代码在事务提交成功后再执行</title>
    <link href="https://www.wangfeng.pro/2019/11/%E8%AE%A9%E5%A4%84%E4%BA%8E%E4%BA%8B%E5%8A%A1%E4%B8%AD%E7%9A%84%E7%89%B9%E5%AE%9A%E4%BB%A3%E7%A0%81%E5%9C%A8%E4%BA%8B%E5%8A%A1%E6%8F%90%E4%BA%A4%E6%88%90%E5%8A%9F%E5%90%8E%E5%86%8D%E6%89%A7%E8%A1%8C.html"/>
    <id>https://www.wangfeng.pro/2019/11/让处于事务中的特定代码在事务提交成功后再执行.html</id>
    <published>2019-11-19T12:11:43.000Z</published>
    <updated>2021-05-14T13:06:17.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>之前遇到过一个这样的问题：在服务A里的执行一个保存数据库方法，数据保存成功后会将主键ID通过MQ发送给服务B,服务B再根据主键ID去查询保存的数据，进行其他逻辑处理。后来发现，在服务B中根据MQ发送过来的ID通过数据库偶尔会查不到数据信息。</p><p>后来通过调试才发现，是因为在服务A里的保存方法加了事务注解，保存的数据结果只有在当前方法执行完成后才会对外生效，而MQ消息则是在保存方法执行前发送的，如果服务B在服务A中保存方法执行完成前就收到了MQ消息，就会导致上述问题发生。同样，如果在MQ发送成功后，保存方法发生了异常导致事务回滚，服务B也会查不到数据或者查询到错误的数据。</p><span id="more"></span><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>导致上述问题发生的根本原因还是因为发送MQ消息是在加了事务回滚的方法内部执行的，通过该方法保存或更新的数据只有在整个方法结束后才会对外生效，而MQ的消费者却有可能于改方法执行完成前收到消息。因此，最直接的解决办法是要将MQ消息放到事务方法结束后再执行。</p><p>但是，由于在项目中有很多处都是采用上述的这种逻辑，一个个改起来比较麻烦，最好能有一个通用的方式能够尽量少改动之前的业务逻辑代码就能解决问题。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>对于这种通用业务的问题第一个想到的解决方法就是利用AOP：拦截所有带有事务回滚注解(<code>@Transactional</code>)的方法，通过某种方式获取到该方法内部所有要执行的发送MQ的调用代码，让它们在事务方法执行成功后在执行。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p><code>TransactionMessageAspect</code>继承<code>TransactionSynchronizationAdapter</code>,实现对所有带有<code>@Transactional</code>注解方法的拦截：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionMessageAspect</span> <span class="keyword">extends</span> <span class="title">TransactionSynchronizationAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TransactionInterceptorHandler transactionInterceptorHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入口：拦截带有 <span class="doctag">@Transactional</span>的方法,标记当前方法已进入事务模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(org.springframework.transaction.annotation.Transactional)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerTransactionSyncrhonization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TransactionSynchronizationManager.registerSynchronization(<span class="keyword">this</span>);</span><br><span class="line">        transactionInterceptorHandler.signInTransaction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeCommit</span><span class="params">(<span class="keyword">boolean</span> readOnly)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before commit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在事务结束并且没被回滚时再依次执行Callable方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (status != STATUS_ROLLED_BACK &amp;&amp; !CollectionUtils.isEmpty(transactionInterceptorHandler.getActions())) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Callable action : transactionInterceptorHandler.getActions()) &#123;</span><br><span class="line">                    action.call();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            transactionInterceptorHandler.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCommit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">suspend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;suspend&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resume&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;flush&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeCompletion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;beforeCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TransactionInterceptorHandler</code>:使用<code>ThreadLocal</code>对当前线程中要执行的发送MQ方法进行缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionInterceptorHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Entity&gt; cache = ThreadLocal.withInitial(() -&gt; <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cache.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entity e = cache.get();</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e.getInTransaction() != <span class="keyword">null</span> &amp;&amp; e.getInTransaction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Callable&gt; <span class="title">getActions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entity e = cache.get();</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e.getActions();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signInTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entity e= cache.get();</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">            e = <span class="keyword">new</span> Entity();</span><br><span class="line">            e.setInTransaction(<span class="keyword">true</span>);</span><br><span class="line">            e.setActions(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        cache.set(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAction</span><span class="params">(Callable action)</span> </span>&#123;</span><br><span class="line">        Entity e = cache.get();</span><br><span class="line">        e.getActions().add(action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Entity</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Callable&gt; actions;</span><br><span class="line">        <span class="keyword">private</span> Boolean inTransaction;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MqMessage: 发送MQ消息的封装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqMessage</span> <span class="keyword">implements</span> <span class="title">BaseMessage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TransactionInterceptorHandler transactionInterceptorHandler;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span> + LocalDateTime.now() + <span class="string">&quot;] sendMsg :&quot;</span> + JSON.toJSONString(message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其更改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqMessage</span> <span class="keyword">implements</span> <span class="title">BaseMessage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TransactionInterceptorHandler transactionInterceptorHandler;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (transactionInterceptorHandler.hasTransaction()) &#123;</span><br><span class="line">            Callable&lt;Object&gt; callable = () -&gt; doSendMessage(message);</span><br><span class="line">            transactionInterceptorHandler.addAction(callable);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            doSendMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">doSendMessage</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span> + LocalDateTime.now() + <span class="string">&quot;] sendMsg :&quot;</span> + JSON.toJSONString(message));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><ol><li><code>TransactionMessageAspect</code>会拦截带有<code>@Transactional</code>注解的方法，使用<code>TransactionInterceptorHandler.signInTransaction()</code>标记当前方法已进入事务模式;</li><li>如果在执行事务方法的过程中，有调用<code>MqMessage.sendMessage()</code>方法进行传递，会先将要发送的消息逻辑封装到<code>Callable</code>中，并通过<code>TransactionInterceptorHandler.addAction</code>保存在本地线程中；</li><li>当事务提交成功并没有回滚后再通过<code>TransactionMessageAspect.afterCompletion()</code>方法执行保存在本地线程中要发送MQ的调用方法；</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://stackoverflow.com/questions/23651464/spring-hibernate-how-to-call-some-method-after-transaction-commit-or-transacti/23653651">Spring hibernate , how to call some method after transaction commit or transaction rollback</a></li><li><a href="https://stackoverflow.com/questions/15026142/creating-a-post-commit-when-using-transaction-in-spring">Creating a post commit when using transaction in Spring</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;之前遇到过一个这样的问题：在服务A里的执行一个保存数据库方法，数据保存成功后会将主键ID通过MQ发送给服务B,服务B再根据主键ID去查询保存的数据，进行其他逻辑处理。后来发现，在服务B中根据MQ发送过来的ID通过数据库偶尔会查不到数据信息。&lt;/p&gt;
&lt;p&gt;后来通过调试才发现，是因为在服务A里的保存方法加了事务注解，保存的数据结果只有在当前方法执行完成后才会对外生效，而MQ消息则是在保存方法执行前发送的，如果服务B在服务A中保存方法执行完成前就收到了MQ消息，就会导致上述问题发生。同样，如果在MQ发送成功后，保存方法发生了异常导致事务回滚，服务B也会查不到数据或者查询到错误的数据。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://www.wangfeng.pro/categories/Spring/"/>
    
    
      <category term="Aop" scheme="https://www.wangfeng.pro/tags/Aop/"/>
    
      <category term="ThreadLocal" scheme="https://www.wangfeng.pro/tags/ThreadLocal/"/>
    
      <category term="Transactional" scheme="https://www.wangfeng.pro/tags/Transactional/"/>
    
  </entry>
  
  <entry>
    <title>wakatime手动同步本地离线数据至服务器</title>
    <link href="https://www.wangfeng.pro/2019/10/wakatime%E6%89%8B%E5%8A%A8%E5%90%8C%E6%AD%A5%E6%9C%AC%E5%9C%B0%E7%A6%BB%E7%BA%BF%E6%95%B0%E6%8D%AE%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
    <id>https://www.wangfeng.pro/2019/10/wakatime手动同步本地离线数据至服务器.html</id>
    <published>2019-10-20T05:40:33.000Z</published>
    <updated>2021-05-14T11:59:44.321Z</updated>
    
    <content type="html"><![CDATA[<ol><li>控制台执行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install --upgrade wakatime</span><br></pre></td></tr></table></figure><span id="more"></span><ol start="2"><li>同步本地的9999条heartbeat数据至服务器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wakatime --sync-offline-activity 9999</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://github.com/wakatime/wakatime/issues/157">How can i force sync all my coding activity?</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;控制台执行&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo pip install --upgrade wakatime&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="其它" scheme="https://www.wangfeng.pro/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="WakaTime" scheme="https://www.wangfeng.pro/tags/WakaTime/"/>
    
  </entry>
  
  <entry>
    <title>ssh快捷登录并执行命令</title>
    <link href="https://www.wangfeng.pro/2019/09/ssh%E5%BF%AB%E6%8D%B7%E7%99%BB%E5%BD%95%E5%B9%B6%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4.html"/>
    <id>https://www.wangfeng.pro/2019/09/ssh快捷登录并执行命令.html</id>
    <published>2019-09-30T07:36:15.000Z</published>
    <updated>2021-04-29T12:06:54.512Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>公司有很多测试服务器，经常需要登录这些服务器测试来查看服务日志。由于这些测试服务器只能通过账号+密码的方式登录，Windows下可以通过Xshell实现自动登录，但在MacOS中并没有发现比较好的工具，<br>在终端通过SSH方式登录时每次都需要输入密码，十分麻烦，经过一番搜索，最终实现了使用<code>expect</code>在终端直接ssh自动登录,并在登录成功后执行指定脚本。</p></blockquote><span id="more"></span><h1 id="安装expect"><a href="#安装expect" class="headerlink" title="安装expect"></a>安装expect</h1><h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS:"></a>MacOS:</h2><p>直接通过<a href="https://brew.sh/index_zh-cn">Homebrew</a>来安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install expect</span><br></pre></td></tr></table></figure><h2 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h2><p>请自行搜索</p><h1 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h1><p>在<code>/usr/local/bin</code>目录下新建脚本<code>auth_ssh.sh</code>和<code>do_ssh.sh</code>：</p><h2 id="auto-ssh-sh"><a href="#auto-ssh-sh" class="headerlink" title="auto_ssh.sh"></a>auto_ssh.sh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">host=<span class="variable">$1</span></span><br><span class="line">port=<span class="variable">$2</span></span><br><span class="line">user=<span class="variable">$3</span></span><br><span class="line">pswd=<span class="variable">$4</span></span><br><span class="line">cmd=<span class="variable">$5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    cmd = <span class="string">&quot;cd ~/&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">do_ssh.sh <span class="variable">$host</span> <span class="variable">$port</span> <span class="variable">$user</span> <span class="variable">$pswd</span> <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="do-ssh-sh"><a href="#do-ssh-sh" class="headerlink" title="do_ssh.sh"></a>do_ssh.sh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> timeout 30</span><br><span class="line"><span class="built_in">set</span> host [lindex <span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> port [lindex <span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> user [lindex <span class="variable">$argv</span> 2]</span><br><span class="line"><span class="built_in">set</span> pswd [lindex <span class="variable">$argv</span> 3]</span><br><span class="line"><span class="built_in">set</span> cmd [lindex <span class="variable">$argv</span> 4]</span><br><span class="line"></span><br><span class="line">spawn ssh -p <span class="variable">$port</span> <span class="variable">$user</span>@<span class="variable">$host</span></span><br><span class="line">expect &#123;</span><br><span class="line">        <span class="string">&quot;(yes/no)?&quot;</span></span><br><span class="line">        &#123;send <span class="string">&quot;yes\n&quot;</span>;exp_continue&#125;</span><br><span class="line">        <span class="string">&quot;password:&quot;</span></span><br><span class="line">        &#123;send <span class="string">&quot;<span class="variable">$pswd</span>\n&quot;</span>&#125;</span><br><span class="line">        <span class="string">&quot;Password:&quot;</span></span><br><span class="line">        &#123;send <span class="string">&quot;<span class="variable">$pswd</span>\n&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">expect  &#123;</span><br><span class="line">    <span class="string">&quot;login&quot;</span></span><br><span class="line">    &#123;send <span class="string">&quot;<span class="variable">$cmd</span>\n&quot;</span>&#125;</span><br><span class="line">&#125; </span><br><span class="line">interact</span><br></pre></td></tr></table></figure><p>注意：第20行的<code>login</code>表示期待登录成功后的输出会包含字符串<code>login</code>，请根据实际情况做修改</p><p>之后在终端执行命令 <code>auto_ssh &lt;host&gt; &lt;port&gt; &lt;user&gt; &lt;pswd&gt; &quot;&lt;cmd&gt;&quot;</code>即可。</p><h1 id="为登录命令配置别名"><a href="#为登录命令配置别名" class="headerlink" title="为登录命令配置别名"></a>为登录命令配置别名</h1><p>在<code>~/.bash_profile</code>添加命令别名,例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ss76=<span class="string">&quot;auto_ssh.sh 192.168.12.76 22 root abcd \&quot;cd /home/tomcat/\&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>之后在终端<code>ss76</code>即可自动登录到<code>192.168.12.76</code>并切换到<code>/home/tomcat/</code>目录中</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://adolphor.com/blog/2017/06/26/iterm2-expect-auto-ssh-login.html">iterm2 配合 expect 实现 SSH 自动登陆</a></li><li><a href="http://zyy1217.com/2017/07/02/linux%20expect%E8%AF%A6%E8%A7%A3/">linux expect详解(ssh自动登录，部署)</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;公司有很多测试服务器，经常需要登录这些服务器测试来查看服务日志。由于这些测试服务器只能通过账号+密码的方式登录，Windows下可以通过Xshell实现自动登录，但在MacOS中并没有发现比较好的工具，&lt;br&gt;在终端通过SSH方式登录时每次都需要输入密码，十分麻烦，经过一番搜索，最终实现了使用&lt;code&gt;expect&lt;/code&gt;在终端直接ssh自动登录,并在登录成功后执行指定脚本。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.wangfeng.pro/categories/Linux/"/>
    
    
      <category term="ssh" scheme="https://www.wangfeng.pro/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Mac中在升级ruby版本后colorls命令报错的解决办法</title>
    <link href="https://www.wangfeng.pro/2019/09/mac%E4%B8%AD%E5%9C%A8%E5%8D%87%E7%BA%A7ruby%E7%89%88%E6%9C%AC%E5%90%8Ecolorls%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html"/>
    <id>https://www.wangfeng.pro/2019/09/mac中在升级ruby版本后colorls命令报错的解决办法.html</id>
    <published>2019-09-25T13:33:53.000Z</published>
    <updated>2021-04-29T12:04:57.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>为了在mac中使用tmuxinator，按照网上的教程使用rvm升级了系统的ruby版本，ruby升级完成后却发现执行colorls相关命令时，报了如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/dependency.rb:319:<span class="keyword">in</span> `to_specs<span class="string">&#x27;: Could not find &#x27;</span>clocale<span class="string">&#x27; (&gt;= 0) among 20 total gem(s) (Gem::LoadError)</span></span><br><span class="line"><span class="string">Checked in &#x27;</span>GEM_PATH=/Users/em/.gem/ruby/2.3.0:/Library/Ruby/Gems/2.3.0:/System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/gems/2.3.0<span class="string">&#x27;, execute `gem env` for more information</span></span><br><span class="line"><span class="string">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/specification.rb:1442:in `block in activate_dependencies&#x27;</span></span><br><span class="line">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/specification.rb:1431:<span class="keyword">in</span> `each<span class="string">&#x27;</span></span><br><span class="line"><span class="string">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/specification.rb:1431:in `activate_dependencies&#x27;</span></span><br><span class="line">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/specification.rb:1413:<span class="keyword">in</span> `activate<span class="string">&#x27;</span></span><br><span class="line"><span class="string">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems.rb:196:in `rescue in try_activate&#x27;</span></span><br><span class="line">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems.rb:193:<span class="keyword">in</span> `try_activate<span class="string">&#x27;</span></span><br><span class="line"><span class="string">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:125:in `rescue in require&#x27;</span></span><br><span class="line">from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:39:<span class="keyword">in</span> `require<span class="string">&#x27;</span></span><br><span class="line"><span class="string">from /Library/Ruby/Gems/2.3.0/gems/colorls-1.1.1/exe/colorls:3:in `&lt;top (required)&gt;&#x27;</span></span><br><span class="line">from /usr/<span class="built_in">local</span>/bin/colorls:22:<span class="keyword">in</span> `load<span class="string">&#x27;</span></span><br><span class="line"><span class="string">from /usr/local/bin/colorls:22:in `&lt;main&gt;&#x27;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在终端执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br><span class="line">brew install rbenv</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;/usr/local/opt/openssl/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export LDFLAGS=&quot;-L/usr/local/opt/openssl/lib&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export CPPFLAGS=&quot;-I/usr/local/opt/openssl/include&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PKG_CONFIG_PATH=&quot;/usr/local/opt/openssl/lib/pkgconfig&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">sudo gem pristine --all <span class="comment">#that produced a permissions error, but i don&#x27;t care everything worked</span></span><br><span class="line">sudo gem install colorls</span><br></pre></td></tr></table></figure><p>如果执行<code>xcode-select --install</code>时提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select: error: <span class="built_in">command</span> line tools are already installed, use <span class="string">&quot;Software Update&quot;</span> to install updates</span><br></pre></td></tr></table></figure><p>可以忽略。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://github.com/avdv/clocale/issues/22">https://github.com/avdv/clocale/issues/22</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;为了在mac中使用tmuxinator，按照网上的教程使用rvm升级了系统的ruby版本，ruby升级完成后却发现执行colorls相关命令时，报了如下错误：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/dependency.rb:319:&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `to_specs&lt;span class=&quot;string&quot;&gt;&amp;#x27;: Could not find &amp;#x27;&lt;/span&gt;clocale&lt;span class=&quot;string&quot;&gt;&amp;#x27; (&amp;gt;= 0) among 20 total gem(s) (Gem::LoadError)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Checked in &amp;#x27;&lt;/span&gt;GEM_PATH=/Users/em/.gem/ruby/2.3.0:/Library/Ruby/Gems/2.3.0:/System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/gems/2.3.0&lt;span class=&quot;string&quot;&gt;&amp;#x27;, execute `gem env` for more information&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/specification.rb:1442:in `block in activate_dependencies&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/specification.rb:1431:&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `each&lt;span class=&quot;string&quot;&gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/specification.rb:1431:in `activate_dependencies&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/specification.rb:1413:&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `activate&lt;span class=&quot;string&quot;&gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems.rb:196:in `rescue in try_activate&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems.rb:193:&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `try_activate&lt;span class=&quot;string&quot;&gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:125:in `rescue in require&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	from /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:39:&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `require&lt;span class=&quot;string&quot;&gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	from /Library/Ruby/Gems/2.3.0/gems/colorls-1.1.1/exe/colorls:3:in `&amp;lt;top (required)&amp;gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	from /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/colorls:22:&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `load&lt;span class=&quot;string&quot;&gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	from /usr/local/bin/colorls:22:in `&amp;lt;main&amp;gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="其它" scheme="https://www.wangfeng.pro/categories/%E5%85%B6%E5%AE%83/"/>
    
      <category term="Mac" scheme="https://www.wangfeng.pro/categories/%E5%85%B6%E5%AE%83/Mac/"/>
    
    
      <category term="colorls" scheme="https://www.wangfeng.pro/tags/colorls/"/>
    
      <category term="gem" scheme="https://www.wangfeng.pro/tags/gem/"/>
    
  </entry>
  
  <entry>
    <title>彻底搞懂字符串比较问题和String.intern()方法的作用</title>
    <link href="https://www.wangfeng.pro/2019/01/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E9%97%AE%E9%A2%98%E5%92%8Cstring-intern-%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%9C%E7%94%A8.html"/>
    <id>https://www.wangfeng.pro/2019/01/彻底搞懂字符串比较问题和string-intern-方法的作用.html</id>
    <published>2019-01-30T09:55:56.000Z</published>
    <updated>2021-05-14T13:06:17.483Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>网上看面试题时经常看到各种字符串比较的问题，有时看着答案也不知道为什么。于是今天花了一点时间对此做了一下深入的学习，在此记录一下。</p></blockquote><span id="more"></span><h2 id="创建字符串时需要注意的规则"><a href="#创建字符串时需要注意的规则" class="headerlink" title="创建字符串时需要注意的规则"></a>创建字符串时需要注意的规则</h2><p>这里列的规则是我结合JDK里的文档和《<a href="https://www.cnblogs.com/Kidezyq/p/8040338.html">Java-String.intern的深入研究</a>》、《<a href="https://blog.csdn.net/soonfly/article/details/70147205">几张图轻松理解String.intern()</a>》这两篇文章，对于理解下面的实例中我认为比较关键的几点，可能有些理解不正确。</p><p>1、通过<code>new String(String original)</code>会有涉及到两个对象。<br>例如 <code>String str = new String(&quot;a&quot;)</code>语句,会先将构造函数里的参数<code>original</code>指向在字符串常量池(简称SCP),如果常量池中不存在，则会在常量池中生成字符串<strong>a</strong>，再在堆(HEAP)中生成变量<code>str</code>;</p><p>2、如果一个字符串<code>str</code>是由多个常量字符串通过**+**拼接的，则字符串<code>str</code>会直接生成或指向在字符串常量池中。</p><p>情况一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br></pre></td></tr></table></figure><p>情况二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">String str = <span class="string">&quot;a&quot;</span> + b;</span><br></pre></td></tr></table></figure><p>情况三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">String str = <span class="string">&quot;a&quot;</span> + b;</span><br></pre></td></tr></table></figure><p>在上面的三种情况中，第一种和第三种情况的<code>str</code>都是由常量字符串直接拼接的，所以<code>str</code>会直接指向字符串常量池；而情况二中由于存在局部变量<code>b</code>,编译器将会通过<code>StringBuilder.append()</code>方法拼接字符串<code>a</code>和变量<code>b</code>后，最终再通过<code>StringBuilder.toString()</code>方法得到<code>str</code>，<code>str</code>会在堆中生成。</p><p>3、JDK 1.7后，在执行 <code>String.intern()</code>方法时，虚拟机会去字符串常量池检查是否已存在该字符串，如果存在则会直接引用常量池中该字符串的地址作为返回结果的引用地址；如果不存在，则会在常量池中生成一个对在原字符串(位于堆中)的引用作为，而不是像 JDK 1.6之前仍将原字符串拷贝到常量池中。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP</span></span><br><span class="line">    String i = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>; <span class="comment">//SCP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP</span></span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>String c = &quot;ab&quot;</code>将直接在字符串常量池生成字符串<strong>ab</strong>；由于<code>i</code>是由两个字符串常量<strong>a</strong>和<strong>b</strong>直接拼接而成，所以<code>i</code>也会指向字符串常量池；由于<code>i.intern()</code>得到的字符串在常量池中已存在，所以<code>j</code>也指向常量池。因此<code>c</code>、<code>i</code>、<code>j</code>指向的同一个地址。因此输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP</span></span><br><span class="line">    String i = <span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;b&quot;</span>); <span class="comment">//HEAP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP</span></span><br><span class="line">    System.out.println(c == i);</span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>String i = new String(&quot;a&quot;) + new String(&quot;b&quot;);</code>语句会在字符串常量池中生成两个字符串<strong>a</strong>和<strong>b</strong>,在堆中生成3个对象：两个是由<code>new String()</code>生成的，另外一个是<code>i</code>。结合<a href="#%E5%AE%9E%E4%BE%8B1">实例1</a>的说明，可知：<code>c</code>和<code>j</code>指向字符串常量池中指向地址，而<code>i</code>指向堆中。因此输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP</span></span><br><span class="line">    String i = <span class="keyword">new</span> String(<span class="string">&quot;ab&quot;</span>); <span class="comment">//HEAP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP</span></span><br><span class="line">    System.out.println(c == i);</span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和<a href="#%E5%AE%9E%E4%BE%8B2">实例2</a>中类似，<code>String i = new String(&quot;ab&quot;);</code>语句中构造函数里的字符串<strong>ab</strong>会直接指向由<code>String c = &quot;ab&quot;;</code>语句在字符串常量池中生成的字符串的地址，在堆中生成一个字符串对象<code>i</code>。所以输出结果和<a href="#%E5%AE%9E%E4%BE%8B2">实例2</a>一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="实例4"><a href="#实例4" class="headerlink" title="实例4"></a>实例4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP</span></span><br><span class="line">    String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    String i = <span class="string">&quot;a&quot;</span> + b; <span class="comment">//HEAP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP</span></span><br><span class="line">    System.out.println(c == i);</span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据本文开头的第2点规则，可知<code>String i = &quot;a&quot; + b;</code>语句中生成的变量<code>i</code>是位于堆中的，而<code>c</code>和<code>j</code>都指向字符串常量池。因此输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="实例5"><a href="#实例5" class="headerlink" title="实例5"></a>实例5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    String i = <span class="string">&quot;a&quot;</span> + b; <span class="comment">//HEAP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP -&gt; HEAP</span></span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP -&gt; HEAP</span></span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与<a href="#%E5%AE%9E%E4%BE%8B4">实例4</a>中不同的是，虽然<code>i</code>是位于堆中，但是在执行<code>String j = i.intern()</code>时，由于字符串常量池中不存在字符串<strong>ab</strong>，根据本文开头的第3点规则，此时并不会直接把字符串<strong>ab</strong>复制在字符串常量池中，而是在常量池中为字符串<strong>ab</strong>生成指向堆中对象<strong>i</strong>的引用，包括之后的语句<code>String c = &quot;ab&quot;;</code>中<code>c</code>指向的也是常量池中指向堆中对象<strong>i</strong>的引用，所有<code>c</code>、<code>i</code>、<code>j</code>指向的实际是同一个地址。因此输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="实例6"><a href="#实例6" class="headerlink" title="实例6"></a>实例6</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String i = <span class="keyword">new</span> String(<span class="string">&quot;ab&quot;</span>); <span class="comment">//HEAP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP</span></span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP</span></span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不仔细思考，可能会认为输出结果应该和<a href="#%E5%AE%9E%E4%BE%8B5">实例5</a>一样，但实际的输出结果却是如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>参考<a href="#%E5%AE%9E%E4%BE%8B3">实例3</a>，想清楚<code>String i = new String(&quot;ab&quot;);</code>是会先在字符串常量池生成字符串<strong>ab</strong>这一点后，就很容易知道和<a href="#%E5%AE%9E%E4%BE%8B5">实例5</a>的区别了。</p><h3 id="实例7"><a href="#实例7" class="headerlink" title="实例7"></a>实例7</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    String i = <span class="string">&quot;a&quot;</span> + b; <span class="comment">//SCP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP</span></span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP</span></span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与<a href="#%E5%AE%9E%E4%BE%8B5">实例5</a>的区别在于对象<code>b</code>是用<code>final</code>修饰的，可以看做局部常量，字符串对象<code>i</code>是由两个字符串常量通过<code>+</code>直接拼接而成，<code>i</code>将指向字符串常量池。因此输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="实例8"><a href="#实例8" class="headerlink" title="实例8"></a>实例8</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">(<span class="keyword">final</span> String b)</span> </span>&#123;</span><br><span class="line">    String i = <span class="string">&quot;a&quot;</span> + b; <span class="comment">//HEAP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP -&gt; HEAP</span></span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP -&gt; HEAP</span></span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    test8(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个实例的结果和<a href="#%E5%AE%9E%E4%BE%8B7">实例7</a>一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>但是含义不同，虽然在方法<code>test8(final String b)</code>中，形参<code>b</code>是用<code>final</code>修饰的，但<code>b</code>的值仍然是外部传来的，所以不能看做字符串常量。因此<code>i</code>是执行堆中的对象，而<code>j</code>和<code>c</code>是因为执行<code>i.intern()</code>之后，间接通过常量池指向了和<code>i</code>同一个地址。<br>调换一下上述方法中语句的位置，也可以验证改实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test8_1</span><span class="params">(<span class="keyword">final</span> String b)</span> </span>&#123;</span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;    <span class="comment">//SCP</span></span><br><span class="line">    String i = <span class="string">&quot;a&quot;</span> + b; <span class="comment">//HEAP</span></span><br><span class="line">    String j = i.intern();  <span class="comment">//SCP</span></span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(c == j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    test8_1(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>String c = &quot;ab&quot;; </code>语句提至方法内第一行后，在执行<code>i.intern()</code>时，由于常量池中已存在字符串<strong>ab</strong>，因此<code>j</code>将直接指向常量池中字符串<strong>ab</strong>的地址，而<code>i</code>是位于堆中的对象，所以输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="实例9"><a href="#实例9" class="headerlink" title="实例9"></a>实例9</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    String i = <span class="string">&quot;a&quot;</span> + b; <span class="comment">//HEAP_1</span></span><br><span class="line">    String l = <span class="string">&quot;a&quot;</span> + b; <span class="comment">//HEAP_2</span></span><br><span class="line">    String j = l.intern();  <span class="comment">//SCP -&gt; HEAP_2</span></span><br><span class="line">    String c = <span class="string">&quot;ab&quot;</span>;     <span class="comment">//SCP -&gt; HEAP_2</span></span><br><span class="line">    System.out.println(i.equals(j));</span><br><span class="line">    System.out.println(i == j);</span><br><span class="line">    System.out.println(l == j);</span><br><span class="line">    System.out.println(l == c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合前面的例子可知，<code>i</code>和<code>j</code>是位于堆中两个独立的对象。由于有<code>l.intern()</code>操作，<code>j</code>、<code>c</code>和<code>l</code>最终都指向了同一个地址。因此输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.cnblogs.com/Kidezyq/p/8040338.html">https://www.cnblogs.com/Kidezyq/p/8040338.html</a></li><li><a href="https://blog.csdn.net/soonfly/article/details/70147205">https://blog.csdn.net/soonfly/article/details/70147205</a></li><li><a href="https://www.geeksforgeeks.org/interning-of-string/">https://www.geeksforgeeks.org/interning-of-string/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;网上看面试题时经常看到各种字符串比较的问题，有时看着答案也不知道为什么。于是今天花了一点时间对此做了一下深入的学习，在此记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.wangfeng.pro/categories/Java/"/>
    
      <category term="Java基础" scheme="https://www.wangfeng.pro/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wangfeng.pro/tags/Java/"/>
    
      <category term="String" scheme="https://www.wangfeng.pro/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>使用正则表达式解析Nginx默认日志</title>
    <link href="https://www.wangfeng.pro/2019/01/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90nginx%E9%BB%98%E8%AE%A4%E6%97%A5%E5%BF%97.html"/>
    <id>https://www.wangfeng.pro/2019/01/使用正则表达式解析nginx默认日志.html</id>
    <published>2019-01-26T05:13:03.000Z</published>
    <updated>2021-05-14T13:06:17.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>想通过 Nginx 的 access.log 分析网站的访问情况，但是直接通过日志文件看不太直观，于是想通过代码把日志文件解析并保存数据库中，这样分析起来更方便。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>参考 <a href="https://blog.csdn.net/thlzjfefe/article/details/83349548">nginx日志解析：java正则解析</a> 这篇文章，通过使用正则表达式把日志文件中的各个参数解析出来即可。</p><p>比如，我的服务器上 Nginx 记录的日志格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">203.208.60.89 - - [04/Jan/2019:16:06:38 +0800] <span class="string">&quot;GET /atom.xml HTTP/1.1&quot;</span> 200 273932 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot;</span></span><br></pre></td></tr></table></figure><p>对应的 Java 正则表达式就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;ip&gt;\d+\.\d+\.\d+\.\d+)( - - \[)(?&lt;datetime&gt;[\s\S]+)(?&lt;t1&gt;\][\s<span class="string">&quot;]+)(?&lt;request&gt;[A-Z]+) (?&lt;url&gt;[\S]*) (?&lt;protocol&gt;[\S]+)[&quot;</span>] (?&lt;code&gt;\d+) (?&lt;sendbytes&gt;\d+) [<span class="string">&quot;](?&lt;refferer&gt;[\S]*)[&quot;</span>] [<span class="string">&quot;](?&lt;useragent&gt;[\S\s]+)[&quot;</span>]</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><h3 id="LogEntity类用于保存解析后的日志信息"><a href="#LogEntity类用于保存解析后的日志信息" class="headerlink" title="LogEntity类用于保存解析后的日志信息"></a><code>LogEntity</code>类用于保存解析后的日志信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:wf2311@163.com&quot;&gt;wf2311&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-01-25 19:37.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table</span></span><br><span class="line"><span class="meta">@Entity(name = &quot;log&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端IP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime time;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求方式 GET/POST/PUT 等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String request;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问的url地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * http协议</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String protocol;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求结果响应码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求访问的字节数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sendByteSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问者访问渠道来源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String refferer;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问者的用户代理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String useAgent;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问者是不是爬虫或机器人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isBot;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问的是不是静态资源文件，例如：css、js、图片等文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isResource;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前项目名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String project;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NginxLogConverter类实现解析的具体逻辑"><a href="#NginxLogConverter类实现解析的具体逻辑" class="headerlink" title="NginxLogConverter类实现解析的具体逻辑"></a><code>NginxLogConverter</code>类实现解析的具体逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:wf2311@163.com&quot;&gt;wf2311&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-01-25 19:35.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NginxLogConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATTERN = <span class="string">&quot;(?&lt;ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+)( - - \\[)(?&lt;datetime&gt;[\\s\\S]+)(?&lt;t1&gt;\\][\\s\&quot;]+)(?&lt;request&gt;[A-Z]+) (?&lt;url&gt;[\\S]*) (?&lt;protocol&gt;[\\S]+)[\&quot;] (?&lt;code&gt;\\d+) (?&lt;sendbytes&gt;\\d+) [\&quot;](?&lt;refferer&gt;[\\S]*)[\&quot;] [\&quot;](?&lt;useragent&gt;[\\S\\s]+)[\&quot;]&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析转换逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text    单条的日志记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> project 项目名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解析成功则返回具体的对象，解析失败返回&lt;code&gt;null&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LogEntity <span class="title">parse</span><span class="params">(String text, String project)</span> </span>&#123;</span><br><span class="line">        Pattern r = Pattern.compile(PATTERN);</span><br><span class="line">        Matcher m = r.matcher(text);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            LogEntity log = <span class="keyword">new</span> LogEntity();</span><br><span class="line">            log.setIp(m.group(<span class="string">&quot;ip&quot;</span>));</span><br><span class="line">            log.setProject(project);</span><br><span class="line">            String datetime = m.group(<span class="string">&quot;datetime&quot;</span>);</span><br><span class="line">            log.setTime(convertTime(datetime));</span><br><span class="line">            log.setRequest(m.group(<span class="string">&quot;request&quot;</span>));</span><br><span class="line">            log.setUrl(m.group(<span class="string">&quot;url&quot;</span>));</span><br><span class="line">            log.setProtocol(m.group(<span class="string">&quot;protocol&quot;</span>));</span><br><span class="line">            log.setCode(Integer.valueOf(m.group(<span class="string">&quot;code&quot;</span>)));</span><br><span class="line">            log.setSendByteSize(Integer.valueOf(m.group(<span class="string">&quot;sendbytes&quot;</span>)));</span><br><span class="line">            log.setRefferer(m.group(<span class="string">&quot;refferer&quot;</span>));</span><br><span class="line">            log.setUseAgent(m.group(<span class="string">&quot;useragent&quot;</span>));</span><br><span class="line">            log.setBot(isBot(log.getUseAgent()));</span><br><span class="line">            log.setResource(isResource(log.getUrl()));</span><br><span class="line">            <span class="keyword">return</span> log;</span><br><span class="line">        &#125;</span><br><span class="line">        log.error(String.format(<span class="string">&quot;%s 格式化错误&quot;</span>, text));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提取转换时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 格式化的时间文本：26/Jan/2019:06:51:27 +0800]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> LocalDateTime 时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> LocalDateTime <span class="title">convertTime</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String t = s.substring(<span class="number">0</span>, s.indexOf(<span class="string">&quot; &quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.parse(t, DateTimeFormatter.ofPattern(<span class="string">&quot;dd/MMM/yyyy:HH:mm:ss&quot;</span>, Locale.ENGLISH));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 userAgent 字段判断是不是爬虫或机器人的访问记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userAgent 访问者的用户代理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否是爬虫或机器人的访问记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBot</span><span class="params">(String userAgent)</span> </span>&#123;</span><br><span class="line">        String t = userAgent.toLowerCase();</span><br><span class="line">        <span class="keyword">return</span> t.contains(<span class="string">&quot;bot&quot;</span>) || t.contains(<span class="string">&quot;spider&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 url 字段判断访问的是不是静态资源文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 访问的url路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 访问的是否是静态资源文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isResource</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        String t = url.toLowerCase();</span><br><span class="line">        <span class="keyword">return</span> t.contains(<span class="string">&quot;.js&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.css&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.png&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.ico&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.gif&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.woff&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.eot&quot;</span>)</span><br><span class="line">                || t.contains(<span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Path path = Paths.get(<span class="string">&quot;/xx/xxx/access.log&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;String&gt; logs = Files.readAllLines(path);</span><br><span class="line">        List&lt;LogEntity&gt; list = logs.stream().map(s -&gt; parse(s, <span class="string">&quot;$&#123;projectName&#125;&quot;</span>)).collect(Collectors.toList());</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://blog.csdn.net/thlzjfefe/article/details/83349548">nginx日志解析：java正则解析</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;想通过 Nginx 的 access.log 分析网站的访问情况，但是直接通过日志文件看不太直观，于是想通过代码把日志文件解析并保存数据库中
      
    
    </summary>
    
      <category term="Java" scheme="https://www.wangfeng.pro/categories/Java/"/>
    
      <category term="其他" scheme="https://www.wangfeng.pro/categories/Java/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Java" scheme="https://www.wangfeng.pro/tags/Java/"/>
    
      <category term="笔记" scheme="https://www.wangfeng.pro/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Nginx" scheme="https://www.wangfeng.pro/tags/Nginx/"/>
    
      <category term="正则表达式" scheme="https://www.wangfeng.pro/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java虚拟机结构(二):内存结构概述</title>
    <link href="https://www.wangfeng.pro/2019/01/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%93%E6%9E%84-%E4%BA%8C-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B0.html"/>
    <id>https://www.wangfeng.pro/2019/01/java虚拟机结构-二-内存结构概述.html</id>
    <published>2019-01-23T09:22:29.000Z</published>
    <updated>2019-01-23T10:15:22.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><p>Java 虚拟机在会将它所管理的内存划分成若干个不同的区域，作用各不相同。</p><h3 id="线程私有区"><a href="#线程私有区" class="headerlink" title="线程私有区"></a>线程私有区</h3><h4 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h4><p>PC 寄存器是一块较小的内存区域，属于线程私有。PC 寄存器用于保存当前线程中正在执行的字节码指令的地址：对于非原生方法，指向的是字节码指令的地址;对于原生方法，保存的是 undefined。</p><h4 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h4><p>Java 虚拟机栈也是属于线程私有，随线程同时创建，用于存储栈帧(Frame)。其内存既可以设置成固定大小，也可以根据计算动态扩展和收缩；使用的内存不需要保证是连续的。</p><p>Java 虚拟机栈可能会抛出以下异常：</p><ul><li><code>StackOverflowError</code>:线程请求分配的栈容量超过栈允许的最大值;</li><li><code>OutOfMemoryError</code>: 栈尝试扩展但无法申请到足够的内存或者创建新的线程时没有足够的内存；</li></ul><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>本地方法栈与 Java 虚拟机栈的作用类似，主要用于支持 native 。如果虚拟机支持本地方法栈，在线程创建时按线程分配。</p><p>同 Java 虚拟机栈一样，本地方法栈有可能会抛出下异常：</p><ul><li><code>StackOverflowError</code>:线程请求分配的栈容量超过栈允许的最大值;</li><li><code>OutOfMemoryError</code>: 栈尝试扩展但无法申请到足够的内存或者创建新的线程时没有足够的内存；</li></ul><p><strong>HotSpot 虚拟机直接把本地方法栈和 Java 虚拟机栈合二为一。</strong></p><h4 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h4><p>栈帧是用来存储数据和部分过程结果的数据结构，<br>同时也用来处理动态链接、方法返回和异常分发。栈帧在线程内随着方法调用而创建、方法结束(包含抛出异常)而销毁。其存储空间由创建它的线程在虚拟机栈中分配。</p><p>每个栈帧都有自己的本地变量表、操作数栈和指向当前方法所属类的运行时常量池的引用，本地变量表和操作数栈的容量在编译期确定。</p><h4 id="本地变量表"><a href="#本地变量表" class="headerlink" title="本地变量表"></a>本地变量表</h4><p>本地变量表用于保存局部变量，位于栈帧中，长度由编译期决定。</p><p>在本地变量表中保存 boolean、byte、char、short、int、float、reference或returnAddress 类型的数据需一个局部变量；保存 long、double 类型的数据需两个连续的局部变量。在本地变量表中的变量使用索引来定位访问，第一个变量的索引为0；在实例方法中，本地变量表中索引为0的位置存储的是该实例方法所在对象的引用(this)。</p><h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><p>操作数栈是一个后进先出的栈，位于栈帧中，最大深度由编译期决定。</p><p>在任意时刻，操作数栈都有一个确定的深度，long、double类型会占用两个单位的深度，其他数据类型只占一个单位的深度。</p><h4 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h4><p>动态链接可以理解为栈帧内部指向当前方法所在类型的运行时常量池的引用。</p><h3 id="线程共享区"><a href="#线程共享区" class="headerlink" title="线程共享区"></a>线程共享区</h3><h4 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h4><p>Java 堆是供所有类实例和数组对象分配内存的共享区域。它在虚拟机启动时被创建，存储被自动内存管理系统(垃圾收集器)所管理的各种对象。Java 堆的容量既可以设置成固定大小，也可以根据计算动态扩展和收缩；使用的内存不需要保证是连续的。</p><p>当实际所需的堆超出了自动内存管理系统能提供的最大值，会抛出<code>OutOfMemoryError</code>异常。</p><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>方法区存储了每一个类的结构信息：运行时常量池、字段和方法数据、构造函数和普通方法的字节码内容；还包含一些在类、实例、接口初始化时用到的特殊方法。方法区是堆的逻辑组成部分，但虚拟机可以在这个区域不实现垃圾回收和压缩。方法区的容量既可以设置成固定大小，也可以根据计算动态扩展和收缩；使用的内存不需要保证是连续的。</p><p>当方法区的内存不能满足内存分配请求，会抛出<code>OutOfMemoryError</code>异常。</p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>运行时常量池是class文件中每一个类或接口的常量池表的运行时表现形式。在方法区中分配，在加载类或接口到虚拟机后会被创建。</p><p>当创建接口或类构造运行时常量池所需的内存超过了方法区所能提供的最大值时，会抛出<code>OutOfMemoryError</code>异常。</p><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存并不是虚拟机运行时数据区的一部分，也不是 Java 虚拟机规范字定义的内存区域。<br>在 JDK 1.4中新加入的 NIO 引入了一种基于通道(Channel)与缓冲区(Buffer)的 I/O 方式，它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在 Java 堆 和 Native 堆中来回复制数据。</p><p>当动态扩展直接内存的大小导致各个内存区域总和大于本机的物理内存限制时，会抛出<code>OutOfMemoryError</code>异常。</p><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><div class="post-svg-container">    <object type="image/svg+xml" data="https://file.wf2311.com/2019/01/23/Java虚拟机内存结构.svg"></object></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;运行时数据区&quot;&gt;&lt;a href=&quot;#运行时数据区&quot; class=&quot;headerlink&quot; title=&quot;运行时数据区&quot;&gt;&lt;/a&gt;运行时数据区&lt;/h2&gt;&lt;p&gt;Java 虚拟机在会将它所管理的内存划分成若干个不同的区域，作用各不相同。&lt;/p&gt;
&lt;h3 id=&quot;线程私有
      
    
    </summary>
    
      <category term="Java" scheme="https://www.wangfeng.pro/categories/Java/"/>
    
      <category term="JVM" scheme="https://www.wangfeng.pro/categories/Java/JVM/"/>
    
      <category term="从零学习JVM" scheme="https://www.wangfeng.pro/categories/Java/JVM/%E4%BB%8E%E9%9B%B6%E5%AD%A6%E4%B9%A0JVM/"/>
    
    
      <category term="JVM" scheme="https://www.wangfeng.pro/tags/JVM/"/>
    
      <category term="Java" scheme="https://www.wangfeng.pro/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java虚拟机结构(一):数据类型</title>
    <link href="https://www.wangfeng.pro/2019/01/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%93%E6%9E%84-%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"/>
    <id>https://www.wangfeng.pro/2019/01/java虚拟机结构-一-数据类型.html</id>
    <published>2019-01-17T06:35:58.000Z</published>
    <updated>2019-01-23T10:15:22.495Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文的内容实际上是对《Java虚拟机规范(Java SE 8版)》第2.2章节的一个笔记概述。</p></blockquote><p>在学习 JVM 之前，我们首先对虚拟机中的数据类型做一个基本的认识。与 Java 程序语言中的数据结构类似，Java 虚拟机可以操作的数据类型可分为两类：<strong>原始类型</strong>和<strong>引用类型</strong>，与之对应也存在<strong>原始值</strong>和<strong>引用值</strong>两种类型的数值，他们可以用于变量赋值、参数传递、方法返回和运算操作。</p><span id="more"></span><h2 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h2><p>Java 虚拟机所支持的原始数据类型包括<strong>数值类型</strong>、boolean 类型和 returnAddress 类型三类。</p><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>数值类型又分为<strong>整数类型</strong>和<strong>浮点数类型</strong>，具体如下表所示：</p><table><tr><td colspan=2 >数值类型</td><td>位数</td><td>默认值</td><td>取值范围</td></tr><tr><td rowspan=5 >整数类型</td><td>byte</td><td>8位有符号</td><td>0</td><td>[-2^7,2^7-1]</td></tr><tr><td>short</td><td>16位有符号</td><td>0</td><td>[-2^15,2^15-1]</td></tr><tr><td>int</td><td>32位有符号</td><td>0</td><td>[-2^31,2^31-1]</td></tr><tr><td>long</td><td>64位有符号</td><td>0</td><td>[-2^63,2^63-1]</td></tr><tr><td>char</td><td>16位无符号</td><td>\u0000</td><td>[0,2^16-1]</td></tr><tr><td rowspan=2 >浮点数类型</td><td>float</td><td>32位单精度浮点数</td><td>正数0</td><td>-</td></tr><tr><td>double</td><td>64位双精度浮点数</td><td>正数0</td><td>-</td></tr></table><h3 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h3><p>Java 虚拟机没有提供 boolean 值专用的字节码指令，Java 语言表达式所操作的 boolean 值，在编译后都使用虚拟机中的 int 数据类型代替。另外，boolean 类型数组在虚拟机中会被编码成 byte 类型数值，每个 boolean 元素占8位。</p><h3 id="returnAddress类型"><a href="#returnAddress类型" class="headerlink" title="returnAddress类型"></a>returnAddress类型</h3><p>returnAddress 类型的值指向一条虚拟机指令的操作码。与数值类型相比，returnAddress 类型在 Java 语言中并不存在对应的类型，而且也无法再程序运行期间更改。</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>Java 虚拟机中有三种引用类型：类类型、数组类型、接口类型。这些引用类型的值分别指向动态创建的类实例、数组实例和实现了某个接口的类实例或数组实例。</p><p>除三种引用类型外，在引用类型的值中还有一个特殊的值—— <code>null</code>,它是所有引用类型的默认值。</p><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><p>一个多维数组类型可以看做是由两维的数据构成：在外维的称为组件类型，在里维的称为元素类型。</p><p>组件类型也可以是数组类型，例如 <code>int[][][]</code>的组件类型可以看做是<code>int[][]</code>；而元素类型必须是原生类型、类类型或接口类型之一。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>《Java虚拟机规范(Java SE 8版)》 第2.2章节</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文的内容实际上是对《Java虚拟机规范(Java SE 8版)》第2.2章节的一个笔记概述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在学习 JVM 之前，我们首先对虚拟机中的数据类型做一个基本的认识。与 Java 程序语言中的数据结构类似，Java 虚拟机可以操作的数据类型可分为两类：&lt;strong&gt;原始类型&lt;/strong&gt;和&lt;strong&gt;引用类型&lt;/strong&gt;，与之对应也存在&lt;strong&gt;原始值&lt;/strong&gt;和&lt;strong&gt;引用值&lt;/strong&gt;两种类型的数值，他们可以用于变量赋值、参数传递、方法返回和运算操作。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.wangfeng.pro/categories/Java/"/>
    
      <category term="JVM" scheme="https://www.wangfeng.pro/categories/Java/JVM/"/>
    
      <category term="从零学习JVM" scheme="https://www.wangfeng.pro/categories/Java/JVM/%E4%BB%8E%E9%9B%B6%E5%AD%A6%E4%B9%A0JVM/"/>
    
    
      <category term="JVM" scheme="https://www.wangfeng.pro/tags/JVM/"/>
    
      <category term="Java" scheme="https://www.wangfeng.pro/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅地在Hexo博客中嵌入SVG文件</title>
    <link href="https://www.wangfeng.pro/2019/01/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%B5%8C%E5%85%A5svg%E6%96%87%E4%BB%B6.html"/>
    <id>https://www.wangfeng.pro/2019/01/如何优雅地在hexo博客中嵌入svg文件.html</id>
    <published>2019-01-16T12:43:39.000Z</published>
    <updated>2021-04-29T12:04:57.401Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天遇到一个问题：想在自己的Hexo博客中展示SVG格式的思维导图，本文简单的记录一下如何解决这个问题。</p></blockquote><span id="more"></span><h2 id="在Markdown文件中嵌入SVG"><a href="#在Markdown文件中嵌入SVG" class="headerlink" title="在Markdown文件中嵌入SVG"></a>在Markdown文件中嵌入SVG</h2><p>我们知道在 MarkDown 文件中可以直接使用 HTML 元素，所以可以直接使用写 HTML 结构的形式应该就可以实现，下面说说我尝试过的三种方案：</p><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>最开始想到的是用 iframe 的形式，在正文中加入如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">src</span>=<span class="string">&quot;xxx.svg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://file.wf2311.com/images/20190116210140.png" alt="iframe展示SVG"><br>效果显然不行，放弃此种方案。</p><h3 id="img"><a href="#img" class="headerlink" title="img"></a>img</h3><p>接着尝试了使用 img 元素的方法，代码如下：</p><p>展示结果如下：<br><img src="https://file.wf2311.com/images/20190116215335.png" alt="img展示SVG"></p><p>这种方法的展示效果虽然比使用 iframe 要好，但是 svg 的内容还是收到了父元素宽度的限制，并且里面的文本无法被复制。此方案也不太理想。</p><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>最终在网上搜到了这篇文章 <a href="https://vecta.io/blog/best-way-to-embed-svg/">The Best Way to Embed SVG on HTML (2019)</a> ,里面介绍了多种在 HTML 页面中嵌入 SVG 的方式，我尝试了里面说到的第二种，可以达到按照原始大小显示 SVG 中内容的效果。<br>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">&quot;image/svg+xml&quot;</span> <span class="attr">data</span>=<span class="string">&quot;xxx.svg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面效果：<br><img src="https://file.wf2311.com/images/20190116215609.png" alt="object展示SVG"></p><p>可以看出 SVG 中的内容虽然是按照原始比例显示的，但是可能会超出父元素的宽度。<br>接下来就要解决第二个问题：在子元素宽度超出父元素后，如何让子元素在父元素内滑动，而不是溢出父元素。</p><h2 id="子元素比父元素宽的布局显示问题"><a href="#子元素比父元素宽的布局显示问题" class="headerlink" title="子元素比父元素宽的布局显示问题"></a>子元素比父元素宽的布局显示问题</h2><p>由于不是专业前端，此问题描述清楚后，通过搜索引擎就可以很轻松的找到答案，在此只是记录一下：<br>对上一节中的 <code>object</code>节点 外面定义一个父元素，样式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-svg-container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">overflow-x</span>: auto;</span><br><span class="line">  <span class="attribute">overflow-y</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>object</code>节点定义如下样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-svg-container</span> &gt; <span class="selector-tag">object</span>&#123;</span><br><span class="line">      <span class="attribute">justify-content</span>: center;</span><br><span class="line">      <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure><p>在 MarkDown 中这样引入 SVG 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-svg-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">&quot;image/svg+xml&quot;</span> <span class="attr">data</span>=<span class="string">&quot;xxx.svg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>即可达到最终想要的效果:<br><img src="https://file.wf2311.com/images/20190116215757.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://vecta.io/blog/best-way-to-embed-svg/">https://vecta.io/blog/best-way-to-embed-svg</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天遇到一个问题：想在自己的Hexo博客中展示SVG格式的思维导图，本文简单的记录一下如何解决这个问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.wangfeng.pro/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="笔记" scheme="https://www.wangfeng.pro/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Hexo" scheme="https://www.wangfeng.pro/tags/Hexo/"/>
    
      <category term="SVG" scheme="https://www.wangfeng.pro/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>WakaTime数据同步展示工具</title>
    <link href="https://www.wangfeng.pro/2019/01/wakatime%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%B1%95%E7%A4%BA%E5%B7%A5%E5%85%B7.html"/>
    <id>https://www.wangfeng.pro/2019/01/wakatime数据同步展示工具.html</id>
    <published>2019-01-15T15:07:18.000Z</published>
    <updated>2019-01-18T06:55:36.799Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从16年知道 WakaTime 后就开始使用它来记录自己的编码时间，但作为免费版只能查看最近两周的数据，于是很久之前就写了一个程序同步自己的历史数据，不过一直没找到合适的图表插件像官网那样展示数据信息。前些日子咨询了一下同事，得知了用 antv 可以绘制对应的图表数据，刚好现在也处于失业阶段，就花了几天时间又重新做了一个项目用于同步和展示 WakaTime 数据。</p></blockquote><span id="more"></span><h2 id="WakaTime"><a href="#WakaTime" class="headerlink" title="WakaTime"></a>WakaTime</h2><h3 id="WakaTime简介"><a href="#WakaTime简介" class="headerlink" title="WakaTime简介"></a>WakaTime简介</h3><p><a href="https://wakatime.com/">WakaTime</a> 是一款可以记录你的编码时间的工具，目前支持绝大部分主流的 IDE 以及 Chrome 浏览器。</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><a href="https://wakatime.com/signup">注册</a> WakaTime 账号；</li><li>在<a href="https://wakatime.com/plugins">官网</a>找到对应的 IDE 插件，按照步骤安装 WakaTime 插件(下图中灰色表示目前官方还不支持):<br><img src="https://file.wf2311.com/images/20190111125101.png" alt="所支持的IDE"></li><li>在<a href="https://wakatime.com/settings/account">个人设置</a>页面复制 Secret API Key ，填入对应的 WakaTime 插件中；<br><img src="https://file.wf2311.com/images/20190111124627.png" alt="复制 Secret API Key"></li><li>过一段时间后，你就可以在 WakaTime 网站上看到你的编码情况，如下图所示：<br><img src="https://file.wf2311.com/images/20190111125255.png"></li></ol><h2 id="wakatime-sync项目"><a href="#wakatime-sync项目" class="headerlink" title="wakatime-sync项目"></a>wakatime-sync项目</h2><h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>  WakaTime 提供了丰富多样的图表可以多维度地查看自己的编码时间情况。不过作为免费用户，最多只能查看自己最近14天的数据；如果要查看全部的数据，需要 $9/月的订阅费用。</p><p>  还好 WakaTime 提供了 <a href="https://wakatime.com/developers">API</a> 接口，通过接口可以获取到编码时间统计情况的原始数据(作为免费用户还是有只能查看最近14天数据的限制)。</p><p>  本项目通过 WakaTime 提供的 API 接口，可以把自己的 WakaTime 数据保存在的数据库中，然后利用图表插件展示出来，目前已完成三种类型的图表展示：</p><ul><li>每日项目持续时间图：<br><img src="https://file.wf2311.com/images/20190115180738.png" alt="每日项目持续时间图"></li><li>时间范围内活动情况：<br><img src="https://file.wf2311.com/images/20190115180838.png" alt="时间范围内活动情况"></li><li>每日编码耗时日历图：<br><img src="https://file.wf2311.com/images/20190115180946.png" alt="每日编码耗时日历图"></li></ul><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><ul><li>GITHUB: <a href="https://github.com/wf2311/wakatime-sync">https://github.com/wf2311/wakatime-sync</a></li><li>码云: <a href="https://gitee.com/wf2311/wakatime-sync">https://gitee.com/wf2311/wakatime-sync</a></li></ul><h3 id="所用技术"><a href="#所用技术" class="headerlink" title="所用技术"></a>所用技术</h3><p>后端：JDK1.8、SpringBoot、Jodd-HTTP、Thymeleaf;</p><p>数据库：MySQL 5.7;</p><p>前端：Moment.js、ElementUI、AntV-G2 、Echarts;</p><p>通知服务：<a href="http://sc.ftqq.com/3.version">Server酱</a>、<a href="https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.61074a9747Wldt&treeId=257&articleId=105735&docType=1">钉钉机器人</a></p><p>项目逻辑比较简单，就是每天会定时通过 WakaTime 的 API 抓取并保存前一天的数据，再通过图标插件展示出来。之后还会完善接口缓存、同步通知等功能；</p><p>同时使用了 AntV-G2 和 Echarts 的原因是因为持续时间图可以用 AntV-G2 实现，但日历图用 AntV-G2 实现过于复杂，就采用了用 Echarts 实现日历图；</p><p>另外本项目最初是的数据库是 MongoDB ，但是考虑到通用性和易用性后来又换成了 MySQL。MongoDB 版本的代码也实现了相关的同步展示逻辑，代码在 <a href="https://github.com/wf2311/wakatime-sync/tree/mongdb">mongodb</a> 分支中。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>替换或设置好<code>src/main/resources/application.yml</code>配置文件中的<code>wakatime.app.key</code>和<code>spring.datasource.*</code> 相关数据库配置，采用 maven 打包的方式安装即可，支持 Docker 方式安装。</p><p>数据库建库脚本位于<code>sql/wakatime_sync.sql</code>中。</p><p>数据库使用 MongoDB 的版本位于分支 <a href="https://github.com/wf2311/wakatime-sync/tree/mongdb">mongdb</a> 中。</p><p>示例地址：<a href="https://wakatime.wangfeng.pro/">https://wakatime.wangfeng.pro/</a>。</p><h3 id="消息通知"><a href="#消息通知" class="headerlink" title="消息通知"></a>消息通知</h3><p>系统中有一个定时任务，会在每天早上09:00会根据配置信息想钉钉或微信发送上一天的编码时间信息；<br>需要在<code>application.yml</code>配置对应的参数:</p><ul><li>Server酱微信通知：按照<a href="http://sc.ftqq.com/3.version">Server酱网站说明</a>获得一个<strong>SCKEY</strong>，设置成<code>wakatime.ftqq-key</code>的值；</li><li>钉钉机器人通知：在要获得提醒的钉钉群里面生成一个<strong>自定义机器人</strong>，将机器人的 Hook 地址中的 access_token 的值设置成<code>wakatime.dingding-key</code>的值；</li></ul><p><strong>如果不想使用对应的消息通知，请将<code>application.yml</code>中对应的参数注释掉或将值置为空</strong></p><h3 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h3><ol><li>由于本项目采用的是SpringBoot 2，对应的 <code>mysql-connector-java</code>  驱动使用的是MySQL服务端的时区，如果你使用的MySQL的时区和你程序中的时区以及你在 <a href="https://wakatime.com/settings/preferences">WakaTime 个人设置</a>中的时区不一致，就会导致保存的相关数据中时间不准，解决办法就是首先调整好 <a href="https://wakatime.com/settings/preferences">WakaTime 个人设置</a>里的时区，再调整 MySQL 数据库的时区，或者是使用 <code>5.X</code>版本的<code>mysql-connector-java</code>驱动。</li><li>如果你一直在使用 WakaTime ，如果想使用本项目同步你所有的历史数据，可以在官网上试用团队版的方式获得1个月(还是半个月？)的付费版功能或者是订阅一个月的付费版，然后通过本项目来同步所有的历史数据：<code>POST /api/v1/sync</code> 或参见项目中的测试方法。使用测试方法进行时不能同时使用太多的线程去同时调用 API 接口，会被限流。</li></ol><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li><input disabled="" type="checkbox"> 查询接口缓存；</li><li><input disabled="" type="checkbox"> 可以对项目名称设置别名展示；</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果本项目对你有用的话，欢迎在 <a href="https://github.com/wf2311/wakatime-sync">GITHUB</a>  或<a href="https://gitee.com/wf2311/wakatime-sync">码云</a>上 star，也欢迎对项目提出修改意见和建议。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从16年知道 WakaTime 后就开始使用它来记录自己的编码时间，但作为免费版只能查看最近两周的数据，于是很久之前就写了一个程序同步自己的历史数据，不过一直没找到合适的图表插件像官网那样展示数据信息。前些日子咨询了一下同事，得知了用 antv 可以绘制对应的图表数据，刚好现在也处于失业阶段，就花了几天时间又重新做了一个项目用于同步和展示 WakaTime 数据。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="其它" scheme="https://www.wangfeng.pro/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="WakaTime" scheme="https://www.wangfeng.pro/tags/WakaTime/"/>
    
      <category term="工具" scheme="https://www.wangfeng.pro/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Mac使用tree生成目录结构</title>
    <link href="https://www.wangfeng.pro/2019/01/mac%E4%BD%BF%E7%94%A8tree%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.html"/>
    <id>https://www.wangfeng.pro/2019/01/mac使用tree生成目录结构.html</id>
    <published>2019-01-02T04:14:02.000Z</published>
    <updated>2021-04-29T12:04:57.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>程序员经常会有需求，需要列出项目的结构树。Mac或者Linux下可以使用tree列出项目结构，如下图这种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── build</span><br><span class="line">├── config</span><br><span class="line">├── docs</span><br><span class="line">│   └── static</span><br><span class="line">│       ├── css</span><br><span class="line">│       └── js</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets</span><br><span class="line">│   ├── components</span><br><span class="line">│   ├── store</span><br><span class="line">│   │   └── modules</span><br><span class="line">│   └── views</span><br><span class="line">│       ├── book</span><br><span class="line">│       └── movie</span><br><span class="line">└── static</span><br></pre></td></tr></table></figure><p>使用起来也非常简单。<br>Mac下可以使用<code>brew install tree</code>进行安装。安装后，在terminal中输入<code>tree -a</code>便可以查看某个文件夹下的所有文件。</p><h2 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h2><p>当然了，我们的需求肯定不止列出所有文件这么简单。下面介绍几个常用的命令：</p><ul><li><code>tree -d</code> 只显示文件夹；</li><li><code>tree -L n</code> 显示项目的层级。n表示层级数。比如想要显示项目三层结构，可以用tree -l 3；</li><li><code>tree -I pattern</code> 用于过滤不想要显示的文件或者文件夹。比如你想要过滤项目中的node_modules文件夹，可以使用<code>tree -I &quot;node_modules&quot;</code>；</li><li><code>tree &gt; tree.md</code> 将项目结构输出到tree.md这个文件。</li></ul><p>举个例子，如果我们要显示某个项目下3层的所有文件结构，同时又过滤node_modules文件夹，最后输出到tree.md，可以这么写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -L 3 -I <span class="string">&quot;node_modules&quot;</span></span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── build</span><br><span class="line">│   ├── build.js</span><br><span class="line">│   ├── check-versions.js</span><br><span class="line">│   ├── dev-client.js</span><br><span class="line">│   ├── dev-server.js</span><br><span class="line">│   ├── utils.js</span><br><span class="line">│   ├── webpack.base.conf.js</span><br><span class="line">│   ├── webpack.dev.conf.js</span><br><span class="line">│   └── webpack.prod.conf.js</span><br><span class="line">├── config</span><br><span class="line">│   ├── dev.env.js</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── prod.env.js</span><br><span class="line">├── docs</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── static</span><br><span class="line">│       ├── css</span><br><span class="line">│       └── js</span><br><span class="line">├── git.sh</span><br><span class="line">├── index.html</span><br><span class="line">├── npm-debug.log</span><br><span class="line">├── open</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   ├── list.scss</span><br><span class="line">│   │   ├── logo.png</span><br><span class="line">│   │   ├── search-btn.png</span><br><span class="line">│   │   └── style.scss</span><br><span class="line">│   ├── components</span><br><span class="line">│   │   ├── Hello.vue</span><br><span class="line">│   │   ├── Spinner.vue</span><br><span class="line">│   │   └── header.vue</span><br><span class="line">│   ├── main.js</span><br><span class="line">│   ├── router.js</span><br><span class="line">│   ├── store</span><br><span class="line">│   │   ├── api.js</span><br><span class="line">│   │   ├── modules</span><br><span class="line">│   │   ├── store.js</span><br><span class="line">│   │   └── types.js</span><br><span class="line">│   └── views</span><br><span class="line">│       ├── book</span><br><span class="line">│       ├── index.vue</span><br><span class="line">│       ├── movie</span><br><span class="line">│       └── vuex-demo.vue</span><br><span class="line">├── static</span><br><span class="line">└── tree.md</span><br></pre></td></tr></table></figure><p>更多命令的使用可以查看<code>tree --help</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;程序员经常会有需求，需要列出项目的结构树。Mac或者Linux下可以使用tree列出项目结构，如下图这种：&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
      <category term="Mac" scheme="https://www.wangfeng.pro/categories/Mac/"/>
    
      <category term="其它" scheme="https://www.wangfeng.pro/categories/Mac/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="命令" scheme="https://www.wangfeng.pro/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="转载" scheme="https://www.wangfeng.pro/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="MAC" scheme="https://www.wangfeng.pro/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title>Java操作码助记符</title>
    <link href="https://www.wangfeng.pro/2018/11/java%E6%93%8D%E4%BD%9C%E7%A0%81%E5%8A%A9%E8%AE%B0%E7%AC%A6.html"/>
    <id>https://www.wangfeng.pro/2018/11/java操作码助记符.html</id>
    <published>2018-11-23T10:39:11.000Z</published>
    <updated>2019-01-17T06:53:38.587Z</updated>
    
    <content type="html"><![CDATA[<p><em>本表内容来自<strong>《Java虚拟机规范（Java SE 8 版）》</strong>第7章</em></p><table border=0 cellpadding=0 cellspacing=0><tr><td></td><td colspan=2>操作码</td><td>助记码</td><td>指令含义</td></tr><tr><td rowspan=21>常量</td><td>0</td><td>0x00</td><td>nop</td><td>什么都不做</td></tr><tr><td>1</td><td>0x01</td><td>aconst_null</td><td>将null推送至栈顶</td></tr><tr><td>2</td><td>0x02</td><td>iconst_ml</td><td>将int类型-1推送至栈顶</td></tr><tr><td>3</td><td>0x03</td><td>iconst_0</td><td>将int类型0推送至栈顶</td></tr><tr><td>4</td><td>0x04</td><td>iconst_1</td><td>将int类型1推送至栈顶</td></tr><tr><td>5</td><td>0x05</td><td>iconst_2</td><td>将int类型2推送至栈顶</td></tr><tr><td>6</td><td>0x06</td><td>iconst_3</td><td>将int类型3推送至栈顶</td></tr><tr><td>7</td><td>0x07</td><td>iconst_4</td><td>将int类型4推送至栈顶</td></tr><tr><td>8</td><td>0x08</td><td>iconst_5</td><td>将int类型5推送至栈顶</td></tr><tr><td>9</td><td>0x09</td><td>lconst_0</td><td>将long类型0推送至栈顶</td></tr><tr><td>10</td><td>0x0a</td><td>lconst_1</td><td>将long类型1推送至栈顶</td></tr><tr><td>11</td><td>0x0b</td><td>fconst_0</td><td>将float类型0推送至栈顶</td></tr><tr><td>12</td><td>0x0c</td><td>fconst_1</td><td>将float类型1推送至栈顶</td></tr><tr><td>13</td><td>0x0d</td><td>fconst_2</td><td>将float类型2推送至栈顶</td></tr><tr><td>14</td><td>0x0e</td><td>dconst_0</td><td>将double类型0推送至栈顶</td></tr><tr><td>15</td><td>0x0f</td><td>dconst_1</td><td>将double类型1推送至栈顶</td></tr><tr><td>16</td><td>0x10</td><td>bipush</td><td>将单字节的常量值(-128~127)推送至栈顶</td></tr><tr><td>17</td><td>0x11</td><td>sipush</td><td align=left>将一个短整类型常量值(-32768~32767) 推送至栈顶</td></tr><tr><td>18</td><td>0x12</td><td>ldc</td><td align=left>将int、float或String类型常量值从常量池中推送至栈顶</td></tr><tr><td>19</td><td>0x13</td><td>ldc_w</td><td align=left>将int、float 或String类型常量值从常量池中推送至栈顶(宽索引)<span                style='mso-spacerun:yes'>&nbsp;</span></td></tr><tr><td>20</td><td>0x14</td><td>ldc2_w</td><td align=left>将long或double类型常量值从常量池中推送至栈顶(宽索引)</td></tr><tr><td rowspan=33>加载</td><td>21</td><td>0x15</td><td>iload</td><td>将指定的int类型本地变量推送至栈顶</td></tr><tr><td>22</td><td>0x16</td><td>lload</td><td>将指定的long类型本地变量推送至栈顶</td></tr><tr><td>23</td><td>0x17</td><td>fload</td><td>将指定的float类型本地变量推送至栈顶</td></tr><tr><td>24</td><td>0x18</td><td>dload</td><td>将指定的double类型本地变量推送至栈顶</td></tr><tr><td>25</td><td>0x19</td><td>aload</td><td>将指定的引用类型本地变量推送至栈顶</td></tr><tr><td>26</td><td>0xla</td><td>iload_0</td><td>将第1个int类型本地变量推送至栈顶</td></tr><tr><td>27</td><td>0x1b</td><td>iload_1</td><td>将第2个int类型本地变量推送至栈顶</td></tr><tr><td>28</td><td>0x1c</td><td>iload_2</td><td>将第3个int类型本地变量推送至栈顶</td></tr><tr><td>29</td><td>0xld</td><td>iload_3</td><td>将第4个int类型本地变量推送至栈顶</td></tr><tr><td>30</td><td>0xle</td><td>lload_0</td><td>将第1个long类型本地变量推送至栈顶</td></tr><tr><td>31</td><td>0x1f</td><td>lload_1</td><td>将第2个long类型本地变量推送至栈顶</td></tr><tr><td>32</td><td>0x20</td><td>lload_2</td><td>将第3个long类型本地变量推送至栈顶</td></tr><tr><td>33</td><td>0x21</td><td>lload_3</td><td>将第4个long类型本地变量推送至栈顶</td></tr><tr><td>34</td><td>0x22</td><td>fload_0</td><td>将第1个float类型本地变量推送至栈顶</td></tr><tr><td>35</td><td>0x23</td><td>fload_1</td><td>将第2个float类型本地变量推送至栈顶</td></tr><tr><td>36</td><td>0x24</td><td>fload_2</td><td>将第3个float类型本地变量推送至栈顶</td></tr><tr><td>37</td><td>0x25</td><td>fload_3</td><td>将第4个float类型本地变量推送至栈顶</td></tr><tr><td>38</td><td>0x26</td><td>dload_0</td><td>将第1个double类型本地变量推送至栈顶</td></tr><tr><td>39</td><td>0x27</td><td>dload_1</td><td>将第2个double类型本地变量推送至栈顶</td></tr><tr><td>40</td><td>0x28</td><td>dload_2</td><td>将第3个double类型本地变量推送至栈顶</td></tr><tr><td>41</td><td>0x29</td><td>dload_3</td><td>将第4个double类型本地变量推送至栈顶</td></tr><tr><td>42</td><td>0x2a</td><td>aload_0</td><td>将第1个引用类型本地变量推送至栈顶</td></tr><tr><td>43</td><td>0x2b</td><td>aload_1</td><td>将第2个引用类型本地变量推送至栈项</td></tr><tr><td>44</td><td>0x2c</td><td>aload_2</td><td>将第3个引用类型本地变量推送至栈顶</td></tr><tr><td>45</td><td>0x2d</td><td>aload_3</td><td>将第4个引用类型本地变量推送至栈顶</td></tr><tr><td>46</td><td>0x2e</td><td>iaload</td><td>将int类型数组的指定元素推送至栈顶</td></tr><tr><td>47</td><td>0x2f</td><td>laload</td><td>将long类型数组的指定元素推送至栈顶</td></tr><tr><td>48</td><td>0x30</td><td>faload</td><td>将float类型数组的指定元素推送至栈顶</td></tr><tr><td>49</td><td>0x31</td><td>daload</td><td>将double类型数组的指定元素推送至栈顶</td></tr><tr><td>50</td><td>0x32</td><td>aaload</td><td>将引用类型数组的指定元素推送至栈顶</td></tr><tr><td>51</td><td>0x33</td><td>baload</td><td>将boolean或byte类型数组的指定元素推送至栈顶</td></tr><tr><td>52</td><td>0x34</td><td>caload</td><td>将char类型数组的指定元素推送至栈顶</td></tr><tr><td>53</td><td>0x35</td><td>saload</td><td>将short类型数组的指定元素推送至栈顶</td></tr><tr><td rowspan=33 class=xl70>存储</td><td>54</td><td>0x36</td><td>istore</td><td>将栈顶int类型数值存入指定本地变量</td></tr><tr><td>55</td><td>0x37</td><td>lstore</td><td>将栈顶long类型数值存人指定本地变量</td></tr><tr><td>56</td><td>0x38</td><td>fstore</td><td>将栈顶float类型数值存人指定本地变量</td></tr><tr><td>57</td><td>0x39</td><td>dstore</td><td>将栈顶double类型数值存人指定本地变量</td></tr><tr><td>58</td><td>0x3a</td><td>astore</td><td>将栈顶引用类型数值存人指定本地变量</td></tr><tr><td>59</td><td>0x3b</td><td>istore_0</td><td>将栈顶int类型数值存人第1个本地变量</td></tr><tr><td>60</td><td>0x3c</td><td>istore_1</td><td>将栈顶int类型数值存入第2个本地变量</td></tr><tr><td>61</td><td>0x3d</td><td>istore_2</td><td>将栈顶int类型数值存人第3个本地变量</td></tr><tr><td>62</td><td>0x3e</td><td>istore_3</td><td>将栈顶int类型数值存人第4个本地变量</td></tr><tr><td>63</td><td>0x3f</td><td>lstore_0</td><td>将栈顶long类型数值存人第1个本地变量</td></tr><tr><td>64</td><td>0x40</td><td>lstore_1</td><td>将栈顶long类型数值存人第2个本地变量</td></tr><tr><td>65</td><td>0x41</td><td>lstore_2</td><td>将栈顶long类型数值存人第3个本地变量</td></tr><tr><td>66</td><td>0x42</td><td>lstore_3</td><td>将栈顶long类型数值存人第4个本地变量</td></tr><tr><td>67</td><td>0x43</td><td>fstore_0</td><td>将栈顶float类型数值存人第1个本地变量</td></tr><tr><td>68</td><td>0x44</td><td>fstore_1</td><td>将栈顶float类型数值存人第2个本地变量</td></tr><tr><td>69</td><td>0x45</td><td>fstore_2</td><td>将栈顶float类型数值存人第3个本地变量</td></tr><tr><td>70</td><td>0x46</td><td>fstore_3</td><td>将栈顶float类型数值存人第4个本地变量</td></tr><tr><td>71</td><td>0x47</td><td>dstore_0</td><td>将栈顶double类型数值存人第1个本地变量</td></tr><tr><td>72</td><td>0x48</td><td>dstore_1</td><td>将栈顶double类型数值存人第2个本地变量</td></tr><tr><td>73</td><td>0x49</td><td>dstore_2</td><td>将栈顶double类型数值存人第3个本地变量</td></tr><tr><td>74</td><td>0x4a</td><td>dstore_3</td><td>将栈顶double类型数值存人第4个本地变量</td></tr><tr><td>75</td><td>0x4b</td><td>astore_0</td><td>将栈顶引用类型数值存入第1个本地变量</td></tr><tr><td>76</td><td>0x4c</td><td>astore_1</td><td>将栈顶引用类型数值存人第2个本地变量</td></tr><tr><td>77</td><td>0x4d</td><td>astore_2</td><td>将栈顶引用类型数值存入第3个本地变量</td></tr><tr><td>78</td><td>0x4e</td><td>astore_3</td><td>将栈顶引用类型数值存入第4个本地变量</td></tr><tr><td>79</td><td>0x4f</td><td>iastore</td><td>将栈顶int类型数值存人指定数组的指定索引位置</td></tr><tr><td>80</td><td>0x50</td><td>lastore</td><td>将栈顶long类型数值存人指定数组的指定索引位置</td></tr><tr><td>81</td><td>0x51</td><td>fastore</td><td>将栈顶float类型数值存人指定数组的指定索引位置</td></tr><tr><td>82</td><td>0x52</td><td>dastore</td><td>将栈顶double类型数值存人指定数组的指定索引位置</td></tr><tr><td>83</td><td>0x53</td><td>uastore</td><td>将栈顶引用类型数值存人指定数组的指定索引位置</td></tr><tr><td>84</td><td>0x54</td><td>bastore</td><td>将栈顶boolean或byte类型数值存人指定数组的指定索引位置</td></tr><tr><td>85</td><td>0x55</td><td>castore</td><td>将栈顶char类型数值存人指定数组的指定索引位置</td></tr><tr><td>86</td><td>0x56</td><td>sastore</td><td>将栈顶short类型数值存人指定数组的指定索引位置</td></tr><tr><td rowspan=9 class=xl70>栈</td><td>87</td><td>0x57</td><td>pop</td><td>将栈顶数值弹出( 数值不能是long或double类型的)</td></tr><tr><td>88</td><td>0x58</td><td>pop2</td><td>将栈顶的一个long或double类型的数值或两个其他类型的数值弹出</td></tr><tr><td>89</td><td>0x59</td><td>dup</td><td>复制栈顶数值并将复制值压人栈顶</td></tr><tr><td>90</td><td>0x5a</td><td>dup_x1</td><td>复制栈顶值并将其插人栈顶那两个值的下面</td></tr><tr><td>91</td><td>0x5b</td><td>dup_x2</td><td>复制栈顶值并将其插人栈顶那两个或三个值的下面</td></tr><tr><td>92</td><td>0x5c</td><td>dup2</td><td>复制栈顶的一个long或double类型的值，或两个其他类型的值，并将其压人栈顶</td></tr><tr><td>93</td><td>0x5d</td><td>dup2_x1</td><td>复制栈顶的一个或两个值，并将其插人栈顶那两个或三个值的下面</td></tr><tr><td>94</td><td>0x5e</td><td>dup2_x2</td><td>复制栈顶的一个或两个值，并将其插人栈顶那两个、三个或四个值的下面</td></tr><tr><td>95</td><td>0x5f</td><td>swap</td><td>将栈顶的两个数值互换(数值不能是long或double类型的)</td></tr><tr><td rowspan=35>数学</td><td>96</td><td>0x60</td><td>iadd</td><td>将栈顶两int类型数值相加并将结果压人栈顶</td></tr><tr><td>97</td><td>0x61</td><td>ladd</td><td>将栈顶两long类型数值相加并将结果压人栈顶</td></tr><tr><td>98</td><td>0x62</td><td>fadd</td><td>将栈顶两float类型数值相加并将结果压人栈顶</td></tr><tr><td>99</td><td>0x63</td><td>dadd</td><td>将栈顶两double类型数值相加并将结果压人栈顶</td></tr><tr><td>100</td><td>0x64</td><td>isub</td><td>将栈顶两int类型数值相减并将结果压人栈顶</td></tr><tr><td>101</td><td>0x65</td><td>lsub</td><td>将栈顶两long类型数值相减并将结果压人栈顶</td></tr><tr><td>102</td><td>0x66</td><td>fsub</td><td>将栈顶两float类型数值相减并将结果压人栈顶</td></tr><tr><td>103</td><td>0x67</td><td>dsub</td><td>将栈顶两double类型数值相减并将结果压人栈顶</td></tr><tr><td>104</td><td>0x68</td><td>imul</td><td>将栈顶两int类型数值相乘并将结果压人栈顶</td></tr><tr><td>105</td><td>0x69</td><td>lmul</td><td>将栈顶两long类型数值相乘并将结果压人栈顶</td></tr><tr><td>106</td><td>0x6a</td><td>fmul</td><td>将栈顶两float类型数值相乘并将结果压人栈顶</td></tr><tr><td>107</td><td>0x6b</td><td>dmul</td><td>将栈顶两double类型数值相乘并将结果压人栈顶</td></tr><tr><td>108</td><td>0x6c</td><td>idiv</td><td>将栈顶两int类型数值相除并将结果压人栈顶</td></tr><tr><td>109</td><td>0x6d</td><td>ldiv</td><td>将栈顶两long类型数值相除并将结果压人栈顶</td></tr><tr><td>110</td><td>0x6e</td><td>fdiv</td><td>将栈顶两float类型数值相除并将结果压人栈顶</td></tr><tr><td>111</td><td>0x6f</td><td>ddiv</td><td>将栈顶两double类型数值相除并将结果压人栈顶</td></tr><tr><td>112</td><td>0x70</td><td>irem</td><td>将栈顶两int类型数值作取模运算并将结果压人栈顶</td></tr><tr><td>113</td><td>0x71</td><td>lrem</td><td>将栈顶两long类型数值作取模运算并将结果压人栈顶</td></tr><tr><td>114</td><td>0x72</td><td>frem</td><td>将栈顶两float类型数值作取模运算并将结果压人栈顶</td></tr><tr><td>115</td><td>0x73</td><td>drem</td><td>将栈顶两double类型数值作取模运算并将结果压人栈顶</td></tr><tr><td>116</td><td>0x74</td><td>ineg</td><td>将栈顶int类型数值取负并将结果压入栈项</td></tr><tr><td>117</td><td>0x75</td><td>lneg</td><td>将栈顶long类型数值取负并将结果压人栈顶</td></tr><tr><td>118</td><td>0x76</td><td>fineg</td><td>将栈顶float类型数值取负并将结果压人栈顶</td></tr><tr><td>119</td><td>0x77</td><td>dneg</td><td>将栈顶double类型数值取负并将结果压人栈顶</td></tr><tr><td>120</td><td>0x78</td><td>ishl</td><td>将int类型数值左移位指定位数并将结果压人栈项</td></tr><tr><td>121</td><td>0x79</td><td>lshl</td><td>将long类型数值左移位指定位数并将结果压人栈顶</td></tr><tr><td>122</td><td>0x7a</td><td>ishr</td><td>将int类型数值(有符号)右移位指定位数并将结果压入栈顶</td></tr><tr><td>123</td><td>0x7b</td><td>lshr</td><td>将long类型数值(有符号)右移位指定位数并将结果压入栈顶</td></tr><tr><td>124</td><td>0x7c</td><td>iushr</td><td>将int类型数值(无符号)右移位指定位数并将结果压入栈顶</td></tr><tr><td>125</td><td>0x7d</td><td>lushr</td><td>将long类型数值(无符号)右移位指定位数并将结果压入栈顶</td></tr><tr><td>126</td><td>0x7e</td><td>iand</td><td>将栈顶两int类型数值作“按位与”并将结果压人栈顶</td></tr><tr><td>127</td><td>0x7f</td><td>land</td><td>将栈顶两long类型数值作“按位与” 并将结果压人栈顶</td></tr><tr><td>128</td><td>0x80</td><td>ior</td><td>将栈顶两int类型数值作“按位或”并将结果压人栈项</td></tr><tr><td>129</td><td>0x81</td><td>lor</td><td>将栈顶两long类型数值作“按位或”并将结果压人栈顶</td></tr><tr><td>130</td><td>0x82</td><td>ixor</td><td>将栈顶两int类型数值作“按位异或”并将结果压人栈顶</td></tr><tr><td rowspan=15>转换</td><td>131</td><td>0x83</td><td>lxor</td><td>将栈顶两long类型数值作“按位异或”并将结果压人栈顶</td></tr><tr><td>132</td><td>0x84</td><td>iinc</td><td>将指定int类型变量增加指定值(i++，i--, i+=2)</td></tr><tr><td>133</td><td>0x85</td><td>i2l</td><td>将栈顶int类型数值强制转换成long类型数值并将结果压入栈顶</td></tr><tr><td>134</td><td>0x86</td><td>i2f</td><td>将栈顶int类型数值强制转换成float类型数值并将结果压入栈顶</td></tr><tr><td>135</td><td>0x87</td><td>i2d</td><td>将栈顶int类型数值强制转换成double类型数值并将结果压入栈顶</td></tr><tr><td>136</td><td>0x88</td><td>l2i</td><td>将栈顶long类型数值强制转换成int类型数值并将结果压入栈顶</td></tr><tr><td>137</td><td>0x89</td><td>l2f</td><td>将栈顶long类型数值强制转换成float类型数值并将结果压入栈顶</td></tr><tr><td>138</td><td>0x8a</td><td>l2d</td><td>将栈顶long类型数值强制转换成double类型数值并果压入栈顶</td></tr><tr><td>139</td><td>0x8b</td><td>f2i</td><td>将栈顶float类型数值强制转换成int类型数值并将结果压入栈顶</td></tr><tr><td>140</td><td>0x8c</td><td>f2l</td><td>将栈顶float类型数值强制转换成long类型数值并将结果压入栈顶</td></tr><tr><td>141</td><td>0x8d</td><td>f2d</td><td>将栈顶float类型数值强制转换成double类型数值并果压入栈顶</td></tr><tr><td>142</td><td>0x8e</td><td>d2i</td><td>将栈顶double类型数值强制转换成int类型数值并将果压入栈顶</td></tr><tr><td>143</td><td>0x8f</td><td>d2l</td><td>将栈顶double类型数值强制转换成long类型数值并果压入栈顶</td></tr><tr><td>144</td><td>0x90</td><td>d2f</td><td>将栈顶double类型数值强制转换成float类型数值并果压入栈顶</td></tr><tr><td>145</td><td>0x91</td><td>i2b</td><td>将栈顶int类型数值强制转换成byte类型数值并将结果压入栈顶</td></tr><tr><td rowspan=19 class=xl70>比较</td><td>146</td><td>0x92</td><td>i2c</td><td>将栈顶int类型数值强制转换成char类型数值并将结果压入栈顶</td></tr><tr><td>147</td><td>0x93</td><td>i2s</td><td>将栈顶int类型数值强制转换成short类型数值并将结果压入栈顶</td></tr><tr><td>148</td><td>0x94</td><td>lcmp</td><td>比较栈顶两long类型数值大小，并将结果( 1, 0, -1)压入栈顶</td></tr><tr><td>149</td><td>0x95</td><td>fcmpl</td><td>比较栈顶两float类型数值大小，并将结果(1, 0, -1)压入栈顶;当其中-一个数值为“NaN&quot;时，将-1压入栈顶</td></tr><tr><td>150</td><td>0x96</td><td>fcmpg</td><td>比较栈顶两float类型数值大小，并将结果(1，0, -1)压入栈顶;当其中-一个数值为“NaN&quot;时，将1压入栈顶</td></tr><tr><td>151</td><td>0x97</td><td>dcmpl</td><td>比较栈顶两double类型数值大小，并将结果(1,0,-1)压入栈顶;当其中-一个数值为“NaN&quot;时，将-1压入栈顶</td></tr><tr><td>152</td><td>0x98</td><td>dcmpg</td><td>比较栈顶两double类型数值大小，并将结果(1.0,-1)压入栈顶;当其中一个数值为“NaN&quot; 时，将1压入栈顶</td></tr><tr><td>153</td><td>0x99</td><td>ifeq</td><td>当栈顶int类型数值等于0时跳转</td></tr><tr><td>154</td><td>0x9a</td><td>ifne</td><td>当栈顶int类型数值不等于0时跳转</td></tr><tr><td>155</td><td>0x9b</td><td>jft</td><td>当栈顶int类型数值小于0时跳转</td></tr><tr><td>156</td><td>0x9c</td><td>ifge</td><td>当栈顶int类型数值大于等于0时跳转</td></tr><tr><td>157</td><td>0x9d</td><td>ifgt</td><td>当栈顶int类型数值大于0时跳转</td></tr><tr><td>158</td><td>0x9e</td><td>ifle</td><td>当栈顶int类型数值小于等于0时跳转</td></tr><tr><td>159</td><td>0x9f</td><td>if_icmpeq</td><td>比较栈顶两int类型数值大小，当前者等于后者时跳转</td></tr><tr><td>160</td><td>0xa0</td><td>f_icmpne</td><td>比较栈顶两int类型数值大小，当前者不等于后者时跳转</td></tr><tr><td>161</td><td>0xa1</td><td>if_icmplt</td><td>比较栈顶两int类型数值大小，当前者小于后者时跳转</td></tr><tr><td>162</td><td>0xa2</td><td>if_icmpge</td><td>比较栈顶两int类型数值大小，当前者大于等于后者时跳转</td></tr><tr><td>163</td><td>0xa3</td><td>if_icmpgt</td><td>比较栈顶两int类型数值大小，当前者大于后者时跳转</td></tr><tr><td>164</td><td>0xa4</td><td>if_icmple</td><td>比较栈顶两int类型数值大小，当前者小于等于后者时跳转</td></tr><tr><td rowspan=11>控制</td><td>165</td><td>0xa5</td><td>if_acmpeq</td><td>比较栈顶两引用类型数值，当结果相等时跳转</td></tr><tr><td>166</td><td>0xa6</td><td>if_acmpne</td><td>比较栈顶两引用类型数值，当结果不相等时跳转</td></tr><tr><td>167</td><td>0xa 7</td><td>goto</td><td>无条件跳转</td></tr><tr><td>168</td><td>0xa8</td><td>jsr</td><td>跳转至指定16位offset位置，并将jsr下一条指令地址压入栈顶</td></tr><tr><td>169</td><td>0xa9</td><td>ret</td><td>返回至由指定的局部变量所给出的指令位置(一般与jsr、jsr_w联合使用)</td></tr><tr><td>170</td><td>0xaa</td><td>tableswitch</td><td>用于switch条件跳转，case值连续(变长指令)</td></tr><tr><td>171</td><td>0xab</td><td>lookupswitch</td><td>用于switch条件跳转，case 值不连续(变长指令)</td></tr><tr><td>172</td><td>0xac</td><td>ireturn</td><td>从当前方法返回int</td></tr><tr><td>173</td><td>0xad</td><td>lreturn</td><td>从当前方法返回long</td></tr><tr><td>174</td><td>0xae</td><td>freturn</td><td>从当前方法返回float</td></tr><tr><td>175</td><td>0xaf</td><td>dreturn</td><td>从当前方法返回double</td></tr><tr><td rowspan=18>引用</td><td>176</td><td>0xb0</td><td>areturn</td><td>从当前方法返回对象引用</td></tr><tr><td>177</td><td>0xb1</td><td>return</td><td>从当前方法返回void</td></tr><tr><td>178</td><td>0xb2</td><td>getstatic</td><td>获取指定类的静态字段，并将其值压人栈顶</td></tr><tr><td>179</td><td>0xb3</td><td>putstatic</td><td>为指定类的静态字段赋值</td></tr><tr><td>180</td><td>0xb4</td><td>getfield</td><td>获取指定类的实例字段，并将其值压人栈顶</td></tr><tr><td>181</td><td>0xb5</td><td>pufield</td><td>为指定类的实例字段赋值</td></tr><tr><td>182</td><td>0xb6</td><td>invokevirtual</td><td>调用实例方法</td></tr><tr><td>183</td><td>0xb7</td><td>invokespecial</td><td>调用父类方法、实例初始化方法、私有方法</td></tr><tr><td>184</td><td>0xb8</td><td>invokestatic</td><td>调用静态方法</td></tr><tr><td>185</td><td>0xb9</td><td>invokeinterface</td><td>调用接口方法</td></tr><tr><td>186</td><td>0xba</td><td>invokedynamic</td><td>调用动态链接方法</td></tr><tr><td>187</td><td>0xbb</td><td>new</td><td>创建一个对象，并将其引用值压人栈顶</td></tr><tr><td>188</td><td>0xbc</td><td>newarray</td><td>创建一个指定原始类型(如int、float、char等)的数组，并将其引用值压人栈顶</td></tr><tr><td>189</td><td>0xbd</td><td>anewarray</td><td>创建一个引用型(如类、接口、数组)的数组，并将其引用值压人栈顶</td></tr><tr><td>190</td><td>0xbe</td><td>arraylength</td><td>获得数组的长度值并压人栈顶</td></tr><tr><td>191</td><td>0xbf</td><td>athrow</td><td>将栈顶的异常抛出</td></tr><tr><td>192</td><td>0xc0</td><td>checkcast</td><td>检验类型转换，检验未通过将抛出ClassCastException</td></tr><tr><td>193</td><td>0xc1</td><td>instanceof</td><td>检验对象是否是指定类的实例，如果是，就将1压人栈顶，否则将0压人栈顶</td></tr><tr><td rowspan=8>扩展</td><td>194</td><td>0xc2</td><td>monitorenter</td><td>获得对象的锁，用于实现同步块</td></tr><tr><td>195</td><td>0xc3</td><td>monitorexit</td><td>释放对象的锁，用于实现同步块</td></tr><tr><td>196</td><td>0xc4</td><td>wide</td><td>扩展本地变量索引的宽度</td></tr><tr><td>197</td><td>0xc5</td><td>multianewarray</td><td>创建指定类型和指定维度的多维数组(执行该指令时，操作栈中必须包含各维度的长度值)，并将其引用值压人栈项</td></tr><tr><td>198</td><td>0xc6</td><td>ifnull</td><td>为null时跳转</td></tr><tr><td>199</td><td>0xc7</td><td>ifnonnull</td><td>不为null时跳转</td></tr><tr><td>200</td><td>0xc8</td><td>goto_w</td><td>无条件跳转(宽索引)</td></tr><tr><td>201</td><td>0xc9</td><td>jsr_w</td><td>跳转至指定32位offset位置，并将jsr_w下一条指令地址压人栈顶</td></tr><tr><td rowspan=3>保留字段</td><td>202</td><td>0xca</td><td>breakpoint</td><td>调试时的断点标记</td></tr><tr><td>254</td><td>0xfe</td><td>impdep1</td><td>为特定软件而预留的语言后门</td></tr><tr><td>255</td><td>0xff</td><td>impdep2</td><td>为特定硬件而预留的语言后门</td></tr></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;本表内容来自&lt;strong&gt;《Java虚拟机规范（Java SE 8 版）》&lt;/strong&gt;第7章&lt;/em&gt;&lt;/p&gt;
&lt;table border=0 cellpadding=0 cellspacing=0&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td colspan=2&gt;操作
      
    
    </summary>
    
      <category term="Java" scheme="https://www.wangfeng.pro/categories/Java/"/>
    
      <category term="JVM" scheme="https://www.wangfeng.pro/categories/Java/JVM/"/>
    
    
      <category term="JVM" scheme="https://www.wangfeng.pro/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>将Maven项目打包发布到中央仓库</title>
    <link href="https://www.wangfeng.pro/2018/06/%E5%B0%86maven%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E5%88%B0%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.html"/>
    <id>https://www.wangfeng.pro/2018/06/将maven项目打包发布到中央仓库.html</id>
    <published>2018-06-06T05:02:58.000Z</published>
    <updated>2021-04-29T11:56:08.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><h3 id="groupId-要求"><a href="#groupId-要求" class="headerlink" title="groupId 要求"></a>groupId 要求</h3><p>项目的<code>groupId</code>一般为域名倒置，比如我的网址为wangfeng.pro，<code>groupId</code>则可以命名为<code>pro.wangfeng</code>。如果你没有属于自己的域名，则最好使用<strong>github</strong>相关的<code>groupId</code>，比如你的项目地址的github路径为<code>https://www.github.com/username/projectName</code>,那<code>groupId</code>最好为<code>com.github.username</code>。<br><code>groupId</code>的命名规范关系到在接下来的Sonatype OSSRH审核能否通过。</p><h3 id="修改-pom-xml"><a href="#修改-pom-xml" class="headerlink" title="修改 pom.xml"></a>修改 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开源协议--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>The Apache License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开发者信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>wf2311<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>wf2311@163.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">role</span>&gt;</span>developer<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timezone</span>&gt;</span>+8<span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">organization</span>&gt;</span>wf2311<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>https://www.wangfeng.pro<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:git:https://github.com/wf2311/common-lang.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>scm:git:https://github.com/wf2311/common-lang.git<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/wf2311/common-lang<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span>v$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--仓库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--快照库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--正式库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Central Staging Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意将其中与项目相关的路径修改为当前项目的</strong><br>加入相关插件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--编译插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--源码插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--javadoc插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">additionalparam</span>&gt;</span>-Xdoclint:none<span class="tag">&lt;/<span class="name">additionalparam</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--gpg签名插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>sign-artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改完以上配置后，将代码同步到github上面。</p><h2 id="注册-Sonatype-OSSRH"><a href="#注册-Sonatype-OSSRH" class="headerlink" title="注册 Sonatype OSSRH"></a>注册 Sonatype OSSRH</h2><p>注册地址：<a href="https://issues.sonatype.org/secure/Signup!default.jspa">https://issues.sonatype.org/secure/Signup!default.jspa</a></p><h2 id="提交一个-ISSUE"><a href="#提交一个-ISSUE" class="headerlink" title="提交一个 ISSUE"></a>提交一个 ISSUE</h2><p>登录成功后，进入<a href="https://issues.sonatype.org/secure/Dashboard.jspa">首页</a>，点击页面上方的 <strong>Create</strong> 按钮，弹出如下窗口：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/issue-before.png" alt="打开创建ISSUE窗口"></p><p><strong>Project</strong> 选择 <strong>Open Source Project Repository Hosting</strong>；<br><strong>Issue Type</strong> 选择 <strong>New Project</strong>；<br><strong>Summary</strong> 可以填<strong>你的项目名称</strong>；<br>其它的必填项请参考示例填写，填写完成后点击下方的 <strong>Create</strong> 按钮提交 ISSUE 。<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/issue-form.png" alt="填写表单"></p><p>提交成功后，点击页面上方的 <strong>Issue</strong> 按钮，可以看到刚刚你提交的 ISSUE :<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/open-issue.png" alt="前往ISSUE详情页"></p><p>稍等片刻，你就会审核者的相关评论，询问你填写的<code>groupId</code>对应的域名是不是属于你的：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/issue-ask.png" alt="审核者确认信息"></p><p>然后你需要点击下方的 <strong>Comment</strong> 按钮回答审核者，向他确认该域名是属于你的:<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/to-answer.png" alt="点击Comment按钮"></p><p>这个确认过程可能需要你和审核者交流几个来回才能搞定，具体过程可参考笔者的<a href="https://issues.sonatype.org/browse/OSSRH-40306">一个ISSUE案例</a>。</p><p>当最终审核通过后，你将收到审核者的如下回复：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/success-comment.png" alt="审核通过"></p><p>并且该 ISSUE 的状态将变为<code>RESOLVED</code>：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/success-status.png" alt="审核通过状态"></p><p>至此，你就有权限将该项目发布到maven中央仓库中了。</p><p><strong>注意：如果你还有其它的项目也需要发布到中央仓库，并且 groupId 和上面的一样，就不需要再次创建 ISSUE 了；只有在使用新的 groupId 时才需要提交 ISSUE。</strong></p><h2 id="gpg安装配置"><a href="#gpg安装配置" class="headerlink" title="gpg安装配置"></a>gpg安装配置</h2><h3 id="安装-gpg"><a href="#安装-gpg" class="headerlink" title="安装 gpg"></a>安装 gpg</h3><p>由于各个系统版本的 gpg 安装方式不尽相同，这里就不写详细安装方式了。具体步骤可以 google 、百度或者按<a href="https://www.gnupg.org/download/index.html">官网</a>上给的步骤下载安装。</p><p>安装完成后在终端或命令行运行以下命令，确认是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --version</span><br></pre></td></tr></table></figure><p>出现类似信息表上安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gpg (GnuPG) 2.1.21</span><br><span class="line">libgcrypt 1.7.8</span><br><span class="line">Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;https://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Home: /Users/wf2311/.gnupg</span><br><span class="line">支持的算法：</span><br><span class="line">公钥：RSA, ELG, DSA, ECDH, ECDSA, EDDSA</span><br><span class="line">对称加密：IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256,</span><br><span class="line">     TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256</span><br><span class="line">散列：SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224</span><br><span class="line">压缩：不压缩, ZIP, ZLIB, BZIP2</span><br></pre></td></tr></table></figure><h3 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h3><p><strong>以 Mac 下操作为例，不同系统的过程可能有所差异</strong><br>运行命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --gen-key</span><br></pre></td></tr></table></figure><p>会让你输入<strong>真实姓名</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gpg (GnuPG) 2.1.21; Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Note: Use <span class="string">&quot;gpg2 --full-generate-key&quot;</span> <span class="keyword">for</span> a full featured key generation dialog.</span><br><span class="line"></span><br><span class="line">You need a user ID to identify your key; the software constructs the user ID</span><br><span class="line">from the Real Name, Comment and Email Address <span class="keyword">in</span> this form:</span><br><span class="line">    <span class="string">&quot;Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">真实姓名：</span><br></pre></td></tr></table></figure><p>输入 你的姓名(<strong>至少为5个字符</strong>) ，回车<br>再输入你的电子邮箱 ，回车，出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Change (N)ame, (E)mail, or (O)kay/(Q)uit?</span><br></pre></td></tr></table></figure><p>选择 <code>O</code> 回车，出现如下提示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我们需要生成大量的随机字节。这个时候您可以多做些琐事(像是敲打键盘、移动</span><br><span class="line">鼠标、读写硬盘之类的)，这会让随机数字发生器有更好的机会获得足够的熵数。</span><br></pre></td></tr></table></figure><p>并且提示让你输入密码，输入密码后回车，<br>稍等片刻就会出现如下生成信息：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/05/gpg.png" alt="gpg 生成步骤"><br>图中的<code>CD4809496C405C2F72F62B31052A2DC27A064C14</code>即为生成的公钥</p><h3 id="发布公钥到-GPG-密钥服务器"><a href="#发布公钥到-GPG-密钥服务器" class="headerlink" title="发布公钥到 GPG 密钥服务器"></a>发布公钥到 GPG 密钥服务器</h3><p>运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://pool.sks-keyservers.net --send-keys CD4809496C405C2F72F62B31052A2DC27A064C14</span><br></pre></td></tr></table></figure><p>此操作因为网络原因可能需要等待一定的时间</p><h3 id="查询公钥是否发布成功"><a href="#查询公钥是否发布成功" class="headerlink" title="查询公钥是否发布成功"></a>查询公钥是否发布成功</h3><p>运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys CD4809496C405C2F72F62B31052A2DC27A064C14</span><br></pre></td></tr></table></figure><p>出现类似以下信息即表示发布成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gpg: 密钥 052A2DC27A064C14：“wf2311 &lt;wf2311@163.com&gt;”未改变</span><br><span class="line">gpg: 合计被处理的数量：1</span><br><span class="line">gpg:           未改变：1</span><br></pre></td></tr></table></figure><p>更多 gpg 命令请参考阮一峰的<a href="http://www.ruanyifeng.com/blog/2013/07/gpg.html">GPG入门教程</a></p><h2 id="修改-maven-配置文件"><a href="#修改-maven-配置文件" class="headerlink" title="修改 maven 配置文件"></a>修改 maven 配置文件</h2><p>在maven的配置文件 settings.xml 中添加以下内容:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>id须与pom.xml中distributionManagement下设置的id保持一致<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>注册Sonatype账号是填写的用户名<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>注册Sonatype账号是填写的密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>gpg<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.executable</span>&gt;</span>与gpg版本有关mac下一般填写gpg2,window下填gpg<span class="tag">&lt;/<span class="name">gpg.executable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.passphrase</span>&gt;</span>生成gpg秘钥过程中填写的密码<span class="tag">&lt;/<span class="name">gpg.passphrase</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="打包上传"><a href="#打包上传" class="headerlink" title="打包上传"></a>打包上传</h2><p>切换到当前项目路径，运行命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -DskipTests clean deploy</span><br></pre></td></tr></table></figure><p>正常情况下，如果运行成功未出错，项目会打包并上传的<strong>对应</strong>的仓库中：</p><ul><li>对应快照版本，即版本号以 <code>-SNAPSHOT</code> 结尾的，会立即上传到 <a href="https://oss.sonatype.org/content/repositories/snapshots">https://oss.sonatype.org/content/repositories/snapshots</a> 中，并且可以直接通过 maven 快照仓库引用，但是在 maven 中央仓库中搜索不到。</li><li>对应正式版本，即版本号不是以 <code>-SNAPSHOT</code> 结尾的，虽然也会上传到 <a href="https://oss.sonatype.org/service/local/staging/deploy/maven2/">https://oss.sonatype.org/service/local/staging/deploy/maven2/</a> 中，但还需要我们手动发布一下，才会发布到中央仓库中。</li></ul><p><strong>提示： 如果在 Mac 环境下打包是出现 gpg 相关的错误，可以参考 <a href="https://blog.csdn.net/wenbo20182/article/details/72850810">gpg: 签名时失败处理</a>这篇文章来处理</strong></p><h2 id="在-OSS-中发布构件"><a href="#在-OSS-中发布构件" class="headerlink" title="在 OSS 中发布构件"></a>在 OSS 中发布构件</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>登录 <a href="https://oss.sonatype.org/">https://oss.sonatype.org</a>，用户名密码与上面 Sonatype 的相同</p><h3 id="发布构建"><a href="#发布构建" class="headerlink" title="发布构建"></a>发布构建</h3><p>登录成功后会进入如下页面：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/oss-menu.png" alt="neuxs 管理页面"></p><p>点击左侧的 <strong>Build Promotion</strong> 下的 <strong>Staging Repositories</strong>，出现：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/oss-search.png" alt="根据groupId搜索"></p><p>在搜索输入框输入项目的 <strong>groupId</strong>，找到并选择你刚刚打包上传的项目。点击上方的 <strong>Close</strong> 按钮：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/oss-close.png" alt="close"></p><p>再在弹窗中点击 <strong>Confirm</strong> 按钮，过几秒后再点击上面的 <strong>Refresh</strong> 按钮进行刷新，就可以看到如下界面：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/oss-close-result.png" alt="close-result"></p><p>展开下方 <strong>Activity</strong> 面板的结果信息，如果出现如上图的信息，即表示构建通过。<br>再过几秒后再次点击点击上面的 <strong>Refresh</strong> 按钮进行刷新，就会看到旁边的 <strong>Release</strong> 按钮变为可操作状态：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/oss-to-release.png" alt="发布按钮"></p><p>最后点击 <strong>Release</strong> 按钮，出现弹窗：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/oss-confirm-release.png" alt="确认发布"></p><p>点击 <strong>Confirm</strong> 按钮，确认发布构建，至此发布构建的的步骤全部结束。<br>再等待大概一到两小时的同步时间后，便可以在中央仓库中<a href="http://search.maven.org/">搜索</a>到你发布的项目了：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/search-project.png" alt="搜索"></p><h2 id="修改-README-md-文件"><a href="#修改-README-md-文件" class="headerlink" title="修改 README.md 文件"></a>修改 README.md 文件</h2><p>在项目的 README.md 头部 加上 如下格式的内容：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![Maven Central](https:<span class="regexp">//m</span>aven-badges.herokuapp.com<span class="regexp">/maven-central/</span>&lt;groupId&gt;<span class="regexp">/&lt;projectName&gt;/</span>badge.svg)](https:<span class="regexp">//m</span>aven-badges.herokuapp.com<span class="regexp">/maven-central/</span>&lt;groupId&gt;/&lt;projectName&gt;)</span><br></pre></td></tr></table></figure><p>比如我的这个项目的 <strong>gorupId</strong> 为 <strong>pro.wangfeng</strong>，<strong>projectName</strong> 为 <strong>common-lang</strong>，则加上：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![Maven Central](https:<span class="regexp">//m</span>aven-badges.herokuapp.com<span class="regexp">/maven-central/</span>pro.wangfeng<span class="regexp">/common-lang/</span>badge.svg)](https:<span class="regexp">//m</span>aven-badges.herokuapp.com<span class="regexp">/maven-central/</span>pro.wangfeng/common-lang)</span><br></pre></td></tr></table></figure><p>之后就会出现如下显示：<br><img src="https://wf2311.oss-cn-shanghai.aliyuncs.com/2018/06/06/svg.png" alt="svg"></p><p>最后再给出两个在打包时十分有用的 maven 命令：</p><ul><li>更新父模块到指定版本号：</li></ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn versions:<span class="built_in">set</span> -DnewVersion=1.0.1-SNAPSHOT</span><br></pre></td></tr></table></figure><ul><li>更新子模块版本到与模块相同：</li></ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -N versions:update-child-modules</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.ktanx.com/blog/p/4352">将jar发布到maven中央仓库小记</a></li><li><a href="http://www.cnblogs.com/gaoxing/p/4359795.html">向maven中央仓库提交jar</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目配置&quot;&gt;&lt;a href=&quot;#项目配置&quot; class=&quot;headerlink&quot; title=&quot;项目配置&quot;&gt;&lt;/a&gt;项目配置&lt;/h2&gt;&lt;h3 id=&quot;groupId-要求&quot;&gt;&lt;a href=&quot;#groupId-要求&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Maven" scheme="https://www.wangfeng.pro/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://www.wangfeng.pro/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Docker命令备忘</title>
    <link href="https://www.wangfeng.pro/2018/06/docker%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98.html"/>
    <id>https://www.wangfeng.pro/2018/06/docker命令备忘.html</id>
    <published>2018-06-01T04:20:24.000Z</published>
    <updated>2021-05-14T12:27:05.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h2><h3 id="列出所有镜像"><a href="#列出所有镜像" class="headerlink" title="列出所有镜像"></a>列出所有镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure><h3 id="删除名称或标签为none的镜像"><a href="#删除名称或标签为none的镜像" class="headerlink" title="删除名称或标签为none的镜像"></a>删除名称或标签为none的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f  `docker images | grep <span class="string">&#x27;&lt;none&gt;&#x27;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h2><h3 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name MyJenkins -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><ul><li><strong>docker run</strong> : 由 image 建立 container 并执行之;</li><li><strong>-d</strong> : 建立 container 后，就脱离目前 process</li><li><strong>—name</strong> : 替 container 设置一个易识别的名字 <code>MyJenkins</code> (若省略，Docker 将随机命名，不易维护)</li><li><strong>-p</strong> : Docker 外部与 Jenkins 內部所对应的 port，其中左边为外部 Docker 的 port，右边为 Jenkins 內部的 port</li><li><strong>-v</strong> : 建立 <code>JENKINS_HOME</code> 环境变量，其目录在 <code>/var/jenkins_home</code>，为 Jenkins 的工作目录</li></ul><h3 id="重命名容器名称"><a href="#重命名容器名称" class="headerlink" title="重命名容器名称"></a>重命名容器名称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename &lt;old_name&gt; &lt;new_name&gt;</span><br></pre></td></tr></table></figure><h3 id="显示所有容器"><a href="#显示所有容器" class="headerlink" title="显示所有容器"></a>显示所有容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="根据容器名称启动-停止容器"><a href="#根据容器名称启动-停止容器" class="headerlink" title="根据容器名称启动/停止容器"></a>根据容器名称启动/停止容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker [stop] [start] &lt;container_name&gt;</span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container_name&gt; /bin/bash</span><br></pre></td></tr></table></figure><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h3 id="上传文件到容器"><a href="#上传文件到容器" class="headerlink" title="上传文件到容器"></a>上传文件到容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp [本地文件路径] &lt;container_name&gt;: [目标路径]</span><br></pre></td></tr></table></figure><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -t -f <span class="tag">&lt;<span class="name">container_name</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="删除异常停止的docker容器"><a href="#删除异常停止的docker容器" class="headerlink" title="删除异常停止的docker容器"></a>删除异常停止的docker容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm `docker ps -a | grep Exited | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://oomusou.io/docker/jenkins/" title="如何使用 Docker 安裝 Jenkins ?">如何使用 Docker 安裝 Jenkins ?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;镜像相关&quot;&gt;&lt;a href=&quot;#镜像相关&quot; class=&quot;headerlink&quot; title=&quot;镜像相关&quot;&gt;&lt;/a&gt;镜像相关&lt;/h2&gt;&lt;h3 id=&quot;列出所有镜像&quot;&gt;&lt;a href=&quot;#列出所有镜像&quot; class=&quot;headerlink&quot; title=&quot;列出所有镜像&quot;&gt;&lt;/a&gt;列出所有镜像&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker images&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;删除镜像&quot;&gt;&lt;a href=&quot;#删除镜像&quot; class=&quot;headerlink&quot; title=&quot;删除镜像&quot;&gt;&lt;/a&gt;删除镜像&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker image rm [选项] &amp;lt;镜像1&amp;gt; [&amp;lt;镜像2&amp;gt; ...]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;删除名称或标签为none的镜像&quot;&gt;&lt;a href=&quot;#删除名称或标签为none的镜像&quot; class=&quot;headerlink&quot; title=&quot;删除名称或标签为none的镜像&quot;&gt;&lt;/a&gt;删除名称或标签为none的镜像&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker rmi -f  `docker images | grep &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;lt;none&amp;gt;&amp;#x27;&lt;/span&gt; | awk &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#123;print $3&amp;#125;&amp;#x27;&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://www.wangfeng.pro/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.wangfeng.pro/tags/Docker/"/>
    
      <category term="命令" scheme="https://www.wangfeng.pro/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="笔记" scheme="https://www.wangfeng.pro/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
